# frozen_string_literal: true

module OpenAI
  module Resources
    class Beta
      class Threads
        class Messages
          # Create a message.
          #
          # @param thread_id [String] The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)
          #   to create a message for.
          #
          # @param params [OpenAI::Models::Beta::Threads::MessageCreateParams, Hash{Symbol=>Object}] .
          #
          #   @option params [String, Array<OpenAI::Models::Beta::Threads::ImageFileContentBlock, OpenAI::Models::Beta::Threads::ImageURLContentBlock, OpenAI::Models::Beta::Threads::TextContentBlockParam>] :content The text contents of the message.
          #
          #   @option params [Symbol, OpenAI::Models::Beta::Threads::MessageCreateParams::Role] :role The role of the entity that is creating the message. Allowed values include:
          #
          #     - `user`: Indicates the message is sent by an actual user and should be used in
          #       most cases to represent user-generated messages.
          #     - `assistant`: Indicates the message is generated by the assistant. Use this
          #       value to insert messages from the assistant into the conversation.
          #
          #   @option params [Array<OpenAI::Models::Beta::Threads::MessageCreateParams::Attachment>, nil] :attachments A list of files attached to the message, and the tools they should be added to.
          #
          #   @option params [Hash{Symbol=>String}, nil] :metadata Set of 16 key-value pairs that can be attached to an object. This can be useful
          #     for storing additional information about the object in a structured format, and
          #     querying for objects via API or the dashboard.
          #
          #     Keys are strings with a maximum length of 64 characters. Values are strings with
          #     a maximum length of 512 characters.
          #
          #   @option params [OpenAI::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
          #
          # @return [OpenAI::Models::Beta::Threads::Message]
          def create(thread_id, params)
            parsed, options = OpenAI::Models::Beta::Threads::MessageCreateParams.dump_request(params)
            @client.request(
              method: :post,
              path: ["threads/%1$s/messages", thread_id],
              body: parsed,
              model: OpenAI::Models::Beta::Threads::Message,
              options: options
            )
          end

          # Retrieve a message.
          #
          # @param message_id [String] The ID of the message to retrieve.
          #
          # @param params [OpenAI::Models::Beta::Threads::MessageRetrieveParams, Hash{Symbol=>Object}] .
          #
          #   @option params [String] :thread_id The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)
          #     to which this message belongs.
          #
          #   @option params [OpenAI::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
          #
          # @return [OpenAI::Models::Beta::Threads::Message]
          def retrieve(message_id, params)
            parsed, options = OpenAI::Models::Beta::Threads::MessageRetrieveParams.dump_request(params)
            thread_id =
              parsed.delete(:thread_id) do
                raise ArgumentError.new("missing required path argument #{_1}")
              end
            @client.request(
              method: :get,
              path: ["threads/%1$s/messages/%2$s", thread_id, message_id],
              model: OpenAI::Models::Beta::Threads::Message,
              options: options
            )
          end

          # Modifies a message.
          #
          # @param message_id [String] Path param: The ID of the message to modify.
          #
          # @param params [OpenAI::Models::Beta::Threads::MessageUpdateParams, Hash{Symbol=>Object}] .
          #
          #   @option params [String] :thread_id Path param: The ID of the thread to which this message belongs.
          #
          #   @option params [Hash{Symbol=>String}, nil] :metadata Body param: Set of 16 key-value pairs that can be attached to an object. This
          #     can be useful for storing additional information about the object in a
          #     structured format, and querying for objects via API or the dashboard.
          #
          #     Keys are strings with a maximum length of 64 characters. Values are strings with
          #     a maximum length of 512 characters.
          #
          #   @option params [OpenAI::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
          #
          # @return [OpenAI::Models::Beta::Threads::Message]
          def update(message_id, params)
            parsed, options = OpenAI::Models::Beta::Threads::MessageUpdateParams.dump_request(params)
            thread_id =
              parsed.delete(:thread_id) do
                raise ArgumentError.new("missing required path argument #{_1}")
              end
            @client.request(
              method: :post,
              path: ["threads/%1$s/messages/%2$s", thread_id, message_id],
              body: parsed,
              model: OpenAI::Models::Beta::Threads::Message,
              options: options
            )
          end

          # Returns a list of messages for a given thread.
          #
          # @param thread_id [String] The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)
          #   the messages belong to.
          #
          # @param params [OpenAI::Models::Beta::Threads::MessageListParams, Hash{Symbol=>Object}] .
          #
          #   @option params [String] :after A cursor for use in pagination. `after` is an object ID that defines your place
          #     in the list. For instance, if you make a list request and receive 100 objects,
          #     ending with obj_foo, your subsequent call can include after=obj_foo in order to
          #     fetch the next page of the list.
          #
          #   @option params [String] :before A cursor for use in pagination. `before` is an object ID that defines your place
          #     in the list. For instance, if you make a list request and receive 100 objects,
          #     starting with obj_foo, your subsequent call can include before=obj_foo in order
          #     to fetch the previous page of the list.
          #
          #   @option params [Integer] :limit A limit on the number of objects to be returned. Limit can range between 1 and
          #     100, and the default is 20.
          #
          #   @option params [Symbol, OpenAI::Models::Beta::Threads::MessageListParams::Order] :order Sort order by the `created_at` timestamp of the objects. `asc` for ascending
          #     order and `desc` for descending order.
          #
          #   @option params [String] :run_id Filter messages by the run ID that generated them.
          #
          #   @option params [OpenAI::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
          #
          # @return [OpenAI::CursorPage<OpenAI::Models::Beta::Threads::Message>]
          def list(thread_id, params = {})
            parsed, options = OpenAI::Models::Beta::Threads::MessageListParams.dump_request(params)
            @client.request(
              method: :get,
              path: ["threads/%1$s/messages", thread_id],
              query: parsed,
              page: OpenAI::CursorPage,
              model: OpenAI::Models::Beta::Threads::Message,
              options: options
            )
          end

          # Deletes a message.
          #
          # @param message_id [String] The ID of the message to delete.
          #
          # @param params [OpenAI::Models::Beta::Threads::MessageDeleteParams, Hash{Symbol=>Object}] .
          #
          #   @option params [String] :thread_id The ID of the thread to which this message belongs.
          #
          #   @option params [OpenAI::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
          #
          # @return [OpenAI::Models::Beta::Threads::MessageDeleted]
          def delete(message_id, params)
            parsed, options = OpenAI::Models::Beta::Threads::MessageDeleteParams.dump_request(params)
            thread_id =
              parsed.delete(:thread_id) do
                raise ArgumentError.new("missing required path argument #{_1}")
              end
            @client.request(
              method: :delete,
              path: ["threads/%1$s/messages/%2$s", thread_id, message_id],
              model: OpenAI::Models::Beta::Threads::MessageDeleted,
              options: options
            )
          end

          # @param client [OpenAI::Client]
          def initialize(client:)
            @client = client
          end
        end
      end
    end
  end
end
