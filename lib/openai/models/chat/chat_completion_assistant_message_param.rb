# frozen_string_literal: true

module OpenAI
  module Models
    module Chat
      class ChatCompletionAssistantMessageParam < OpenAI::BaseModel
        # @!attribute role
        #   The role of the messages author, in this case `assistant`.
        #
        #   @return [Symbol, :assistant]
        required :role, const: :assistant

        # @!attribute audio
        #   Data about a previous audio response from the model.
        #     [Learn more](https://platform.openai.com/docs/guides/audio).
        #
        #   @return [OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio, nil]
        optional :audio, -> { OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio }, nil?: true

        # @!attribute content
        #   The contents of the assistant message. Required unless `tool_calls` or
        #     `function_call` is specified.
        #
        #   @return [String, Array<OpenAI::Models::Chat::ChatCompletionContentPartText, OpenAI::Models::Chat::ChatCompletionContentPartRefusal>, nil]
        optional :content,
                 union: -> { OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content },
                 nil?: true

        # @!attribute function_call
        #   Deprecated and replaced by `tool_calls`. The name and arguments of a function
        #     that should be called, as generated by the model.
        #
        #   @return [OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall, nil]
        optional :function_call,
                 -> { OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall },
                 nil?: true

        # @!attribute [r] name
        #   An optional name for the participant. Provides the model information to
        #     differentiate between participants of the same role.
        #
        #   @return [String, nil]
        optional :name, String

        # @!parse
        #   # @return [String]
        #   attr_writer :name

        # @!attribute refusal
        #   The refusal message by the assistant.
        #
        #   @return [String, nil]
        optional :refusal, String, nil?: true

        # @!attribute [r] tool_calls
        #   The tool calls generated by the model, such as function calls.
        #
        #   @return [Array<OpenAI::Models::Chat::ChatCompletionMessageToolCall>, nil]
        optional :tool_calls, -> { OpenAI::ArrayOf[OpenAI::Models::Chat::ChatCompletionMessageToolCall] }

        # @!parse
        #   # @return [Array<OpenAI::Models::Chat::ChatCompletionMessageToolCall>]
        #   attr_writer :tool_calls

        # @!parse
        #   # Messages sent by the model in response to user messages.
        #   #
        #   # @param audio [OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio, nil]
        #   # @param content [String, Array<OpenAI::Models::Chat::ChatCompletionContentPartText, OpenAI::Models::Chat::ChatCompletionContentPartRefusal>, nil]
        #   # @param function_call [OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall, nil]
        #   # @param name [String]
        #   # @param refusal [String, nil]
        #   # @param tool_calls [Array<OpenAI::Models::Chat::ChatCompletionMessageToolCall>]
        #   # @param role [Symbol, :assistant]
        #   #
        #   def initialize(
        #     audio: nil,
        #     content: nil,
        #     function_call: nil,
        #     name: nil,
        #     refusal: nil,
        #     tool_calls: nil,
        #     role: :assistant,
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | OpenAI::BaseModel) -> void

        class Audio < OpenAI::BaseModel
          # @!attribute id
          #   Unique identifier for a previous audio response from the model.
          #
          #   @return [String]
          required :id, String

          # @!parse
          #   # Data about a previous audio response from the model.
          #   #   [Learn more](https://platform.openai.com/docs/guides/audio).
          #   #
          #   # @param id [String]
          #   #
          #   def initialize(id:, **) = super

          # def initialize: (Hash | OpenAI::BaseModel) -> void
        end

        # @abstract
        #
        # The contents of the assistant message. Required unless `tool_calls` or
        #   `function_call` is specified.
        class Content < OpenAI::Union
          ArrayOfContentPartArray = OpenAI::ArrayOf[union: -> { OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content::ArrayOfContentPart }]

          # The contents of the assistant message.
          variant String

          # An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
          variant OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content::ArrayOfContentPartArray

          # @abstract
          #
          # Learn about
          #   [text inputs](https://platform.openai.com/docs/guides/text-generation).
          class ArrayOfContentPart < OpenAI::Union
            discriminator :type

            # Learn about [text inputs](https://platform.openai.com/docs/guides/text-generation).
            variant :text, -> { OpenAI::Models::Chat::ChatCompletionContentPartText }

            variant :refusal, -> { OpenAI::Models::Chat::ChatCompletionContentPartRefusal }

            # @!parse
            #   class << self
            #     # @return [Array(OpenAI::Models::Chat::ChatCompletionContentPartText, OpenAI::Models::Chat::ChatCompletionContentPartRefusal)]
            #     def variants; end
            #   end
          end

          # @!parse
          #   class << self
          #     # @return [Array(String, Array<OpenAI::Models::Chat::ChatCompletionContentPartText, OpenAI::Models::Chat::ChatCompletionContentPartRefusal>)]
          #     def variants; end
          #   end
        end

        # @deprecated
        class FunctionCall < OpenAI::BaseModel
          # @!attribute arguments
          #   The arguments to call the function with, as generated by the model in JSON
          #     format. Note that the model does not always generate valid JSON, and may
          #     hallucinate parameters not defined by your function schema. Validate the
          #     arguments in your code before calling your function.
          #
          #   @return [String]
          required :arguments, String

          # @!attribute name
          #   The name of the function to call.
          #
          #   @return [String]
          required :name, String

          # @!parse
          #   # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          #   #   that should be called, as generated by the model.
          #   #
          #   # @param arguments [String]
          #   # @param name [String]
          #   #
          #   def initialize(arguments:, name:, **) = super

          # def initialize: (Hash | OpenAI::BaseModel) -> void
        end
      end
    end

    ChatCompletionAssistantMessageParam = Chat::ChatCompletionAssistantMessageParam
  end
end
