# frozen_string_literal: true

module OpenAI
  module Models
    module Chat
      class ChatCompletionMessage < OpenAI::Internal::Type::BaseModel
        # @!attribute content
        #   The contents of the message.
        #
        #   @return [String, nil]
        required :content, String, nil?: true

        # @!attribute refusal
        #   The refusal message generated by the model.
        #
        #   @return [String, nil]
        required :refusal, String, nil?: true

        # @!attribute role
        #   The role of the author of this message.
        #
        #   @return [Symbol, :assistant]
        required :role, const: :assistant

        # @!attribute [r] annotations
        #   Annotations for the message, when applicable, as when using the
        #   [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
        #
        #   @return [Array<OpenAI::Models::Chat::ChatCompletionMessage::Annotation>, nil]
        optional :annotations,
                 -> { OpenAI::Internal::Type::ArrayOf[OpenAI::Models::Chat::ChatCompletionMessage::Annotation] }

        # @!parse
        #   # @return [Array<OpenAI::Models::Chat::ChatCompletionMessage::Annotation>]
        #   attr_writer :annotations

        # @!attribute audio
        #   If the audio output modality is requested, this object contains data about the
        #   audio response from the model.
        #   [Learn more](https://platform.openai.com/docs/guides/audio).
        #
        #   @return [OpenAI::Models::Chat::ChatCompletionAudio, nil]
        optional :audio, -> { OpenAI::Models::Chat::ChatCompletionAudio }, nil?: true

        # @!attribute [r] function_call
        #   Deprecated and replaced by `tool_calls`. The name and arguments of a function
        #   that should be called, as generated by the model.
        #
        #   @return [OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall, nil]
        optional :function_call, -> { OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall }

        # @!parse
        #   # @return [OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall]
        #   attr_writer :function_call

        # @!attribute [r] tool_calls
        #   The tool calls generated by the model, such as function calls.
        #
        #   @return [Array<OpenAI::Models::Chat::ChatCompletionMessageToolCall>, nil]
        optional :tool_calls,
                 -> { OpenAI::Internal::Type::ArrayOf[OpenAI::Models::Chat::ChatCompletionMessageToolCall] }

        # @!parse
        #   # @return [Array<OpenAI::Models::Chat::ChatCompletionMessageToolCall>]
        #   attr_writer :tool_calls

        # @!parse
        #   # A chat completion message generated by the model.
        #   #
        #   # @param content [String, nil]
        #   # @param refusal [String, nil]
        #   # @param annotations [Array<OpenAI::Models::Chat::ChatCompletionMessage::Annotation>]
        #   # @param audio [OpenAI::Models::Chat::ChatCompletionAudio, nil]
        #   # @param function_call [OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall]
        #   # @param tool_calls [Array<OpenAI::Models::Chat::ChatCompletionMessageToolCall>]
        #   # @param role [Symbol, :assistant]
        #   #
        #   def initialize(
        #     content:,
        #     refusal:,
        #     annotations: nil,
        #     audio: nil,
        #     function_call: nil,
        #     tool_calls: nil,
        #     role: :assistant,
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void

        class Annotation < OpenAI::Internal::Type::BaseModel
          # @!attribute type
          #   The type of the URL citation. Always `url_citation`.
          #
          #   @return [Symbol, :url_citation]
          required :type, const: :url_citation

          # @!attribute url_citation
          #   A URL citation when using web search.
          #
          #   @return [OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation]
          required :url_citation, -> { OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation }

          # @!parse
          #   # A URL citation when using web search.
          #   #
          #   # @param url_citation [OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation]
          #   # @param type [Symbol, :url_citation]
          #   #
          #   def initialize(url_citation:, type: :url_citation, **) = super

          # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void

          # @see OpenAI::Models::Chat::ChatCompletionMessage::Annotation#url_citation
          class URLCitation < OpenAI::Internal::Type::BaseModel
            # @!attribute end_index
            #   The index of the last character of the URL citation in the message.
            #
            #   @return [Integer]
            required :end_index, Integer

            # @!attribute start_index
            #   The index of the first character of the URL citation in the message.
            #
            #   @return [Integer]
            required :start_index, Integer

            # @!attribute title
            #   The title of the web resource.
            #
            #   @return [String]
            required :title, String

            # @!attribute url
            #   The URL of the web resource.
            #
            #   @return [String]
            required :url, String

            # @!parse
            #   # A URL citation when using web search.
            #   #
            #   # @param end_index [Integer]
            #   # @param start_index [Integer]
            #   # @param title [String]
            #   # @param url [String]
            #   #
            #   def initialize(end_index:, start_index:, title:, url:, **) = super

            # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void
          end
        end

        # @deprecated
        #
        # @see OpenAI::Models::Chat::ChatCompletionMessage#function_call
        class FunctionCall < OpenAI::Internal::Type::BaseModel
          # @!attribute arguments
          #   The arguments to call the function with, as generated by the model in JSON
          #   format. Note that the model does not always generate valid JSON, and may
          #   hallucinate parameters not defined by your function schema. Validate the
          #   arguments in your code before calling your function.
          #
          #   @return [String]
          required :arguments, String

          # @!attribute name
          #   The name of the function to call.
          #
          #   @return [String]
          required :name, String

          # @!parse
          #   # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          #   # that should be called, as generated by the model.
          #   #
          #   # @param arguments [String]
          #   # @param name [String]
          #   #
          #   def initialize(arguments:, name:, **) = super

          # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void
        end
      end
    end

    ChatCompletionMessage = Chat::ChatCompletionMessage
  end
end
