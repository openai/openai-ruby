# frozen_string_literal: true

module OpenAI
  module Models
    module Chat
      # @see OpenAI::Resources::Chat::Completions#create
      #
      # @see OpenAI::Resources::Chat::Completions#create_streaming
      class ChatCompletion < OpenAI::Internal::Type::BaseModel
        # @!attribute id
        #   A unique identifier for the chat completion.
        #
        #   @return [String]
        required :id, String

        # @!attribute choices
        #   A list of chat completion choices. Can be more than one if `n` is greater
        #   than 1.
        #
        #   @return [Array<OpenAI::Models::Chat::ChatCompletion::Choice>]
        required :choices, -> { OpenAI::Internal::Type::ArrayOf[OpenAI::Models::Chat::ChatCompletion::Choice] }

        # @!attribute created
        #   The Unix timestamp (in seconds) of when the chat completion was created.
        #
        #   @return [Integer]
        required :created, Integer

        # @!attribute model
        #   The model used for the chat completion.
        #
        #   @return [String]
        required :model, String

        # @!attribute object
        #   The object type, which is always `chat.completion`.
        #
        #   @return [Symbol, :"chat.completion"]
        required :object, const: :"chat.completion"

        # @!attribute service_tier
        #   The service tier used for processing the request.
        #
        #   @return [Symbol, OpenAI::Models::Chat::ChatCompletion::ServiceTier, nil]
        optional :service_tier, enum: -> { OpenAI::Models::Chat::ChatCompletion::ServiceTier }, nil?: true

        # @!attribute [r] system_fingerprint
        #   This fingerprint represents the backend configuration that the model runs with.
        #
        #   Can be used in conjunction with the `seed` request parameter to understand when
        #   backend changes have been made that might impact determinism.
        #
        #   @return [String, nil]
        optional :system_fingerprint, String

        # @!parse
        #   # @return [String]
        #   attr_writer :system_fingerprint

        # @!attribute [r] usage
        #   Usage statistics for the completion request.
        #
        #   @return [OpenAI::Models::CompletionUsage, nil]
        optional :usage, -> { OpenAI::Models::CompletionUsage }

        # @!parse
        #   # @return [OpenAI::Models::CompletionUsage]
        #   attr_writer :usage

        # @!parse
        #   # Represents a chat completion response returned by model, based on the provided
        #   # input.
        #   #
        #   # @param id [String]
        #   # @param choices [Array<OpenAI::Models::Chat::ChatCompletion::Choice>]
        #   # @param created [Integer]
        #   # @param model [String]
        #   # @param service_tier [Symbol, OpenAI::Models::Chat::ChatCompletion::ServiceTier, nil]
        #   # @param system_fingerprint [String]
        #   # @param usage [OpenAI::Models::CompletionUsage]
        #   # @param object [Symbol, :"chat.completion"]
        #   #
        #   def initialize(
        #     id:,
        #     choices:,
        #     created:,
        #     model:,
        #     service_tier: nil,
        #     system_fingerprint: nil,
        #     usage: nil,
        #     object: :"chat.completion",
        #     **
        #   )
        #     super
        #   end

        # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void

        class Choice < OpenAI::Internal::Type::BaseModel
          # @!attribute finish_reason
          #   The reason the model stopped generating tokens. This will be `stop` if the model
          #   hit a natural stop point or a provided stop sequence, `length` if the maximum
          #   number of tokens specified in the request was reached, `content_filter` if
          #   content was omitted due to a flag from our content filters, `tool_calls` if the
          #   model called a tool, or `function_call` (deprecated) if the model called a
          #   function.
          #
          #   @return [Symbol, OpenAI::Models::Chat::ChatCompletion::Choice::FinishReason]
          required :finish_reason, enum: -> { OpenAI::Models::Chat::ChatCompletion::Choice::FinishReason }

          # @!attribute index
          #   The index of the choice in the list of choices.
          #
          #   @return [Integer]
          required :index, Integer

          # @!attribute logprobs
          #   Log probability information for the choice.
          #
          #   @return [OpenAI::Models::Chat::ChatCompletion::Choice::Logprobs, nil]
          required :logprobs, -> { OpenAI::Models::Chat::ChatCompletion::Choice::Logprobs }, nil?: true

          # @!attribute message
          #   A chat completion message generated by the model.
          #
          #   @return [OpenAI::Models::Chat::ChatCompletionMessage]
          required :message, -> { OpenAI::Models::Chat::ChatCompletionMessage }

          # @!parse
          #   # @param finish_reason [Symbol, OpenAI::Models::Chat::ChatCompletion::Choice::FinishReason]
          #   # @param index [Integer]
          #   # @param logprobs [OpenAI::Models::Chat::ChatCompletion::Choice::Logprobs, nil]
          #   # @param message [OpenAI::Models::Chat::ChatCompletionMessage]
          #   #
          #   def initialize(finish_reason:, index:, logprobs:, message:, **) = super

          # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void

          # The reason the model stopped generating tokens. This will be `stop` if the model
          # hit a natural stop point or a provided stop sequence, `length` if the maximum
          # number of tokens specified in the request was reached, `content_filter` if
          # content was omitted due to a flag from our content filters, `tool_calls` if the
          # model called a tool, or `function_call` (deprecated) if the model called a
          # function.
          #
          # @see OpenAI::Models::Chat::ChatCompletion::Choice#finish_reason
          module FinishReason
            extend OpenAI::Internal::Type::Enum

            STOP = :stop
            LENGTH = :length
            TOOL_CALLS = :tool_calls
            CONTENT_FILTER = :content_filter
            FUNCTION_CALL = :function_call

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   def self.values; end
          end

          # @see OpenAI::Models::Chat::ChatCompletion::Choice#logprobs
          class Logprobs < OpenAI::Internal::Type::BaseModel
            # @!attribute content
            #   A list of message content tokens with log probability information.
            #
            #   @return [Array<OpenAI::Models::Chat::ChatCompletionTokenLogprob>, nil]
            required :content,
                     -> { OpenAI::Internal::Type::ArrayOf[OpenAI::Models::Chat::ChatCompletionTokenLogprob] },
                     nil?: true

            # @!attribute refusal
            #   A list of message refusal tokens with log probability information.
            #
            #   @return [Array<OpenAI::Models::Chat::ChatCompletionTokenLogprob>, nil]
            required :refusal,
                     -> { OpenAI::Internal::Type::ArrayOf[OpenAI::Models::Chat::ChatCompletionTokenLogprob] },
                     nil?: true

            # @!parse
            #   # Log probability information for the choice.
            #   #
            #   # @param content [Array<OpenAI::Models::Chat::ChatCompletionTokenLogprob>, nil]
            #   # @param refusal [Array<OpenAI::Models::Chat::ChatCompletionTokenLogprob>, nil]
            #   #
            #   def initialize(content:, refusal:, **) = super

            # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void
          end
        end

        # The service tier used for processing the request.
        #
        # @see OpenAI::Models::Chat::ChatCompletion#service_tier
        module ServiceTier
          extend OpenAI::Internal::Type::Enum

          SCALE = :scale
          DEFAULT = :default

          finalize!

          # @!parse
          #   # @return [Array<Symbol>]
          #   def self.values; end
        end
      end
    end

    ChatCompletion = Chat::ChatCompletion
  end
end
