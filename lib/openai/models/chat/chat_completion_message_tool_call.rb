# frozen_string_literal: true

module OpenAI
  module Models
    module Chat
      class ChatCompletionMessageToolCall < OpenAI::Internal::Type::BaseModel
        # @!attribute id
        #   The ID of the tool call.
        #
        #   @return [String]
        required :id, String

        # @!attribute function
        #   The function that the model called.
        #
        #   @return [OpenAI::Models::Chat::ChatCompletionMessageToolCall::Function]
        required :function, -> { OpenAI::Models::Chat::ChatCompletionMessageToolCall::Function }

        # @!attribute type
        #   The type of the tool. Currently, only `function` is supported.
        #
        #   @return [Symbol, :function]
        required :type, const: :function

        # @!parse
        #   # @param id [String]
        #   # @param function [OpenAI::Models::Chat::ChatCompletionMessageToolCall::Function]
        #   # @param type [Symbol, :function]
        #   #
        #   def initialize(id:, function:, type: :function, **) = super

        # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void

        # @see OpenAI::Models::Chat::ChatCompletionMessageToolCall#function
        class Function < OpenAI::Internal::Type::BaseModel
          # @!attribute arguments
          #   The arguments to call the function with, as generated by the model in JSON
          #     format. Note that the model does not always generate valid JSON, and may
          #     hallucinate parameters not defined by your function schema. Validate the
          #     arguments in your code before calling your function.
          #
          #   @return [String]
          required :arguments, String

          # @!attribute name
          #   The name of the function to call.
          #
          #   @return [String]
          required :name, String

          # @!parse
          #   # The function that the model called.
          #   #
          #   # @param arguments [String]
          #   # @param name [String]
          #   #
          #   def initialize(arguments:, name:, **) = super

          # def initialize: (Hash | OpenAI::Internal::Type::BaseModel) -> void
        end
      end
    end

    ChatCompletionMessageToolCall = Chat::ChatCompletionMessageToolCall
  end
end
