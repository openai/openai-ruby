# frozen_string_literal: true

module OpenAI
  module Models
    module Responses
      # @abstract
      #
      # A message input to the model with a role indicating instruction following
      #   hierarchy. Instructions given with the `developer` or `system` role take
      #   precedence over instructions given with the `user` role. Messages with the
      #   `assistant` role are presumed to have been generated by the model in previous
      #   interactions.
      class ResponseInputItem < OpenAI::Union
        discriminator :type

        # A message input to the model with a role indicating instruction following
        # hierarchy. Instructions given with the `developer` or `system` role take
        # precedence over instructions given with the `user` role. Messages with the
        # `assistant` role are presumed to have been generated by the model in previous
        # interactions.
        variant :message, -> { OpenAI::Models::Responses::EasyInputMessage }

        # A message input to the model with a role indicating instruction following
        # hierarchy. Instructions given with the `developer` or `system` role take
        # precedence over instructions given with the `user` role.
        variant :message, -> { OpenAI::Models::Responses::ResponseInputItem::Message }

        # An output message from the model.
        variant :message, -> { OpenAI::Models::Responses::ResponseOutputMessage }

        # The results of a file search tool call. See the
        # [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
        variant :file_search_call, -> { OpenAI::Models::Responses::ResponseFileSearchToolCall }

        # A tool call to a computer use tool. See the
        # [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
        variant :computer_call, -> { OpenAI::Models::Responses::ResponseComputerToolCall }

        # The output of a computer tool call.
        variant :computer_call_output, -> { OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput }

        # The results of a web search tool call. See the
        # [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
        variant :web_search_call, -> { OpenAI::Models::Responses::ResponseFunctionWebSearch }

        # A tool call to run a function. See the
        # [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
        variant :function_call, -> { OpenAI::Models::Responses::ResponseFunctionToolCall }

        # The output of a function tool call.
        variant :function_call_output, -> { OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput }

        # A description of the chain of thought used by a reasoning model while generating
        # a response.
        variant :reasoning, -> { OpenAI::Models::Responses::ResponseReasoningItem }

        # An internal identifier for an item to reference.
        variant :item_reference, -> { OpenAI::Models::Responses::ResponseInputItem::ItemReference }

        class Message < OpenAI::BaseModel
          # @!attribute content
          #   A list of one or many input items to the model, containing different content
          #     types.
          #
          #   @return [Array<OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::Responses::ResponseInputImage, OpenAI::Models::Responses::ResponseInputFile>]
          required :content, -> { OpenAI::ArrayOf[union: OpenAI::Models::Responses::ResponseInputContent] }

          # @!attribute role
          #   The role of the message input. One of `user`, `system`, or `developer`.
          #
          #   @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Role]
          required :role, enum: -> { OpenAI::Models::Responses::ResponseInputItem::Message::Role }

          # @!attribute [r] status
          #   The status of item. One of `in_progress`, `completed`, or `incomplete`.
          #     Populated when items are returned via API.
          #
          #   @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Status, nil]
          optional :status, enum: -> { OpenAI::Models::Responses::ResponseInputItem::Message::Status }

          # @!parse
          #   # @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Status]
          #   attr_writer :status

          # @!attribute [r] type
          #   The type of the message input. Always set to `message`.
          #
          #   @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Type, nil]
          optional :type, enum: -> { OpenAI::Models::Responses::ResponseInputItem::Message::Type }

          # @!parse
          #   # @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Type]
          #   attr_writer :type

          # @!parse
          #   # A message input to the model with a role indicating instruction following
          #   #   hierarchy. Instructions given with the `developer` or `system` role take
          #   #   precedence over instructions given with the `user` role.
          #   #
          #   # @param content [Array<OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::Responses::ResponseInputImage, OpenAI::Models::Responses::ResponseInputFile>]
          #   # @param role [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Role]
          #   # @param status [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Status]
          #   # @param type [Symbol, OpenAI::Models::Responses::ResponseInputItem::Message::Type]
          #   #
          #   def initialize(content:, role:, status: nil, type: nil, **) = super

          # def initialize: (Hash | OpenAI::BaseModel) -> void

          # @abstract
          #
          # The role of the message input. One of `user`, `system`, or `developer`.
          class Role < OpenAI::Enum
            USER = :user
            SYSTEM = :system
            DEVELOPER = :developer

            finalize!
          end

          # @abstract
          #
          # The status of item. One of `in_progress`, `completed`, or `incomplete`.
          #   Populated when items are returned via API.
          class Status < OpenAI::Enum
            IN_PROGRESS = :in_progress
            COMPLETED = :completed
            INCOMPLETE = :incomplete

            finalize!
          end

          # @abstract
          #
          # The type of the message input. Always set to `message`.
          class Type < OpenAI::Enum
            MESSAGE = :message

            finalize!
          end
        end

        class ComputerCallOutput < OpenAI::BaseModel
          # @!attribute call_id
          #   The ID of the computer tool call that produced the output.
          #
          #   @return [String]
          required :call_id, String

          # @!attribute output
          #   A computer screenshot image used with the computer use tool.
          #
          #   @return [OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Output]
          required :output, -> { OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Output }

          # @!attribute type
          #   The type of the computer tool call output. Always `computer_call_output`.
          #
          #   @return [Symbol, :computer_call_output]
          required :type, const: :computer_call_output

          # @!attribute [r] id
          #   The ID of the computer tool call output.
          #
          #   @return [String, nil]
          optional :id, String

          # @!parse
          #   # @return [String]
          #   attr_writer :id

          # @!attribute [r] acknowledged_safety_checks
          #   The safety checks reported by the API that have been acknowledged by the
          #     developer.
          #
          #   @return [Array<OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck>, nil]
          optional :acknowledged_safety_checks,
                   -> { OpenAI::ArrayOf[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck] }

          # @!parse
          #   # @return [Array<OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck>]
          #   attr_writer :acknowledged_safety_checks

          # @!attribute [r] status
          #   The status of the message input. One of `in_progress`, `completed`, or
          #     `incomplete`. Populated when input items are returned via API.
          #
          #   @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Status, nil]
          optional :status, enum: -> { OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Status }

          # @!parse
          #   # @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Status]
          #   attr_writer :status

          # @!parse
          #   # The output of a computer tool call.
          #   #
          #   # @param call_id [String]
          #   # @param output [OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Output]
          #   # @param id [String]
          #   # @param acknowledged_safety_checks [Array<OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck>]
          #   # @param status [Symbol, OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::Status]
          #   # @param type [Symbol, :computer_call_output]
          #   #
          #   def initialize(call_id:, output:, id: nil, acknowledged_safety_checks: nil, status: nil, type: :computer_call_output, **) = super

          # def initialize: (Hash | OpenAI::BaseModel) -> void

          class Output < OpenAI::BaseModel
            # @!attribute type
            #   Specifies the event type. For a computer screenshot, this property is always set
            #     to `computer_screenshot`.
            #
            #   @return [Symbol, :computer_screenshot]
            required :type, const: :computer_screenshot

            # @!attribute [r] file_id
            #   The identifier of an uploaded file that contains the screenshot.
            #
            #   @return [String, nil]
            optional :file_id, String

            # @!parse
            #   # @return [String]
            #   attr_writer :file_id

            # @!attribute [r] image_url
            #   The URL of the screenshot image.
            #
            #   @return [String, nil]
            optional :image_url, String

            # @!parse
            #   # @return [String]
            #   attr_writer :image_url

            # @!parse
            #   # A computer screenshot image used with the computer use tool.
            #   #
            #   # @param file_id [String]
            #   # @param image_url [String]
            #   # @param type [Symbol, :computer_screenshot]
            #   #
            #   def initialize(file_id: nil, image_url: nil, type: :computer_screenshot, **) = super

            # def initialize: (Hash | OpenAI::BaseModel) -> void
          end

          class AcknowledgedSafetyCheck < OpenAI::BaseModel
            # @!attribute id
            #   The ID of the pending safety check.
            #
            #   @return [String]
            required :id, String

            # @!attribute code
            #   The type of the pending safety check.
            #
            #   @return [String]
            required :code, String

            # @!attribute message
            #   Details about the pending safety check.
            #
            #   @return [String]
            required :message, String

            # @!parse
            #   # A pending safety check for the computer call.
            #   #
            #   # @param id [String]
            #   # @param code [String]
            #   # @param message [String]
            #   #
            #   def initialize(id:, code:, message:, **) = super

            # def initialize: (Hash | OpenAI::BaseModel) -> void
          end

          # @abstract
          #
          # The status of the message input. One of `in_progress`, `completed`, or
          #   `incomplete`. Populated when input items are returned via API.
          class Status < OpenAI::Enum
            IN_PROGRESS = :in_progress
            COMPLETED = :completed
            INCOMPLETE = :incomplete

            finalize!
          end
        end

        class FunctionCallOutput < OpenAI::BaseModel
          # @!attribute call_id
          #   The unique ID of the function tool call generated by the model.
          #
          #   @return [String]
          required :call_id, String

          # @!attribute output
          #   A JSON string of the output of the function tool call.
          #
          #   @return [String]
          required :output, String

          # @!attribute type
          #   The type of the function tool call output. Always `function_call_output`.
          #
          #   @return [Symbol, :function_call_output]
          required :type, const: :function_call_output

          # @!attribute [r] id
          #   The unique ID of the function tool call output. Populated when this item is
          #     returned via API.
          #
          #   @return [String, nil]
          optional :id, String

          # @!parse
          #   # @return [String]
          #   attr_writer :id

          # @!attribute [r] status
          #   The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          #     Populated when items are returned via API.
          #
          #   @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::Status, nil]
          optional :status, enum: -> { OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::Status }

          # @!parse
          #   # @return [Symbol, OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::Status]
          #   attr_writer :status

          # @!parse
          #   # The output of a function tool call.
          #   #
          #   # @param call_id [String]
          #   # @param output [String]
          #   # @param id [String]
          #   # @param status [Symbol, OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::Status]
          #   # @param type [Symbol, :function_call_output]
          #   #
          #   def initialize(call_id:, output:, id: nil, status: nil, type: :function_call_output, **) = super

          # def initialize: (Hash | OpenAI::BaseModel) -> void

          # @abstract
          #
          # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
          #   Populated when items are returned via API.
          class Status < OpenAI::Enum
            IN_PROGRESS = :in_progress
            COMPLETED = :completed
            INCOMPLETE = :incomplete

            finalize!
          end
        end

        class ItemReference < OpenAI::BaseModel
          # @!attribute id
          #   The ID of the item to reference.
          #
          #   @return [String]
          required :id, String

          # @!attribute type
          #   The type of item to reference. Always `item_reference`.
          #
          #   @return [Symbol, :item_reference]
          required :type, const: :item_reference

          # @!parse
          #   # An internal identifier for an item to reference.
          #   #
          #   # @param id [String]
          #   # @param type [Symbol, :item_reference]
          #   #
          #   def initialize(id:, type: :item_reference, **) = super

          # def initialize: (Hash | OpenAI::BaseModel) -> void
        end

        # @!parse
        #   class << self
        #     # @return [Array(OpenAI::Models::Responses::EasyInputMessage, OpenAI::Models::Responses::ResponseInputItem::Message, OpenAI::Models::Responses::ResponseOutputMessage, OpenAI::Models::Responses::ResponseFileSearchToolCall, OpenAI::Models::Responses::ResponseComputerToolCall, OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput, OpenAI::Models::Responses::ResponseFunctionWebSearch, OpenAI::Models::Responses::ResponseFunctionToolCall, OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput, OpenAI::Models::Responses::ResponseReasoningItem, OpenAI::Models::Responses::ResponseInputItem::ItemReference)]
        #     def variants; end
        #   end
      end
    end
  end
end
