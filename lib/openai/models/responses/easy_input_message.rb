# frozen_string_literal: true

module OpenAI
  module Models
    module Responses
      class EasyInputMessage < OpenAI::BaseModel
        # @!attribute content
        #   Text, image, or audio input to the model, used to generate a response. Can also
        #     contain previous assistant responses.
        #
        #   @return [String, Array<OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::Responses::ResponseInputImage, OpenAI::Models::Responses::ResponseInputFile>]
        required :content, union: -> { OpenAI::Models::Responses::EasyInputMessage::Content }

        # @!attribute role
        #   The role of the message input. One of `user`, `assistant`, `system`, or
        #     `developer`.
        #
        #   @return [Symbol, OpenAI::Models::Responses::EasyInputMessage::Role]
        required :role, enum: -> { OpenAI::Models::Responses::EasyInputMessage::Role }

        # @!attribute [r] type
        #   The type of the message input. Always `message`.
        #
        #   @return [Symbol, OpenAI::Models::Responses::EasyInputMessage::Type, nil]
        optional :type, enum: -> { OpenAI::Models::Responses::EasyInputMessage::Type }

        # @!parse
        #   # @return [Symbol, OpenAI::Models::Responses::EasyInputMessage::Type]
        #   attr_writer :type

        # @!parse
        #   # A message input to the model with a role indicating instruction following
        #   #   hierarchy. Instructions given with the `developer` or `system` role take
        #   #   precedence over instructions given with the `user` role. Messages with the
        #   #   `assistant` role are presumed to have been generated by the model in previous
        #   #   interactions.
        #   #
        #   # @param content [String, Array<OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::Responses::ResponseInputImage, OpenAI::Models::Responses::ResponseInputFile>]
        #   # @param role [Symbol, OpenAI::Models::Responses::EasyInputMessage::Role]
        #   # @param type [Symbol, OpenAI::Models::Responses::EasyInputMessage::Type]
        #   #
        #   def initialize(content:, role:, type: nil, **) = super

        # def initialize: (Hash | OpenAI::BaseModel) -> void

        # Text, image, or audio input to the model, used to generate a response. Can also
        #   contain previous assistant responses.
        module Content
          extend OpenAI::Union

          # A text input to the model.
          variant String

          # A list of one or many input items to the model, containing different content
          # types.
          variant -> { OpenAI::Models::Responses::ResponseInputMessageContentList }

          # @!parse
          #   class << self
          #     # @return [Array(String, Array<OpenAI::Models::Responses::ResponseInputText, OpenAI::Models::Responses::ResponseInputImage, OpenAI::Models::Responses::ResponseInputFile>)]
          #     def variants; end
          #   end
        end

        # The role of the message input. One of `user`, `assistant`, `system`, or
        #   `developer`.
        module Role
          extend OpenAI::Enum

          USER = :user
          ASSISTANT = :assistant
          SYSTEM = :system
          DEVELOPER = :developer

          finalize!

          class << self
            # @!parse
            #   # @return [Array<Symbol>]
            #   def values; end
          end
        end

        # The type of the message input. Always `message`.
        module Type
          extend OpenAI::Enum

          MESSAGE = :message

          finalize!

          class << self
            # @!parse
            #   # @return [Array<Symbol>]
            #   def values; end
          end
        end
      end
    end
  end
end
