module OpenAI
  module Internal
    module Type
      module BaseStream[Message, Elem]
        include Enumerable[Elem]

        def self.defer_closing: (
          Enumerable[top] stream
        ) -> (^(Integer arg0) -> void)

        attr_reader status: Integer

        attr_reader headers: ::Hash[String, String]

        def close: -> void

        private def iterator: -> Enumerable[Elem]

        def each: { (Elem arg0) -> void } -> void

        def to_enum: -> Enumerator[Elem]

        alias enum_for to_enum

        def initialize: (
          model: Class | OpenAI::Internal::Type::Converter,
          url: URI::Generic,
          status: Integer,
          headers: ::Hash[String, String],
          response: top,
          unwrap: Symbol
          | Integer
          | ::Array[Symbol | Integer]
          | ^(top arg0) -> top,
          stream: Enumerable[Message]
        ) -> void

        def inspect: -> String
      end
    end
  end
end
