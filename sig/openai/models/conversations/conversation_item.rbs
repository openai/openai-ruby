module OpenAI
  module Models
    module ConversationItem = Conversations::ConversationItem

    module Conversations
      type conversation_item =
        OpenAI::Conversations::Message
        | OpenAI::Responses::ResponseFunctionToolCallItem
        | OpenAI::Responses::ResponseFunctionToolCallOutputItem
        | OpenAI::Responses::ResponseFileSearchToolCall
        | OpenAI::Responses::ResponseFunctionWebSearch
        | OpenAI::Conversations::ConversationItem::ImageGenerationCall
        | OpenAI::Responses::ResponseComputerToolCall
        | OpenAI::Responses::ResponseComputerToolCallOutputItem
        | OpenAI::Responses::ResponseReasoningItem
        | OpenAI::Responses::ResponseCodeInterpreterToolCall
        | OpenAI::Conversations::ConversationItem::LocalShellCall
        | OpenAI::Conversations::ConversationItem::LocalShellCallOutput
        | OpenAI::Conversations::ConversationItem::McpListTools
        | OpenAI::Conversations::ConversationItem::McpApprovalRequest
        | OpenAI::Conversations::ConversationItem::McpApprovalResponse
        | OpenAI::Conversations::ConversationItem::McpCall
        | OpenAI::Responses::ResponseCustomToolCall
        | OpenAI::Responses::ResponseCustomToolCallOutput

      module ConversationItem
        extend OpenAI::Internal::Type::Union

        type image_generation_call =
          {
            id: String,
            result: String?,
            status: OpenAI::Models::Conversations::ConversationItem::ImageGenerationCall::status,
            type: :image_generation_call
          }

        class ImageGenerationCall < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor result: String?

          attr_accessor status: OpenAI::Models::Conversations::ConversationItem::ImageGenerationCall::status

          attr_accessor type: :image_generation_call

          def initialize: (
            id: String,
            result: String?,
            status: OpenAI::Models::Conversations::ConversationItem::ImageGenerationCall::status,
            ?type: :image_generation_call
          ) -> void

          def to_hash: -> {
            id: String,
            result: String?,
            status: OpenAI::Models::Conversations::ConversationItem::ImageGenerationCall::status,
            type: :image_generation_call
          }

          type status = :in_progress | :completed | :generating | :failed

          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            GENERATING: :generating
            FAILED: :failed

            def self?.values: -> ::Array[OpenAI::Models::Conversations::ConversationItem::ImageGenerationCall::status]
          end
        end

        type local_shell_call =
          {
            id: String,
            action: OpenAI::Conversations::ConversationItem::LocalShellCall::Action,
            call_id: String,
            status: OpenAI::Models::Conversations::ConversationItem::LocalShellCall::status,
            type: :local_shell_call
          }

        class LocalShellCall < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor action: OpenAI::Conversations::ConversationItem::LocalShellCall::Action

          attr_accessor call_id: String

          attr_accessor status: OpenAI::Models::Conversations::ConversationItem::LocalShellCall::status

          attr_accessor type: :local_shell_call

          def initialize: (
            id: String,
            action: OpenAI::Conversations::ConversationItem::LocalShellCall::Action,
            call_id: String,
            status: OpenAI::Models::Conversations::ConversationItem::LocalShellCall::status,
            ?type: :local_shell_call
          ) -> void

          def to_hash: -> {
            id: String,
            action: OpenAI::Conversations::ConversationItem::LocalShellCall::Action,
            call_id: String,
            status: OpenAI::Models::Conversations::ConversationItem::LocalShellCall::status,
            type: :local_shell_call
          }

          type action =
            {
              command: ::Array[String],
              env: ::Hash[Symbol, String],
              type: :exec,
              timeout_ms: Integer?,
              user: String?,
              working_directory: String?
            }

          class Action < OpenAI::Internal::Type::BaseModel
            attr_accessor command: ::Array[String]

            attr_accessor env: ::Hash[Symbol, String]

            attr_accessor type: :exec

            attr_accessor timeout_ms: Integer?

            attr_accessor user: String?

            attr_accessor working_directory: String?

            def initialize: (
              command: ::Array[String],
              env: ::Hash[Symbol, String],
              ?timeout_ms: Integer?,
              ?user: String?,
              ?working_directory: String?,
              ?type: :exec
            ) -> void

            def to_hash: -> {
              command: ::Array[String],
              env: ::Hash[Symbol, String],
              type: :exec,
              timeout_ms: Integer?,
              user: String?,
              working_directory: String?
            }
          end

          type status = :in_progress | :completed | :incomplete

          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            INCOMPLETE: :incomplete

            def self?.values: -> ::Array[OpenAI::Models::Conversations::ConversationItem::LocalShellCall::status]
          end
        end

        type local_shell_call_output =
          {
            id: String,
            output: String,
            type: :local_shell_call_output,
            status: OpenAI::Models::Conversations::ConversationItem::LocalShellCallOutput::status?
          }

        class LocalShellCallOutput < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor output: String

          attr_accessor type: :local_shell_call_output

          attr_accessor status: OpenAI::Models::Conversations::ConversationItem::LocalShellCallOutput::status?

          def initialize: (
            id: String,
            output: String,
            ?status: OpenAI::Models::Conversations::ConversationItem::LocalShellCallOutput::status?,
            ?type: :local_shell_call_output
          ) -> void

          def to_hash: -> {
            id: String,
            output: String,
            type: :local_shell_call_output,
            status: OpenAI::Models::Conversations::ConversationItem::LocalShellCallOutput::status?
          }

          type status = :in_progress | :completed | :incomplete

          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            INCOMPLETE: :incomplete

            def self?.values: -> ::Array[OpenAI::Models::Conversations::ConversationItem::LocalShellCallOutput::status]
          end
        end

        type mcp_list_tools =
          {
            id: String,
            server_label: String,
            tools: ::Array[OpenAI::Conversations::ConversationItem::McpListTools::Tool],
            type: :mcp_list_tools,
            error: String?
          }

        class McpListTools < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor server_label: String

          attr_accessor tools: ::Array[OpenAI::Conversations::ConversationItem::McpListTools::Tool]

          attr_accessor type: :mcp_list_tools

          attr_accessor error: String?

          def initialize: (
            id: String,
            server_label: String,
            tools: ::Array[OpenAI::Conversations::ConversationItem::McpListTools::Tool],
            ?error: String?,
            ?type: :mcp_list_tools
          ) -> void

          def to_hash: -> {
            id: String,
            server_label: String,
            tools: ::Array[OpenAI::Conversations::ConversationItem::McpListTools::Tool],
            type: :mcp_list_tools,
            error: String?
          }

          type tool =
            {
              input_schema: top,
              name: String,
              annotations: top?,
              description: String?
            }

          class Tool < OpenAI::Internal::Type::BaseModel
            attr_accessor input_schema: top

            attr_accessor name: String

            attr_accessor annotations: top?

            attr_accessor description: String?

            def initialize: (
              input_schema: top,
              name: String,
              ?annotations: top?,
              ?description: String?
            ) -> void

            def to_hash: -> {
              input_schema: top,
              name: String,
              annotations: top?,
              description: String?
            }
          end
        end

        type mcp_approval_request =
          {
            id: String,
            arguments: String,
            name: String,
            server_label: String,
            type: :mcp_approval_request
          }

        class McpApprovalRequest < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor arguments: String

          attr_accessor name: String

          attr_accessor server_label: String

          attr_accessor type: :mcp_approval_request

          def initialize: (
            id: String,
            arguments: String,
            name: String,
            server_label: String,
            ?type: :mcp_approval_request
          ) -> void

          def to_hash: -> {
            id: String,
            arguments: String,
            name: String,
            server_label: String,
            type: :mcp_approval_request
          }
        end

        type mcp_approval_response =
          {
            id: String,
            approval_request_id: String,
            approve: bool,
            type: :mcp_approval_response,
            reason: String?
          }

        class McpApprovalResponse < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor approval_request_id: String

          attr_accessor approve: bool

          attr_accessor type: :mcp_approval_response

          attr_accessor reason: String?

          def initialize: (
            id: String,
            approval_request_id: String,
            approve: bool,
            ?reason: String?,
            ?type: :mcp_approval_response
          ) -> void

          def to_hash: -> {
            id: String,
            approval_request_id: String,
            approve: bool,
            type: :mcp_approval_response,
            reason: String?
          }
        end

        type mcp_call =
          {
            id: String,
            arguments: String,
            name: String,
            server_label: String,
            type: :mcp_call,
            error: String?,
            output: String?
          }

        class McpCall < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor arguments: String

          attr_accessor name: String

          attr_accessor server_label: String

          attr_accessor type: :mcp_call

          attr_accessor error: String?

          attr_accessor output: String?

          def initialize: (
            id: String,
            arguments: String,
            name: String,
            server_label: String,
            ?error: String?,
            ?output: String?,
            ?type: :mcp_call
          ) -> void

          def to_hash: -> {
            id: String,
            arguments: String,
            name: String,
            server_label: String,
            type: :mcp_call,
            error: String?,
            output: String?
          }
        end

        def self?.variants: -> ::Array[OpenAI::Models::Conversations::conversation_item]
      end
    end
  end
end
