module OpenAI
  module Models
    module Conversations
      type output_text_content =
        {
          annotations: ::Array[OpenAI::Models::Conversations::OutputTextContent::annotation],
          text: String,
          type: :output_text,
          logprobs: ::Array[OpenAI::Conversations::LobProb]
        }

      class OutputTextContent < OpenAI::Internal::Type::BaseModel
        attr_accessor annotations: ::Array[OpenAI::Models::Conversations::OutputTextContent::annotation]

        attr_accessor text: String

        attr_accessor type: :output_text

        attr_reader logprobs: ::Array[OpenAI::Conversations::LobProb]?

        def logprobs=: (
          ::Array[OpenAI::Conversations::LobProb]
        ) -> ::Array[OpenAI::Conversations::LobProb]

        def initialize: (
          annotations: ::Array[OpenAI::Models::Conversations::OutputTextContent::annotation],
          text: String,
          ?logprobs: ::Array[OpenAI::Conversations::LobProb],
          ?type: :output_text
        ) -> void

        def to_hash: -> {
          annotations: ::Array[OpenAI::Models::Conversations::OutputTextContent::annotation],
          text: String,
          type: :output_text,
          logprobs: ::Array[OpenAI::Conversations::LobProb]
        }

        type annotation =
          OpenAI::Conversations::FileCitationBody
          | OpenAI::Conversations::URLCitationBody
          | OpenAI::Conversations::ContainerFileCitationBody

        module Annotation
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Conversations::OutputTextContent::annotation]
        end
      end
    end
  end
end
