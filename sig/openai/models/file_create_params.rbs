module OpenAI
  module Models
    type file_create_params =
      {
        file: OpenAI::Internal::file_input,
        purpose: OpenAI::Models::file_purpose,
        expires_after: OpenAI::FileCreateParams::ExpiresAfter
      }
      & OpenAI::Internal::Type::request_parameters

    class FileCreateParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      attr_accessor file: OpenAI::Internal::file_input

      attr_accessor purpose: OpenAI::Models::file_purpose

      attr_reader expires_after: OpenAI::FileCreateParams::ExpiresAfter?

      def expires_after=: (
        OpenAI::FileCreateParams::ExpiresAfter
      ) -> OpenAI::FileCreateParams::ExpiresAfter

      def initialize: (
        file: OpenAI::Internal::file_input,
        purpose: OpenAI::Models::file_purpose,
        ?expires_after: OpenAI::FileCreateParams::ExpiresAfter,
        ?request_options: OpenAI::request_opts
      ) -> void

      def to_hash: -> {
        file: OpenAI::Internal::file_input,
        purpose: OpenAI::Models::file_purpose,
        expires_after: OpenAI::FileCreateParams::ExpiresAfter,
        request_options: OpenAI::RequestOptions
      }

      type expires_after = { anchor: :created_at, seconds: Integer }

      class ExpiresAfter < OpenAI::Internal::Type::BaseModel
        attr_accessor anchor: :created_at

        attr_accessor seconds: Integer

        def initialize: (seconds: Integer, ?anchor: :created_at) -> void

        def to_hash: -> { anchor: :created_at, seconds: Integer }
      end
    end
  end
end
