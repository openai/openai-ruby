module OpenAI
  module Models
    module Audio
      type speech_create_params =
        {
          input: String,
          model: OpenAI::Models::Audio::SpeechCreateParams::model,
          voice: OpenAI::Models::Audio::SpeechCreateParams::voice,
          instructions: String,
          response_format: OpenAI::Models::Audio::SpeechCreateParams::response_format,
          speed: Float
        }
        & OpenAI::Internal::Type::request_parameters

      class SpeechCreateParams < OpenAI::Internal::Type::BaseModel
        extend OpenAI::Internal::Type::RequestParameters::Converter
        include OpenAI::Internal::Type::RequestParameters

        attr_accessor input: String

        attr_accessor model: OpenAI::Models::Audio::SpeechCreateParams::model

        attr_accessor voice: OpenAI::Models::Audio::SpeechCreateParams::voice

        attr_reader instructions: String?

        def instructions=: (String) -> String

        attr_reader response_format: OpenAI::Models::Audio::SpeechCreateParams::response_format?

        def response_format=: (
          OpenAI::Models::Audio::SpeechCreateParams::response_format
        ) -> OpenAI::Models::Audio::SpeechCreateParams::response_format

        attr_reader speed: Float?

        def speed=: (Float) -> Float

        def initialize: (
          input: String,
          model: OpenAI::Models::Audio::SpeechCreateParams::model,
          voice: OpenAI::Models::Audio::SpeechCreateParams::voice,
          ?instructions: String,
          ?response_format: OpenAI::Models::Audio::SpeechCreateParams::response_format,
          ?speed: Float,
          ?request_options: OpenAI::request_opts
        ) -> void

        def to_hash: -> OpenAI::Models::Audio::speech_create_params

        type model = String | OpenAI::Models::Audio::speech_model

        module Model
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> [String, OpenAI::Models::Audio::speech_model]
        end

        type voice =
          String
          | :alloy
          | :ash
          | :ballad
          | :coral
          | :echo
          | :fable
          | :onyx
          | :nova
          | :sage
          | :shimmer
          | :verse

        module Voice
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> [String, (:alloy
          | :ash
          | :ballad
          | :coral
          | :echo
          | :fable
          | :onyx
          | :nova
          | :sage
          | :shimmer
          | :verse)]

          ALLOY: :alloy
          ASH: :ash
          BALLAD: :ballad
          CORAL: :coral
          ECHO: :echo
          FABLE: :fable
          ONYX: :onyx
          NOVA: :nova
          SAGE: :sage
          SHIMMER: :shimmer
          VERSE: :verse
        end

        type response_format = :mp3 | :opus | :aac | :flac | :wav | :pcm

        module ResponseFormat
          extend OpenAI::Internal::Type::Enum

          MP3: :mp3
          OPUS: :opus
          AAC: :aac
          FLAC: :flac
          WAV: :wav
          PCM: :pcm

          def self?.values: -> ::Array[OpenAI::Models::Audio::SpeechCreateParams::response_format]
        end
      end
    end
  end
end
