module OpenAI
  module Models
    module Audio
      type transcription =
        {
          text: String,
          logprobs: ::Array[OpenAI::Models::Audio::Transcription::Logprob]
        }

      class Transcription < OpenAI::Internal::Type::BaseModel
        attr_accessor text: String

        attr_reader logprobs: ::Array[OpenAI::Models::Audio::Transcription::Logprob]?

        def logprobs=: (
          ::Array[OpenAI::Models::Audio::Transcription::Logprob]
        ) -> ::Array[OpenAI::Models::Audio::Transcription::Logprob]

        def initialize: (
          text: String,
          ?logprobs: ::Array[OpenAI::Models::Audio::Transcription::Logprob]
        ) -> void

        def to_hash: -> OpenAI::Models::Audio::transcription

        type logprob = { token: String, bytes: ::Array[Float], logprob: Float }

        class Logprob < OpenAI::Internal::Type::BaseModel
          attr_reader token: String?

          def token=: (String) -> String

          attr_reader bytes: ::Array[Float]?

          def bytes=: (::Array[Float]) -> ::Array[Float]

          attr_reader logprob: Float?

          def logprob=: (Float) -> Float

          def initialize: (
            ?token: String,
            ?bytes: ::Array[Float],
            ?logprob: Float
          ) -> void

          def to_hash: -> OpenAI::Models::Audio::Transcription::logprob
        end
      end
    end
  end
end
