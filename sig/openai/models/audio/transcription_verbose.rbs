module OpenAI
  module Models
    module Audio
      type transcription_verbose =
        {
          duration: Float,
          language: String,
          text: String,
          segments: ::Array[OpenAI::Models::Audio::TranscriptionSegment],
          words: ::Array[OpenAI::Models::Audio::TranscriptionWord]
        }

      class TranscriptionVerbose < OpenAI::BaseModel
        attr_accessor duration: Float

        attr_accessor language: String

        attr_accessor text: String

        attr_reader segments: ::Array[OpenAI::Models::Audio::TranscriptionSegment]?

        def segments=: (
          ::Array[OpenAI::Models::Audio::TranscriptionSegment]
        ) -> ::Array[OpenAI::Models::Audio::TranscriptionSegment]

        attr_reader words: ::Array[OpenAI::Models::Audio::TranscriptionWord]?

        def words=: (
          ::Array[OpenAI::Models::Audio::TranscriptionWord]
        ) -> ::Array[OpenAI::Models::Audio::TranscriptionWord]

        def initialize:
          (
            duration: Float,
            language: String,
            text: String,
            ?segments: ::Array[OpenAI::Models::Audio::TranscriptionSegment],
            ?words: ::Array[OpenAI::Models::Audio::TranscriptionWord]
          ) -> void
          | (
            ?OpenAI::Models::Audio::transcription_verbose
            | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::Audio::transcription_verbose
      end
    end
  end
end
