module OpenAI
  module Models
    module Evals
      type run_list_params =
        {
          after: String,
          limit: Integer,
          order: OpenAI::Models::Evals::RunListParams::order,
          status: OpenAI::Models::Evals::RunListParams::status
        }
        & OpenAI::Internal::Type::request_parameters

      class RunListParams < OpenAI::Internal::Type::BaseModel
        extend OpenAI::Internal::Type::RequestParameters::Converter
        include OpenAI::Internal::Type::RequestParameters

        attr_reader after: String?

        def after=: (String) -> String

        attr_reader limit: Integer?

        def limit=: (Integer) -> Integer

        attr_reader order: OpenAI::Models::Evals::RunListParams::order?

        def order=: (
          OpenAI::Models::Evals::RunListParams::order
        ) -> OpenAI::Models::Evals::RunListParams::order

        attr_reader status: OpenAI::Models::Evals::RunListParams::status?

        def status=: (
          OpenAI::Models::Evals::RunListParams::status
        ) -> OpenAI::Models::Evals::RunListParams::status

        def initialize: (
          ?after: String,
          ?limit: Integer,
          ?order: OpenAI::Models::Evals::RunListParams::order,
          ?status: OpenAI::Models::Evals::RunListParams::status,
          ?request_options: OpenAI::request_opts
        ) -> void

        def to_hash: -> OpenAI::Models::Evals::run_list_params

        type order = :asc | :desc

        module Order
          extend OpenAI::Internal::Type::Enum

          ASC: :asc
          DESC: :desc

          def self?.values: -> ::Array[OpenAI::Models::Evals::RunListParams::order]
        end

        type status = :queued | :in_progress | :completed | :canceled | :failed

        module Status
          extend OpenAI::Internal::Type::Enum

          QUEUED: :queued
          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          CANCELED: :canceled
          FAILED: :failed

          def self?.values: -> ::Array[OpenAI::Models::Evals::RunListParams::status]
        end
      end
    end
  end
end
