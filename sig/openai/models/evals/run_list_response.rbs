module OpenAI
  module Models
    module Evals
      type run_list_response =
        {
          id: String,
          created_at: Integer,
          data_source: OpenAI::Models::Evals::RunListResponse::data_source,
          error: OpenAI::Models::Evals::EvalAPIError,
          eval_id: String,
          metadata: OpenAI::Models::metadata?,
          model: String,
          name: String,
          object: :"eval.run",
          per_model_usage: ::Array[OpenAI::Models::Evals::RunListResponse::PerModelUsage],
          per_testing_criteria_results: ::Array[OpenAI::Models::Evals::RunListResponse::PerTestingCriteriaResult],
          report_url: String,
          result_counts: OpenAI::Models::Evals::RunListResponse::ResultCounts,
          status: String
        }

      class RunListResponse < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Integer

        attr_accessor data_source: OpenAI::Models::Evals::RunListResponse::data_source

        attr_accessor error: OpenAI::Models::Evals::EvalAPIError

        attr_accessor eval_id: String

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor model: String

        attr_accessor name: String

        attr_accessor object: :"eval.run"

        attr_accessor per_model_usage: ::Array[OpenAI::Models::Evals::RunListResponse::PerModelUsage]

        attr_accessor per_testing_criteria_results: ::Array[OpenAI::Models::Evals::RunListResponse::PerTestingCriteriaResult]

        attr_accessor report_url: String

        attr_accessor result_counts: OpenAI::Models::Evals::RunListResponse::ResultCounts

        attr_accessor status: String

        def initialize: (
          id: String,
          created_at: Integer,
          data_source: OpenAI::Models::Evals::RunListResponse::data_source,
          error: OpenAI::Models::Evals::EvalAPIError,
          eval_id: String,
          metadata: OpenAI::Models::metadata?,
          model: String,
          name: String,
          per_model_usage: ::Array[OpenAI::Models::Evals::RunListResponse::PerModelUsage],
          per_testing_criteria_results: ::Array[OpenAI::Models::Evals::RunListResponse::PerTestingCriteriaResult],
          report_url: String,
          result_counts: OpenAI::Models::Evals::RunListResponse::ResultCounts,
          status: String,
          ?object: :"eval.run"
        ) -> void

        def to_hash: -> OpenAI::Models::Evals::run_list_response

        type data_source =
          OpenAI::Models::Evals::CreateEvalJSONLRunDataSource
          | OpenAI::Models::Evals::CreateEvalCompletionsRunDataSource

        module DataSource
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> [OpenAI::Models::Evals::CreateEvalJSONLRunDataSource, OpenAI::Models::Evals::CreateEvalCompletionsRunDataSource]
        end

        type per_model_usage =
          {
            cached_tokens: Integer,
            completion_tokens: Integer,
            invocation_count: Integer,
            model_name: String,
            prompt_tokens: Integer,
            total_tokens: Integer
          }

        class PerModelUsage < OpenAI::Internal::Type::BaseModel
          attr_accessor cached_tokens: Integer

          attr_accessor completion_tokens: Integer

          attr_accessor invocation_count: Integer

          attr_accessor model_name: String

          attr_accessor prompt_tokens: Integer

          attr_accessor total_tokens: Integer

          def initialize: (
            cached_tokens: Integer,
            completion_tokens: Integer,
            invocation_count: Integer,
            model_name: String,
            prompt_tokens: Integer,
            total_tokens: Integer
          ) -> void

          def to_hash: -> OpenAI::Models::Evals::RunListResponse::per_model_usage
        end

        type per_testing_criteria_result =
          { failed: Integer, passed: Integer, testing_criteria: String }

        class PerTestingCriteriaResult < OpenAI::Internal::Type::BaseModel
          attr_accessor failed: Integer

          attr_accessor passed: Integer

          attr_accessor testing_criteria: String

          def initialize: (
            failed: Integer,
            passed: Integer,
            testing_criteria: String
          ) -> void

          def to_hash: -> OpenAI::Models::Evals::RunListResponse::per_testing_criteria_result
        end

        type result_counts =
          { errored: Integer, failed: Integer, passed: Integer, total: Integer }

        class ResultCounts < OpenAI::Internal::Type::BaseModel
          attr_accessor errored: Integer

          attr_accessor failed: Integer

          attr_accessor passed: Integer

          attr_accessor total: Integer

          def initialize: (
            errored: Integer,
            failed: Integer,
            passed: Integer,
            total: Integer
          ) -> void

          def to_hash: -> OpenAI::Models::Evals::RunListResponse::result_counts
        end
      end
    end
  end
end
