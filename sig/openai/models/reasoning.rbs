module OpenAI
  module Models
    type reasoning =
      {
        effort: OpenAI::Models::reasoning_effort?,
        generate_summary: OpenAI::Models::Reasoning::generate_summary?
      }

    class Reasoning < OpenAI::BaseModel
      attr_accessor effort: OpenAI::Models::reasoning_effort?

      attr_accessor generate_summary: OpenAI::Models::Reasoning::generate_summary?

      def initialize: (
        ?effort: OpenAI::Models::reasoning_effort?,
        ?generate_summary: OpenAI::Models::Reasoning::generate_summary?
      ) -> void

      def to_hash: -> OpenAI::Models::reasoning

      type generate_summary = :concise | :detailed

      class GenerateSummary < OpenAI::Enum
        CONCISE: :concise
        DETAILED: :detailed

        def self.values: -> ::Array[OpenAI::Models::Reasoning::generate_summary]
      end
    end
  end
end
