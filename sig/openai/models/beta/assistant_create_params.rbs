module OpenAI
  module Models
    module Beta
      type assistant_create_params =
        {
          model: OpenAI::Models::Beta::AssistantCreateParams::model,
          description: String?,
          instructions: String?,
          metadata: OpenAI::Models::metadata?,
          name: String?,
          reasoning_effort: OpenAI::Models::reasoning_effort?,
          response_format: OpenAI::Models::Beta::assistant_response_format_option?,
          temperature: Float?,
          tool_resources: UnnamedTypeWithNoPropertyInfoOrParent0?,
          tools: ::Array[OpenAI::Models::Beta::assistant_tool],
          top_p: Float?
        }
        & OpenAI::request_parameters

      class AssistantCreateParams < OpenAI::BaseModel
        extend OpenAI::RequestParameters::Converter
        include OpenAI::RequestParameters

        attr_accessor model: OpenAI::Models::Beta::AssistantCreateParams::model

        attr_accessor description: String?

        attr_accessor instructions: String?

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor name: String?

        attr_accessor reasoning_effort: OpenAI::Models::reasoning_effort?

        attr_accessor response_format: OpenAI::Models::Beta::assistant_response_format_option?

        attr_accessor temperature: Float?

        attr_accessor tool_resources: UnnamedTypeWithNoPropertyInfoOrParent0?

        attr_reader tools: ::Array[OpenAI::Models::Beta::assistant_tool]?

        def tools=: (
          ::Array[OpenAI::Models::Beta::assistant_tool]
        ) -> ::Array[OpenAI::Models::Beta::assistant_tool]

        attr_accessor top_p: Float?

        def initialize: (
          model: OpenAI::Models::Beta::AssistantCreateParams::model,
          ?description: String?,
          ?instructions: String?,
          ?metadata: OpenAI::Models::metadata?,
          ?name: String?,
          ?reasoning_effort: OpenAI::Models::reasoning_effort?,
          ?response_format: OpenAI::Models::Beta::assistant_response_format_option?,
          ?temperature: Float?,
          ?tool_resources: UnnamedTypeWithNoPropertyInfoOrParent0?,
          ?tools: ::Array[OpenAI::Models::Beta::assistant_tool],
          ?top_p: Float?,
          ?request_options: OpenAI::request_opts
        ) -> void

        def to_hash: -> OpenAI::Models::Beta::assistant_create_params

        type model = String | OpenAI::Models::chat_model

        module Model
          extend OpenAI::Union

          def self.variants: -> [String, OpenAI::Models::chat_model]
        end
      end
    end
  end
end
