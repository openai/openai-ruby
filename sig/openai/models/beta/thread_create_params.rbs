module OpenAI
  module Models
    module Beta
      type thread_create_params =
        {
          messages: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message],
          metadata: OpenAI::Models::metadata?,
          tool_resources: OpenAI::Models::Beta::ThreadCreateParams::ToolResources?
        }
        & OpenAI::Internal::Type::request_parameters

      class ThreadCreateParams < OpenAI::Internal::Type::BaseModel
        extend OpenAI::Internal::Type::RequestParameters::Converter
        include OpenAI::Internal::Type::RequestParameters

        attr_reader messages: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message]?

        def messages=: (
          ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message]
        ) -> ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message]

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor tool_resources: OpenAI::Models::Beta::ThreadCreateParams::ToolResources?

        def initialize: (
          ?messages: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message],
          ?metadata: OpenAI::Models::metadata?,
          ?tool_resources: OpenAI::Models::Beta::ThreadCreateParams::ToolResources?,
          ?request_options: OpenAI::request_opts
        ) -> void

        def to_hash: -> OpenAI::Models::Beta::thread_create_params

        type message =
          {
            content: OpenAI::Models::Beta::ThreadCreateParams::Message::content,
            role: OpenAI::Models::Beta::ThreadCreateParams::Message::role,
            attachments: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment]?,
            metadata: OpenAI::Models::metadata?
          }

        class Message < OpenAI::Internal::Type::BaseModel
          attr_accessor content: OpenAI::Models::Beta::ThreadCreateParams::Message::content

          attr_accessor role: OpenAI::Models::Beta::ThreadCreateParams::Message::role

          attr_accessor attachments: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment]?

          attr_accessor metadata: OpenAI::Models::metadata?

          def initialize: (
            content: OpenAI::Models::Beta::ThreadCreateParams::Message::content,
            role: OpenAI::Models::Beta::ThreadCreateParams::Message::role,
            ?attachments: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment]?,
            ?metadata: OpenAI::Models::metadata?
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::message

          type content =
            String
            | ::Array[OpenAI::Models::Beta::Threads::message_content_part_param]

          module Content
            extend OpenAI::Internal::Type::Union

            def self?.variants: -> [String, ::Array[OpenAI::Models::Beta::Threads::message_content_part_param]]

            type message_content_part_param_array =
              ::Array[OpenAI::Models::Beta::Threads::message_content_part_param]

            MessageContentPartParamArray: message_content_part_param_array
          end

          type role = :user | :assistant

          module Role
            extend OpenAI::Internal::Type::Enum

            USER: :user
            ASSISTANT: :assistant

            def self?.values: -> ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::role]
          end

          type attachment =
            {
              file_id: String,
              tools: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::tool]
            }

          class Attachment < OpenAI::Internal::Type::BaseModel
            attr_reader file_id: String?

            def file_id=: (String) -> String

            attr_reader tools: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::tool]?

            def tools=: (
              ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::tool]
            ) -> ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::tool]

            def initialize: (
              ?file_id: String,
              ?tools: ::Array[OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::tool]
            ) -> void

            def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::Message::attachment

            type tool =
              OpenAI::Models::Beta::CodeInterpreterTool
              | OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::Tool::FileSearch

            module Tool
              extend OpenAI::Internal::Type::Union

              type file_search = { type: :file_search }

              class FileSearch < OpenAI::Internal::Type::BaseModel
                attr_accessor type: :file_search

                def initialize: (?type: :file_search) -> void

                def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::Tool::file_search
              end

              def self?.variants: -> [OpenAI::Models::Beta::CodeInterpreterTool, OpenAI::Models::Beta::ThreadCreateParams::Message::Attachment::Tool::FileSearch]
            end
          end
        end

        type tool_resources =
          {
            code_interpreter: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::CodeInterpreter,
            file_search: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch
          }

        class ToolResources < OpenAI::Internal::Type::BaseModel
          attr_reader code_interpreter: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::CodeInterpreter?

          def code_interpreter=: (
            OpenAI::Models::Beta::ThreadCreateParams::ToolResources::CodeInterpreter
          ) -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::CodeInterpreter

          attr_reader file_search: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch?

          def file_search=: (
            OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch
          ) -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch

          def initialize: (
            ?code_interpreter: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::CodeInterpreter,
            ?file_search: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::tool_resources

          type code_interpreter = { file_ids: ::Array[String] }

          class CodeInterpreter < OpenAI::Internal::Type::BaseModel
            attr_reader file_ids: ::Array[String]?

            def file_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?file_ids: ::Array[String]) -> void

            def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::code_interpreter
          end

          type file_search =
            {
              vector_store_ids: ::Array[String],
              vector_stores: ::Array[OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore]
            }

          class FileSearch < OpenAI::Internal::Type::BaseModel
            attr_reader vector_store_ids: ::Array[String]?

            def vector_store_ids=: (::Array[String]) -> ::Array[String]

            attr_reader vector_stores: ::Array[OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore]?

            def vector_stores=: (
              ::Array[OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore]
            ) -> ::Array[OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore]

            def initialize: (
              ?vector_store_ids: ::Array[String],
              ?vector_stores: ::Array[OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore]
            ) -> void

            def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::file_search

            type vector_store =
              {
                chunking_strategy: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::chunking_strategy,
                file_ids: ::Array[String],
                metadata: OpenAI::Models::metadata?
              }

            class VectorStore < OpenAI::Internal::Type::BaseModel
              attr_reader chunking_strategy: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::chunking_strategy?

              def chunking_strategy=: (
                OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::chunking_strategy
              ) -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::chunking_strategy

              attr_reader file_ids: ::Array[String]?

              def file_ids=: (::Array[String]) -> ::Array[String]

              attr_accessor metadata: OpenAI::Models::metadata?

              def initialize: (
                ?chunking_strategy: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::chunking_strategy,
                ?file_ids: ::Array[String],
                ?metadata: OpenAI::Models::metadata?
              ) -> void

              def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::vector_store

              type chunking_strategy =
                OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Auto
                | OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static

              module ChunkingStrategy
                extend OpenAI::Internal::Type::Union

                type auto = { type: :auto }

                class Auto < OpenAI::Internal::Type::BaseModel
                  attr_accessor type: :auto

                  def initialize: (?type: :auto) -> void

                  def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::auto
                end

                type static =
                  {
                    static: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::Static,
                    type: :static
                  }

                class Static < OpenAI::Internal::Type::BaseModel
                  attr_accessor static: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::Static

                  attr_accessor type: :static

                  def initialize: (
                    static: OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::Static,
                    ?type: :static
                  ) -> void

                  def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::static

                  type static =
                    {
                      chunk_overlap_tokens: Integer,
                      max_chunk_size_tokens: Integer
                    }

                  class Static < OpenAI::Internal::Type::BaseModel
                    attr_accessor chunk_overlap_tokens: Integer

                    attr_accessor max_chunk_size_tokens: Integer

                    def initialize: (
                      chunk_overlap_tokens: Integer,
                      max_chunk_size_tokens: Integer
                    ) -> void

                    def to_hash: -> OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static::static
                  end
                end

                def self?.variants: -> [OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Auto, OpenAI::Models::Beta::ThreadCreateParams::ToolResources::FileSearch::VectorStore::ChunkingStrategy::Static]
              end
            end
          end
        end
      end
    end
  end
end
