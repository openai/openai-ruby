module OpenAI
  module Models
    module Beta
      module Threads
        module Runs
          type file_search_tool_call =
            {
              id: String,
              file_search: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch,
              type: :file_search
            }

          class FileSearchToolCall < OpenAI::BaseModel
            attr_accessor id: String

            attr_accessor file_search: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch

            attr_accessor type: :file_search

            def initialize:
              (
                id: String,
                file_search: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch,
                type: :file_search
              ) -> void
              | (
                ?OpenAI::Models::Beta::Threads::Runs::file_search_tool_call
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Beta::Threads::Runs::file_search_tool_call

            type file_search =
              {
                ranking_options: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions,
                results: ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result]
              }

            class FileSearch < OpenAI::BaseModel
              attr_reader ranking_options: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions?

              def ranking_options=: (
                OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions
              ) -> OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions

              attr_reader results: ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result]?

              def results=: (
                ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result]
              ) -> ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result]

              def initialize:
                (
                  ranking_options: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions,
                  results: ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result]
                ) -> void
                | (
                  ?OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::file_search
                  | OpenAI::BaseModel data
                ) -> void

              def to_hash: -> OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::file_search

              type ranking_options =
                {
                  ranker: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions::ranker,
                  score_threshold: Float
                }

              class RankingOptions < OpenAI::BaseModel
                attr_accessor ranker: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions::ranker

                attr_accessor score_threshold: Float

                def initialize:
                  (
                    ranker: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions::ranker,
                    score_threshold: Float
                  ) -> void
                  | (
                    ?OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::ranking_options
                    | OpenAI::BaseModel data
                  ) -> void

                def to_hash: -> OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::ranking_options

                type ranker = :auto | :default_2024_08_21

                class Ranker < OpenAI::Enum
                  AUTO: :auto
                  DEFAULT_2024_08_21: :default_2024_08_21

                  def self.values: -> ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::RankingOptions::ranker]
                end
              end

              type result =
                {
                  file_id: String,
                  file_name: String,
                  score: Float,
                  content: ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content]
                }

              class Result < OpenAI::BaseModel
                attr_accessor file_id: String

                attr_accessor file_name: String

                attr_accessor score: Float

                attr_reader content: ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content]?

                def content=: (
                  ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content]
                ) -> ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content]

                def initialize:
                  (
                    file_id: String,
                    file_name: String,
                    score: Float,
                    content: ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content]
                  ) -> void
                  | (
                    ?OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::result
                    | OpenAI::BaseModel data
                  ) -> void

                def to_hash: -> OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::result

                type content =
                  {
                    text: String,
                    type: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content::type_
                  }

                class Content < OpenAI::BaseModel
                  attr_reader text: String?

                  def text=: (String) -> String

                  attr_reader type: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content::type_?

                  def type=: (
                    OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content::type_
                  ) -> OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content::type_

                  def initialize:
                    (
                      text: String,
                      type: OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content::type_
                    ) -> void
                    | (
                      ?OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::content
                      | OpenAI::BaseModel data
                    ) -> void

                  def to_hash: -> OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::content

                  type type_ = :text

                  class Type < OpenAI::Enum
                    TEXT: :text

                    def self.values: -> ::Array[OpenAI::Models::Beta::Threads::Runs::FileSearchToolCall::FileSearch::Result::Content::type_]
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
