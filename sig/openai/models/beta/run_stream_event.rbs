module OpenAI
  module Models
    module Beta
      type run_stream_event =
        OpenAI::Models::Beta::RunStreamEvent::ThreadRunCreated
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunQueued
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunInProgress
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunRequiresAction
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunCompleted
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunIncomplete
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunFailed
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunCancelling
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunCancelled
        | OpenAI::Models::Beta::RunStreamEvent::ThreadRunExpired

      class RunStreamEvent < OpenAI::Union
        type thread_run_created =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.created"
          }

        class ThreadRunCreated < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.created"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.created"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_created
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_created
        end

        type thread_run_queued =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.queued"
          }

        class ThreadRunQueued < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.queued"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.queued"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_queued
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_queued
        end

        type thread_run_in_progress =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.in_progress"
          }

        class ThreadRunInProgress < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.in_progress"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.in_progress"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_in_progress
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_in_progress
        end

        type thread_run_requires_action =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.requires_action"
          }

        class ThreadRunRequiresAction < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.requires_action"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.requires_action"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_requires_action
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_requires_action
        end

        type thread_run_completed =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.completed"
          }

        class ThreadRunCompleted < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.completed"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.completed"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_completed
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_completed
        end

        type thread_run_incomplete =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.incomplete"
          }

        class ThreadRunIncomplete < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.incomplete"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.incomplete"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_incomplete
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_incomplete
        end

        type thread_run_failed =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.failed"
          }

        class ThreadRunFailed < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.failed"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.failed"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_failed
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_failed
        end

        type thread_run_cancelling =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.cancelling"
          }

        class ThreadRunCancelling < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.cancelling"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.cancelling"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_cancelling
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_cancelling
        end

        type thread_run_cancelled =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.cancelled"
          }

        class ThreadRunCancelled < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.cancelled"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.cancelled"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_cancelled
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_cancelled
        end

        type thread_run_expired =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.expired"
          }

        class ThreadRunExpired < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.expired"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Run,
              event: :"thread.run.expired"
            ) -> void
            | (
              ?OpenAI::Models::Beta::RunStreamEvent::thread_run_expired
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::RunStreamEvent::thread_run_expired
        end

        def self.variants: -> [OpenAI::Models::Beta::RunStreamEvent::ThreadRunCreated, OpenAI::Models::Beta::RunStreamEvent::ThreadRunQueued, OpenAI::Models::Beta::RunStreamEvent::ThreadRunInProgress, OpenAI::Models::Beta::RunStreamEvent::ThreadRunRequiresAction, OpenAI::Models::Beta::RunStreamEvent::ThreadRunCompleted, OpenAI::Models::Beta::RunStreamEvent::ThreadRunIncomplete, OpenAI::Models::Beta::RunStreamEvent::ThreadRunFailed, OpenAI::Models::Beta::RunStreamEvent::ThreadRunCancelling, OpenAI::Models::Beta::RunStreamEvent::ThreadRunCancelled, OpenAI::Models::Beta::RunStreamEvent::ThreadRunExpired]
      end
    end
  end
end
