module OpenAI
  module Models
    module Beta
      
      class VectorStoreFile = VectorStores::VectorStoreFile

      module VectorStores
        type vector_store_file =
          {
            id: String,
            created_at: Integer,
            last_error: OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError?,
            object: :"vector_store.file",
            status: OpenAI::Models::Beta::VectorStores::VectorStoreFile::status,
            usage_bytes: Integer,
            vector_store_id: String,
            chunking_strategy: OpenAI::Models::Beta::file_chunking_strategy
          }

        class VectorStoreFile < OpenAI::BaseModel
          attr_accessor id: String

          attr_accessor created_at: Integer

          attr_accessor last_error: OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError?

          attr_accessor object: :"vector_store.file"

          attr_accessor status: OpenAI::Models::Beta::VectorStores::VectorStoreFile::status

          attr_accessor usage_bytes: Integer

          attr_accessor vector_store_id: String

          attr_reader chunking_strategy: OpenAI::Models::Beta::file_chunking_strategy?

          def chunking_strategy=: (
            OpenAI::Models::Beta::file_chunking_strategy
          ) -> OpenAI::Models::Beta::file_chunking_strategy

          def initialize:
            (
              id: String,
              created_at: Integer,
              last_error: OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError?,
              status: OpenAI::Models::Beta::VectorStores::VectorStoreFile::status,
              usage_bytes: Integer,
              vector_store_id: String,
              chunking_strategy: OpenAI::Models::Beta::file_chunking_strategy,
              object: :"vector_store.file"
            ) -> void
            | (
              ?OpenAI::Models::Beta::VectorStores::vector_store_file
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::VectorStores::vector_store_file

          type last_error =
            {
              code: OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError::code,
              message: String
            }

          class LastError < OpenAI::BaseModel
            attr_accessor code: OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError::code

            attr_accessor message: String

            def initialize:
              (
                code: OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError::code,
                message: String
              ) -> void
              | (
                ?OpenAI::Models::Beta::VectorStores::VectorStoreFile::last_error
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Beta::VectorStores::VectorStoreFile::last_error

            type code = :server_error | :unsupported_file | :invalid_file

            class Code < OpenAI::Enum
              SERVER_ERROR: :server_error
              UNSUPPORTED_FILE: :unsupported_file
              INVALID_FILE: :invalid_file

              def self.values: -> ::Array[OpenAI::Models::Beta::VectorStores::VectorStoreFile::LastError::code]
            end
          end

          type status = :in_progress | :completed | :cancelled | :failed

          class Status < OpenAI::Enum
            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            CANCELLED: :cancelled
            FAILED: :failed

            def self.values: -> ::Array[OpenAI::Models::Beta::VectorStores::VectorStoreFile::status]
          end
        end
      end
    end
  end
end
