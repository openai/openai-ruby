module OpenAI
  module Models
    module Beta
      type vector_store =
        {
          id: String,
          created_at: Integer,
          file_counts: OpenAI::Models::Beta::VectorStore::FileCounts,
          last_active_at: Integer?,
          metadata: OpenAI::Models::metadata?,
          name: String,
          object: :vector_store,
          status: OpenAI::Models::Beta::VectorStore::status,
          usage_bytes: Integer,
          expires_after: OpenAI::Models::Beta::VectorStore::ExpiresAfter,
          expires_at: Integer?
        }

      class VectorStore < OpenAI::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Integer

        attr_accessor file_counts: OpenAI::Models::Beta::VectorStore::FileCounts

        attr_accessor last_active_at: Integer?

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor name: String

        attr_accessor object: :vector_store

        attr_accessor status: OpenAI::Models::Beta::VectorStore::status

        attr_accessor usage_bytes: Integer

        attr_reader expires_after: OpenAI::Models::Beta::VectorStore::ExpiresAfter?

        def expires_after=: (
          OpenAI::Models::Beta::VectorStore::ExpiresAfter
        ) -> OpenAI::Models::Beta::VectorStore::ExpiresAfter

        attr_accessor expires_at: Integer?

        def initialize:
          (
            id: String,
            created_at: Integer,
            file_counts: OpenAI::Models::Beta::VectorStore::FileCounts,
            last_active_at: Integer?,
            metadata: OpenAI::Models::metadata?,
            name: String,
            status: OpenAI::Models::Beta::VectorStore::status,
            usage_bytes: Integer,
            expires_after: OpenAI::Models::Beta::VectorStore::ExpiresAfter,
            expires_at: Integer?,
            object: :vector_store
          ) -> void
          | (
            ?OpenAI::Models::Beta::vector_store | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::Beta::vector_store

        type file_counts =
          {
            cancelled: Integer,
            completed: Integer,
            failed: Integer,
            in_progress: Integer,
            total: Integer
          }

        class FileCounts < OpenAI::BaseModel
          attr_accessor cancelled: Integer

          attr_accessor completed: Integer

          attr_accessor failed: Integer

          attr_accessor in_progress: Integer

          attr_accessor total: Integer

          def initialize:
            (
              cancelled: Integer,
              completed: Integer,
              failed: Integer,
              in_progress: Integer,
              total: Integer
            ) -> void
            | (
              ?OpenAI::Models::Beta::VectorStore::file_counts
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::VectorStore::file_counts
        end

        type status = :expired | :in_progress | :completed

        class Status < OpenAI::Enum
          EXPIRED: :expired
          IN_PROGRESS: :in_progress
          COMPLETED: :completed

          def self.values: -> ::Array[OpenAI::Models::Beta::VectorStore::status]
        end

        type expires_after = { anchor: :last_active_at, days: Integer }

        class ExpiresAfter < OpenAI::BaseModel
          attr_accessor anchor: :last_active_at

          attr_accessor days: Integer

          def initialize:
            (days: Integer, anchor: :last_active_at) -> void
            | (
              ?OpenAI::Models::Beta::VectorStore::expires_after
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::VectorStore::expires_after
        end
      end
    end
  end
end
