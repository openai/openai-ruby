module OpenAI
  module Models
    module Beta
      type file_search_tool =
        {
          type: :file_search,
          file_search: OpenAI::Models::Beta::FileSearchTool::FileSearch
        }

      class FileSearchTool < OpenAI::BaseModel
        attr_accessor type: :file_search

        attr_reader file_search: OpenAI::Models::Beta::FileSearchTool::FileSearch?

        def file_search=: (
          OpenAI::Models::Beta::FileSearchTool::FileSearch
        ) -> OpenAI::Models::Beta::FileSearchTool::FileSearch

        def initialize:
          (
            ?file_search: OpenAI::Models::Beta::FileSearchTool::FileSearch,
            ?type: :file_search
          ) -> void
          | (
            ?OpenAI::Models::Beta::file_search_tool | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::Beta::file_search_tool

        type file_search =
          {
            max_num_results: Integer,
            ranking_options: OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions
          }

        class FileSearch < OpenAI::BaseModel
          attr_reader max_num_results: Integer?

          def max_num_results=: (Integer) -> Integer

          attr_reader ranking_options: OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions?

          def ranking_options=: (
            OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions
          ) -> OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions

          def initialize:
            (
              ?max_num_results: Integer,
              ?ranking_options: OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions
            ) -> void
            | (
              ?OpenAI::Models::Beta::FileSearchTool::file_search
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::FileSearchTool::file_search

          type ranking_options =
            {
              score_threshold: Float,
              ranker: OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions::ranker
            }

          class RankingOptions < OpenAI::BaseModel
            attr_accessor score_threshold: Float

            attr_reader ranker: OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions::ranker?

            def ranker=: (
              OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions::ranker
            ) -> OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions::ranker

            def initialize:
              (
                score_threshold: Float,
                ?ranker: OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions::ranker
              ) -> void
              | (
                ?OpenAI::Models::Beta::FileSearchTool::FileSearch::ranking_options
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Beta::FileSearchTool::FileSearch::ranking_options

            type ranker = :auto | :default_2024_08_21

            class Ranker < OpenAI::Enum
              AUTO: :auto
              DEFAULT_2024_08_21: :default_2024_08_21

              def self.values: -> ::Array[OpenAI::Models::Beta::FileSearchTool::FileSearch::RankingOptions::ranker]
            end
          end
        end
      end
    end
  end
end
