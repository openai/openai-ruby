module OpenAI
  module Models
    module Beta
      type assistant_stream_event =
        OpenAI::Models::Beta::AssistantStreamEvent::ThreadCreated
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCreated
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunQueued
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunInProgress
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunRequiresAction
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCompleted
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunIncomplete
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunFailed
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCancelling
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCancelled
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunExpired
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepCreated
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepInProgress
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepDelta
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepCompleted
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepFailed
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepCancelled
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepExpired
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageCreated
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageInProgress
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageDelta
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageCompleted
        | OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageIncomplete
        | OpenAI::Models::Beta::AssistantStreamEvent::ErrorEvent

      module AssistantStreamEvent
        extend OpenAI::Union

        type thread_created =
          {
            data: OpenAI::Models::Beta::Thread,
            event: :"thread.created",
            enabled: bool
          }

        class ThreadCreated < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Thread

          attr_accessor event: :"thread.created"

          attr_reader enabled: bool?

          def enabled=: (bool) -> bool

          def initialize: (
            data: OpenAI::Models::Beta::Thread,
            ?enabled: bool,
            ?event: :"thread.created"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_created
        end

        type thread_run_created =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.created"
          }

        class ThreadRunCreated < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.created"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.created"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_created
        end

        type thread_run_queued =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.queued"
          }

        class ThreadRunQueued < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.queued"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.queued"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_queued
        end

        type thread_run_in_progress =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.in_progress"
          }

        class ThreadRunInProgress < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.in_progress"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.in_progress"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_in_progress
        end

        type thread_run_requires_action =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.requires_action"
          }

        class ThreadRunRequiresAction < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.requires_action"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.requires_action"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_requires_action
        end

        type thread_run_completed =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.completed"
          }

        class ThreadRunCompleted < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.completed"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.completed"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_completed
        end

        type thread_run_incomplete =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.incomplete"
          }

        class ThreadRunIncomplete < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.incomplete"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.incomplete"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_incomplete
        end

        type thread_run_failed =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.failed"
          }

        class ThreadRunFailed < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.failed"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.failed"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_failed
        end

        type thread_run_cancelling =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.cancelling"
          }

        class ThreadRunCancelling < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.cancelling"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.cancelling"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_cancelling
        end

        type thread_run_cancelled =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.cancelled"
          }

        class ThreadRunCancelled < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.cancelled"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.cancelled"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_cancelled
        end

        type thread_run_expired =
          {
            data: OpenAI::Models::Beta::Threads::Run,
            event: :"thread.run.expired"
          }

        class ThreadRunExpired < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Run

          attr_accessor event: :"thread.run.expired"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Run,
            ?event: :"thread.run.expired"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_expired
        end

        type thread_run_step_created =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            event: :"thread.run.step.created"
          }

        class ThreadRunStepCreated < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStep

          attr_accessor event: :"thread.run.step.created"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            ?event: :"thread.run.step.created"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_created
        end

        type thread_run_step_in_progress =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            event: :"thread.run.step.in_progress"
          }

        class ThreadRunStepInProgress < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStep

          attr_accessor event: :"thread.run.step.in_progress"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            ?event: :"thread.run.step.in_progress"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_in_progress
        end

        type thread_run_step_delta =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStepDeltaEvent,
            event: :"thread.run.step.delta"
          }

        class ThreadRunStepDelta < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStepDeltaEvent

          attr_accessor event: :"thread.run.step.delta"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStepDeltaEvent,
            ?event: :"thread.run.step.delta"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_delta
        end

        type thread_run_step_completed =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            event: :"thread.run.step.completed"
          }

        class ThreadRunStepCompleted < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStep

          attr_accessor event: :"thread.run.step.completed"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            ?event: :"thread.run.step.completed"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_completed
        end

        type thread_run_step_failed =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            event: :"thread.run.step.failed"
          }

        class ThreadRunStepFailed < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStep

          attr_accessor event: :"thread.run.step.failed"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            ?event: :"thread.run.step.failed"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_failed
        end

        type thread_run_step_cancelled =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            event: :"thread.run.step.cancelled"
          }

        class ThreadRunStepCancelled < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStep

          attr_accessor event: :"thread.run.step.cancelled"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            ?event: :"thread.run.step.cancelled"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_cancelled
        end

        type thread_run_step_expired =
          {
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            event: :"thread.run.step.expired"
          }

        class ThreadRunStepExpired < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Runs::RunStep

          attr_accessor event: :"thread.run.step.expired"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Runs::RunStep,
            ?event: :"thread.run.step.expired"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_run_step_expired
        end

        type thread_message_created =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.created"
          }

        class ThreadMessageCreated < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.created"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Message,
            ?event: :"thread.message.created"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_message_created
        end

        type thread_message_in_progress =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.in_progress"
          }

        class ThreadMessageInProgress < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.in_progress"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Message,
            ?event: :"thread.message.in_progress"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_message_in_progress
        end

        type thread_message_delta =
          {
            data: OpenAI::Models::Beta::Threads::MessageDeltaEvent,
            event: :"thread.message.delta"
          }

        class ThreadMessageDelta < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::MessageDeltaEvent

          attr_accessor event: :"thread.message.delta"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::MessageDeltaEvent,
            ?event: :"thread.message.delta"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_message_delta
        end

        type thread_message_completed =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.completed"
          }

        class ThreadMessageCompleted < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.completed"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Message,
            ?event: :"thread.message.completed"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_message_completed
        end

        type thread_message_incomplete =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.incomplete"
          }

        class ThreadMessageIncomplete < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.incomplete"

          def initialize: (
            data: OpenAI::Models::Beta::Threads::Message,
            ?event: :"thread.message.incomplete"
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::thread_message_incomplete
        end

        type error_event = { data: OpenAI::Models::ErrorObject, event: :error }

        class ErrorEvent < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::ErrorObject

          attr_accessor event: :error

          def initialize: (
            data: OpenAI::Models::ErrorObject,
            ?event: :error
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::AssistantStreamEvent::error_event
        end

        def self?.variants: -> [OpenAI::Models::Beta::AssistantStreamEvent::ThreadCreated, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCreated, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunQueued, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunInProgress, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunRequiresAction, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCompleted, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunIncomplete, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunFailed, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCancelling, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunCancelled, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunExpired, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepCreated, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepInProgress, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepDelta, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepCompleted, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepFailed, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepCancelled, OpenAI::Models::Beta::AssistantStreamEvent::ThreadRunStepExpired, OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageCreated, OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageInProgress, OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageDelta, OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageCompleted, OpenAI::Models::Beta::AssistantStreamEvent::ThreadMessageIncomplete, OpenAI::Models::Beta::AssistantStreamEvent::ErrorEvent]
      end
    end
  end
end
