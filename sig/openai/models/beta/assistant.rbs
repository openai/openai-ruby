module OpenAI
  module Models
    module Beta
      type assistant =
        {
          id: String,
          created_at: Integer,
          description: String?,
          instructions: String?,
          metadata: OpenAI::Models::metadata?,
          model: String,
          name: String?,
          object: :assistant,
          tools: ::Array[OpenAI::Models::Beta::assistant_tool],
          response_format: OpenAI::Models::Beta::assistant_response_format_option?,
          temperature: Float?,
          tool_resources: OpenAI::Models::Beta::Assistant::ToolResources?,
          top_p: Float?
        }

      class Assistant < OpenAI::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Integer

        attr_accessor description: String?

        attr_accessor instructions: String?

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor model: String

        attr_accessor name: String?

        attr_accessor object: :assistant

        attr_accessor tools: ::Array[OpenAI::Models::Beta::assistant_tool]

        attr_accessor response_format: OpenAI::Models::Beta::assistant_response_format_option?

        attr_accessor temperature: Float?

        attr_accessor tool_resources: OpenAI::Models::Beta::Assistant::ToolResources?

        attr_accessor top_p: Float?

        def initialize: (
          id: String,
          created_at: Integer,
          description: String?,
          instructions: String?,
          metadata: OpenAI::Models::metadata?,
          model: String,
          name: String?,
          tools: ::Array[OpenAI::Models::Beta::assistant_tool],
          ?response_format: OpenAI::Models::Beta::assistant_response_format_option?,
          ?temperature: Float?,
          ?tool_resources: OpenAI::Models::Beta::Assistant::ToolResources?,
          ?top_p: Float?,
          ?object: :assistant
        ) -> void

        def to_hash: -> OpenAI::Models::Beta::assistant

        type tool_resources =
          {
            code_interpreter: OpenAI::Models::Beta::Assistant::ToolResources::CodeInterpreter,
            file_search: OpenAI::Models::Beta::Assistant::ToolResources::FileSearch
          }

        class ToolResources < OpenAI::BaseModel
          attr_reader code_interpreter: OpenAI::Models::Beta::Assistant::ToolResources::CodeInterpreter?

          def code_interpreter=: (
            OpenAI::Models::Beta::Assistant::ToolResources::CodeInterpreter
          ) -> OpenAI::Models::Beta::Assistant::ToolResources::CodeInterpreter

          attr_reader file_search: OpenAI::Models::Beta::Assistant::ToolResources::FileSearch?

          def file_search=: (
            OpenAI::Models::Beta::Assistant::ToolResources::FileSearch
          ) -> OpenAI::Models::Beta::Assistant::ToolResources::FileSearch

          def initialize: (
            ?code_interpreter: OpenAI::Models::Beta::Assistant::ToolResources::CodeInterpreter,
            ?file_search: OpenAI::Models::Beta::Assistant::ToolResources::FileSearch
          ) -> void

          def to_hash: -> OpenAI::Models::Beta::Assistant::tool_resources

          type code_interpreter = { file_ids: ::Array[String] }

          class CodeInterpreter < OpenAI::BaseModel
            attr_reader file_ids: ::Array[String]?

            def file_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?file_ids: ::Array[String]) -> void

            def to_hash: -> OpenAI::Models::Beta::Assistant::ToolResources::code_interpreter
          end

          type file_search = { vector_store_ids: ::Array[String] }

          class FileSearch < OpenAI::BaseModel
            attr_reader vector_store_ids: ::Array[String]?

            def vector_store_ids=: (::Array[String]) -> ::Array[String]

            def initialize: (?vector_store_ids: ::Array[String]) -> void

            def to_hash: -> OpenAI::Models::Beta::Assistant::ToolResources::file_search
          end
        end
      end
    end
  end
end
