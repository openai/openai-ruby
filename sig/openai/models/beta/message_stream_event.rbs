module OpenAI
  module Models
    module Beta
      type message_stream_event =
        OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageCreated
        | OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageInProgress
        | OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageDelta
        | OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageCompleted
        | OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageIncomplete

      class MessageStreamEvent < OpenAI::Union
        type thread_message_created =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.created"
          }

        class ThreadMessageCreated < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.created"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Message,
              ?event: :"thread.message.created"
            ) -> void
            | (
              ?OpenAI::Models::Beta::MessageStreamEvent::thread_message_created
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::MessageStreamEvent::thread_message_created
        end

        type thread_message_in_progress =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.in_progress"
          }

        class ThreadMessageInProgress < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.in_progress"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Message,
              ?event: :"thread.message.in_progress"
            ) -> void
            | (
              ?OpenAI::Models::Beta::MessageStreamEvent::thread_message_in_progress
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::MessageStreamEvent::thread_message_in_progress
        end

        type thread_message_delta =
          {
            data: OpenAI::Models::Beta::Threads::MessageDeltaEvent,
            event: :"thread.message.delta"
          }

        class ThreadMessageDelta < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::MessageDeltaEvent

          attr_accessor event: :"thread.message.delta"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::MessageDeltaEvent,
              ?event: :"thread.message.delta"
            ) -> void
            | (
              ?OpenAI::Models::Beta::MessageStreamEvent::thread_message_delta
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::MessageStreamEvent::thread_message_delta
        end

        type thread_message_completed =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.completed"
          }

        class ThreadMessageCompleted < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.completed"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Message,
              ?event: :"thread.message.completed"
            ) -> void
            | (
              ?OpenAI::Models::Beta::MessageStreamEvent::thread_message_completed
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::MessageStreamEvent::thread_message_completed
        end

        type thread_message_incomplete =
          {
            data: OpenAI::Models::Beta::Threads::Message,
            event: :"thread.message.incomplete"
          }

        class ThreadMessageIncomplete < OpenAI::BaseModel
          attr_accessor data: OpenAI::Models::Beta::Threads::Message

          attr_accessor event: :"thread.message.incomplete"

          def initialize:
            (
              data: OpenAI::Models::Beta::Threads::Message,
              ?event: :"thread.message.incomplete"
            ) -> void
            | (
              ?OpenAI::Models::Beta::MessageStreamEvent::thread_message_incomplete
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Beta::MessageStreamEvent::thread_message_incomplete
        end

        def self.variants: -> [OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageCreated, OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageInProgress, OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageDelta, OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageCompleted, OpenAI::Models::Beta::MessageStreamEvent::ThreadMessageIncomplete]
      end
    end
  end
end
