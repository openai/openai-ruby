module OpenAI
  module Models
    type batch =
      {
        id: String,
        completion_window: String,
        created_at: Integer,
        endpoint: String,
        input_file_id: String,
        object: :batch,
        status: OpenAI::Models::Batch::status,
        cancelled_at: Integer,
        cancelling_at: Integer,
        completed_at: Integer,
        error_file_id: String,
        errors: OpenAI::Batch::Errors,
        expired_at: Integer,
        expires_at: Integer,
        failed_at: Integer,
        finalizing_at: Integer,
        in_progress_at: Integer,
        metadata: OpenAI::Models::metadata?,
        model: String,
        output_file_id: String,
        request_counts: OpenAI::BatchRequestCounts,
        usage: OpenAI::BatchUsage
      }

    class Batch < OpenAI::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor completion_window: String

      attr_accessor created_at: Integer

      attr_accessor endpoint: String

      attr_accessor input_file_id: String

      attr_accessor object: :batch

      attr_accessor status: OpenAI::Models::Batch::status

      attr_reader cancelled_at: Integer?

      def cancelled_at=: (Integer) -> Integer

      attr_reader cancelling_at: Integer?

      def cancelling_at=: (Integer) -> Integer

      attr_reader completed_at: Integer?

      def completed_at=: (Integer) -> Integer

      attr_reader error_file_id: String?

      def error_file_id=: (String) -> String

      attr_reader errors: OpenAI::Batch::Errors?

      def errors=: (OpenAI::Batch::Errors) -> OpenAI::Batch::Errors

      attr_reader expired_at: Integer?

      def expired_at=: (Integer) -> Integer

      attr_reader expires_at: Integer?

      def expires_at=: (Integer) -> Integer

      attr_reader failed_at: Integer?

      def failed_at=: (Integer) -> Integer

      attr_reader finalizing_at: Integer?

      def finalizing_at=: (Integer) -> Integer

      attr_reader in_progress_at: Integer?

      def in_progress_at=: (Integer) -> Integer

      attr_accessor metadata: OpenAI::Models::metadata?

      attr_reader model: String?

      def model=: (String) -> String

      attr_reader output_file_id: String?

      def output_file_id=: (String) -> String

      attr_reader request_counts: OpenAI::BatchRequestCounts?

      def request_counts=: (
        OpenAI::BatchRequestCounts
      ) -> OpenAI::BatchRequestCounts

      attr_reader usage: OpenAI::BatchUsage?

      def usage=: (OpenAI::BatchUsage) -> OpenAI::BatchUsage

      def initialize: (
        id: String,
        completion_window: String,
        created_at: Integer,
        endpoint: String,
        input_file_id: String,
        status: OpenAI::Models::Batch::status,
        ?cancelled_at: Integer,
        ?cancelling_at: Integer,
        ?completed_at: Integer,
        ?error_file_id: String,
        ?errors: OpenAI::Batch::Errors,
        ?expired_at: Integer,
        ?expires_at: Integer,
        ?failed_at: Integer,
        ?finalizing_at: Integer,
        ?in_progress_at: Integer,
        ?metadata: OpenAI::Models::metadata?,
        ?model: String,
        ?output_file_id: String,
        ?request_counts: OpenAI::BatchRequestCounts,
        ?usage: OpenAI::BatchUsage,
        ?object: :batch
      ) -> void

      def to_hash: -> {
        id: String,
        completion_window: String,
        created_at: Integer,
        endpoint: String,
        input_file_id: String,
        object: :batch,
        status: OpenAI::Models::Batch::status,
        cancelled_at: Integer,
        cancelling_at: Integer,
        completed_at: Integer,
        error_file_id: String,
        errors: OpenAI::Batch::Errors,
        expired_at: Integer,
        expires_at: Integer,
        failed_at: Integer,
        finalizing_at: Integer,
        in_progress_at: Integer,
        metadata: OpenAI::Models::metadata?,
        model: String,
        output_file_id: String,
        request_counts: OpenAI::BatchRequestCounts,
        usage: OpenAI::BatchUsage
      }

      type status =
        :validating
        | :failed
        | :in_progress
        | :finalizing
        | :completed
        | :expired
        | :cancelling
        | :cancelled

      module Status
        extend OpenAI::Internal::Type::Enum

        VALIDATING: :validating
        FAILED: :failed
        IN_PROGRESS: :in_progress
        FINALIZING: :finalizing
        COMPLETED: :completed
        EXPIRED: :expired
        CANCELLING: :cancelling
        CANCELLED: :cancelled

        def self?.values: -> ::Array[OpenAI::Models::Batch::status]
      end

      type errors = { data: ::Array[OpenAI::BatchError], object: String }

      class Errors < OpenAI::Internal::Type::BaseModel
        attr_reader data: ::Array[OpenAI::BatchError]?

        def data=: (::Array[OpenAI::BatchError]) -> ::Array[OpenAI::BatchError]

        attr_reader object: String?

        def object=: (String) -> String

        def initialize: (
          ?data: ::Array[OpenAI::BatchError],
          ?object: String
        ) -> void

        def to_hash: -> { data: ::Array[OpenAI::BatchError], object: String }
      end
    end
  end
end
