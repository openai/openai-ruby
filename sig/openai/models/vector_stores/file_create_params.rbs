module OpenAI
  module Models
    module VectorStores
      type file_create_params =
        {
          file_id: String,
          attributes: ::Hash[Symbol, OpenAI::Models::VectorStores::FileCreateParams::attribute]?,
          chunking_strategy: OpenAI::Models::file_chunking_strategy_param
        }
        & OpenAI::request_parameters

      class FileCreateParams < OpenAI::BaseModel
        extend OpenAI::RequestParameters::Converter
        include OpenAI::RequestParameters

        attr_accessor file_id: String

        attr_accessor attributes: ::Hash[Symbol, OpenAI::Models::VectorStores::FileCreateParams::attribute]?

        attr_reader chunking_strategy: OpenAI::Models::file_chunking_strategy_param?

        def chunking_strategy=: (
          OpenAI::Models::file_chunking_strategy_param
        ) -> OpenAI::Models::file_chunking_strategy_param

        def initialize:
          (
            file_id: String,
            attributes: ::Hash[Symbol, OpenAI::Models::VectorStores::FileCreateParams::attribute]?,
            chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
            request_options: OpenAI::request_opts
          ) -> void
          | (
            ?OpenAI::Models::VectorStores::file_create_params
            | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::VectorStores::file_create_params

        type attribute = String | Float | bool

        class Attribute < OpenAI::Union
          def self.variants: -> [String, Float, bool]
        end
      end
    end
  end
end
