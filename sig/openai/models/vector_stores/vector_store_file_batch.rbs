module OpenAI
  module Models
    
    class VectorStoreFileBatch = VectorStores::VectorStoreFileBatch

    module VectorStores
      type vector_store_file_batch =
        {
          id: String,
          created_at: Integer,
          file_counts: OpenAI::Models::VectorStores::VectorStoreFileBatch::FileCounts,
          object: :"vector_store.files_batch",
          status: OpenAI::Models::VectorStores::VectorStoreFileBatch::status,
          vector_store_id: String
        }

      class VectorStoreFileBatch < OpenAI::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Integer

        attr_accessor file_counts: OpenAI::Models::VectorStores::VectorStoreFileBatch::FileCounts

        attr_accessor object: :"vector_store.files_batch"

        attr_accessor status: OpenAI::Models::VectorStores::VectorStoreFileBatch::status

        attr_accessor vector_store_id: String

        def initialize:
          (
            id: String,
            created_at: Integer,
            file_counts: OpenAI::Models::VectorStores::VectorStoreFileBatch::FileCounts,
            status: OpenAI::Models::VectorStores::VectorStoreFileBatch::status,
            vector_store_id: String,
            ?object: :"vector_store.files_batch"
          ) -> void
          | (
            ?OpenAI::Models::VectorStores::vector_store_file_batch
            | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::VectorStores::vector_store_file_batch

        type file_counts =
          {
            cancelled: Integer,
            completed: Integer,
            failed: Integer,
            in_progress: Integer,
            total: Integer
          }

        class FileCounts < OpenAI::BaseModel
          attr_accessor cancelled: Integer

          attr_accessor completed: Integer

          attr_accessor failed: Integer

          attr_accessor in_progress: Integer

          attr_accessor total: Integer

          def initialize:
            (
              cancelled: Integer,
              completed: Integer,
              failed: Integer,
              in_progress: Integer,
              total: Integer
            ) -> void
            | (
              ?OpenAI::Models::VectorStores::VectorStoreFileBatch::file_counts
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::VectorStores::VectorStoreFileBatch::file_counts
        end

        type status = :in_progress | :completed | :cancelled | :failed

        class Status < OpenAI::Enum
          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          CANCELLED: :cancelled
          FAILED: :failed

          def self.values: -> ::Array[OpenAI::Models::VectorStores::VectorStoreFileBatch::status]
        end
      end
    end
  end
end
