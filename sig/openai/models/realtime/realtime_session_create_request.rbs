module OpenAI
  module Models
    module Realtime
      type realtime_session_create_request =
        {
          model: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::model,
          type: :realtime,
          audio: OpenAI::Realtime::RealtimeAudioConfig,
          client_secret: OpenAI::Realtime::RealtimeClientSecretConfig,
          include: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_],
          instructions: String,
          max_output_tokens: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens,
          output_modalities: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality],
          prompt: OpenAI::Responses::ResponsePrompt?,
          temperature: Float,
          tool_choice: OpenAI::Models::Realtime::realtime_tool_choice_config,
          tools: OpenAI::Models::Realtime::realtime_tools_config,
          tracing: OpenAI::Models::Realtime::realtime_tracing_config?,
          truncation: OpenAI::Models::Realtime::realtime_truncation
        }

      class RealtimeSessionCreateRequest < OpenAI::Internal::Type::BaseModel
        attr_accessor model: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::model

        attr_accessor type: :realtime

        attr_reader audio: OpenAI::Realtime::RealtimeAudioConfig?

        def audio=: (
          OpenAI::Realtime::RealtimeAudioConfig
        ) -> OpenAI::Realtime::RealtimeAudioConfig

        attr_reader client_secret: OpenAI::Realtime::RealtimeClientSecretConfig?

        def client_secret=: (
          OpenAI::Realtime::RealtimeClientSecretConfig
        ) -> OpenAI::Realtime::RealtimeClientSecretConfig

        attr_reader include: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_]?

        def include=: (
          ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_]
        ) -> ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_]

        attr_reader instructions: String?

        def instructions=: (String) -> String

        attr_reader max_output_tokens: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens?

        def max_output_tokens=: (
          OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens
        ) -> OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens

        attr_reader output_modalities: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality]?

        def output_modalities=: (
          ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality]
        ) -> ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality]

        attr_accessor prompt: OpenAI::Responses::ResponsePrompt?

        attr_reader temperature: Float?

        def temperature=: (Float) -> Float

        attr_reader tool_choice: OpenAI::Models::Realtime::realtime_tool_choice_config?

        def tool_choice=: (
          OpenAI::Models::Realtime::realtime_tool_choice_config
        ) -> OpenAI::Models::Realtime::realtime_tool_choice_config

        attr_reader tools: OpenAI::Models::Realtime::realtime_tools_config?

        def tools=: (
          OpenAI::Models::Realtime::realtime_tools_config
        ) -> OpenAI::Models::Realtime::realtime_tools_config

        attr_accessor tracing: OpenAI::Models::Realtime::realtime_tracing_config?

        attr_reader truncation: OpenAI::Models::Realtime::realtime_truncation?

        def truncation=: (
          OpenAI::Models::Realtime::realtime_truncation
        ) -> OpenAI::Models::Realtime::realtime_truncation

        def initialize: (
          model: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::model,
          ?audio: OpenAI::Realtime::RealtimeAudioConfig,
          ?client_secret: OpenAI::Realtime::RealtimeClientSecretConfig,
          ?include: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_],
          ?instructions: String,
          ?max_output_tokens: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens,
          ?output_modalities: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality],
          ?prompt: OpenAI::Responses::ResponsePrompt?,
          ?temperature: Float,
          ?tool_choice: OpenAI::Models::Realtime::realtime_tool_choice_config,
          ?tools: OpenAI::Models::Realtime::realtime_tools_config,
          ?tracing: OpenAI::Models::Realtime::realtime_tracing_config?,
          ?truncation: OpenAI::Models::Realtime::realtime_truncation,
          ?type: :realtime
        ) -> void

        def to_hash: -> {
          model: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::model,
          type: :realtime,
          audio: OpenAI::Realtime::RealtimeAudioConfig,
          client_secret: OpenAI::Realtime::RealtimeClientSecretConfig,
          include: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_],
          instructions: String,
          max_output_tokens: OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens,
          output_modalities: ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality],
          prompt: OpenAI::Responses::ResponsePrompt?,
          temperature: Float,
          tool_choice: OpenAI::Models::Realtime::realtime_tool_choice_config,
          tools: OpenAI::Models::Realtime::realtime_tools_config,
          tracing: OpenAI::Models::Realtime::realtime_tracing_config?,
          truncation: OpenAI::Models::Realtime::realtime_truncation
        }

        type model =
          String
          | :"gpt-4o-realtime"
          | :"gpt-4o-mini-realtime"
          | :"gpt-4o-realtime-preview"
          | :"gpt-4o-realtime-preview-2024-10-01"
          | :"gpt-4o-realtime-preview-2024-12-17"
          | :"gpt-4o-realtime-preview-2025-06-03"
          | :"gpt-4o-mini-realtime-preview"
          | :"gpt-4o-mini-realtime-preview-2024-12-17"

        module Model
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::model]

          GPT_4O_REALTIME: :"gpt-4o-realtime"
          GPT_4O_MINI_REALTIME: :"gpt-4o-mini-realtime"
          GPT_4O_REALTIME_PREVIEW: :"gpt-4o-realtime-preview"
          GPT_4O_REALTIME_PREVIEW_2024_10_01: :"gpt-4o-realtime-preview-2024-10-01"
          GPT_4O_REALTIME_PREVIEW_2024_12_17: :"gpt-4o-realtime-preview-2024-12-17"
          GPT_4O_REALTIME_PREVIEW_2025_06_03: :"gpt-4o-realtime-preview-2025-06-03"
          GPT_4O_MINI_REALTIME_PREVIEW: :"gpt-4o-mini-realtime-preview"
          GPT_4O_MINI_REALTIME_PREVIEW_2024_12_17: :"gpt-4o-mini-realtime-preview-2024-12-17"
        end

        type include_ = :"item.input_audio_transcription.logprobs"

        module Include
          extend OpenAI::Internal::Type::Enum

          ITEM_INPUT_AUDIO_TRANSCRIPTION_LOGPROBS: :"item.input_audio_transcription.logprobs"

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::include_]
        end

        type max_output_tokens = Integer | :inf

        module MaxOutputTokens
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::max_output_tokens]
        end

        type output_modality = :text | :audio

        module OutputModality
          extend OpenAI::Internal::Type::Enum

          TEXT: :text
          AUDIO: :audio

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeSessionCreateRequest::output_modality]
        end
      end
    end
  end
end
