module OpenAI
  module Models
    module Realtime
      type realtime_conversation_item_assistant_message =
        {
          content: ::Array[OpenAI::Realtime::RealtimeConversationItemAssistantMessage::Content],
          role: :assistant,
          type: :message,
          id: String,
          object: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object,
          status: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status
        }

      class RealtimeConversationItemAssistantMessage < OpenAI::Internal::Type::BaseModel
        attr_accessor content: ::Array[OpenAI::Realtime::RealtimeConversationItemAssistantMessage::Content]

        attr_accessor role: :assistant

        attr_accessor type: :message

        attr_reader id: String?

        def id=: (String) -> String

        attr_reader object: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object?

        def object=: (
          OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object
        ) -> OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object

        attr_reader status: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status?

        def status=: (
          OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status
        ) -> OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status

        def initialize: (
          content: ::Array[OpenAI::Realtime::RealtimeConversationItemAssistantMessage::Content],
          ?id: String,
          ?object: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object,
          ?status: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status,
          ?role: :assistant,
          ?type: :message
        ) -> void

        def to_hash: -> {
          content: ::Array[OpenAI::Realtime::RealtimeConversationItemAssistantMessage::Content],
          role: :assistant,
          type: :message,
          id: String,
          object: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object,
          status: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status
        }

        type content =
          {
            audio: String,
            text: String,
            transcript: String,
            type: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_
          }

        class Content < OpenAI::Internal::Type::BaseModel
          attr_reader audio: String?

          def audio=: (String) -> String

          attr_reader text: String?

          def text=: (String) -> String

          attr_reader transcript: String?

          def transcript=: (String) -> String

          attr_reader type: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_?

          def type=: (
            OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_
          ) -> OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_

          def initialize: (
            ?audio: String,
            ?text: String,
            ?transcript: String,
            ?type: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_
          ) -> void

          def to_hash: -> {
            audio: String,
            text: String,
            transcript: String,
            type: OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_
          }

          type type_ = :output_text | :output_audio

          module Type
            extend OpenAI::Internal::Type::Enum

            OUTPUT_TEXT: :output_text
            OUTPUT_AUDIO: :output_audio

            def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::Content::type_]
          end
        end

        type object = :"realtime.item"

        module Object
          extend OpenAI::Internal::Type::Enum

          REALTIME_ITEM: :"realtime.item"

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::object]
        end

        type status = :completed | :incomplete | :in_progress

        module Status
          extend OpenAI::Internal::Type::Enum

          COMPLETED: :completed
          INCOMPLETE: :incomplete
          IN_PROGRESS: :in_progress

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeConversationItemAssistantMessage::status]
        end
      end
    end
  end
end
