module OpenAI
  module Models
    module Realtime
      type session_created_event =
        {
          event_id: String,
          session: OpenAI::Models::Realtime::SessionCreatedEvent::session,
          type: :"session.created"
        }

      class SessionCreatedEvent < OpenAI::Internal::Type::BaseModel
        attr_accessor event_id: String

        attr_accessor session: OpenAI::Models::Realtime::SessionCreatedEvent::session

        attr_accessor type: :"session.created"

        def initialize: (
          event_id: String,
          session: OpenAI::Models::Realtime::SessionCreatedEvent::session,
          ?type: :"session.created"
        ) -> void

        def to_hash: -> {
          event_id: String,
          session: OpenAI::Models::Realtime::SessionCreatedEvent::session,
          type: :"session.created"
        }

        type session =
          OpenAI::Realtime::RealtimeSessionCreateRequest
          | OpenAI::Realtime::RealtimeTranscriptionSessionCreateRequest

        module Session
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::SessionCreatedEvent::session]
        end
      end
    end
  end
end
