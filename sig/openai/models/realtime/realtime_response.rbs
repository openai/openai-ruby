module OpenAI
  module Models
    module Realtime
      type realtime_response =
        {
          id: String,
          conversation_id: String,
          max_output_tokens: OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens,
          metadata: OpenAI::Models::metadata?,
          modalities: ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality],
          object: OpenAI::Models::Realtime::RealtimeResponse::object,
          output: ::Array[OpenAI::Models::Realtime::conversation_item],
          output_audio_format: OpenAI::Models::Realtime::RealtimeResponse::output_audio_format,
          status: OpenAI::Models::Realtime::RealtimeResponse::status,
          status_details: OpenAI::Realtime::RealtimeResponseStatus,
          temperature: Float,
          usage: OpenAI::Realtime::RealtimeResponseUsage,
          voice: OpenAI::Models::Realtime::RealtimeResponse::voice
        }

      class RealtimeResponse < OpenAI::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader conversation_id: String?

        def conversation_id=: (String) -> String

        attr_reader max_output_tokens: OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens?

        def max_output_tokens=: (
          OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens
        ) -> OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_reader modalities: ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality]?

        def modalities=: (
          ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality]
        ) -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality]

        attr_reader object: OpenAI::Models::Realtime::RealtimeResponse::object?

        def object=: (
          OpenAI::Models::Realtime::RealtimeResponse::object
        ) -> OpenAI::Models::Realtime::RealtimeResponse::object

        attr_reader output: ::Array[OpenAI::Models::Realtime::conversation_item]?

        def output=: (
          ::Array[OpenAI::Models::Realtime::conversation_item]
        ) -> ::Array[OpenAI::Models::Realtime::conversation_item]

        attr_reader output_audio_format: OpenAI::Models::Realtime::RealtimeResponse::output_audio_format?

        def output_audio_format=: (
          OpenAI::Models::Realtime::RealtimeResponse::output_audio_format
        ) -> OpenAI::Models::Realtime::RealtimeResponse::output_audio_format

        attr_reader status: OpenAI::Models::Realtime::RealtimeResponse::status?

        def status=: (
          OpenAI::Models::Realtime::RealtimeResponse::status
        ) -> OpenAI::Models::Realtime::RealtimeResponse::status

        attr_reader status_details: OpenAI::Realtime::RealtimeResponseStatus?

        def status_details=: (
          OpenAI::Realtime::RealtimeResponseStatus
        ) -> OpenAI::Realtime::RealtimeResponseStatus

        attr_reader temperature: Float?

        def temperature=: (Float) -> Float

        attr_reader usage: OpenAI::Realtime::RealtimeResponseUsage?

        def usage=: (
          OpenAI::Realtime::RealtimeResponseUsage
        ) -> OpenAI::Realtime::RealtimeResponseUsage

        attr_reader voice: OpenAI::Models::Realtime::RealtimeResponse::voice?

        def voice=: (
          OpenAI::Models::Realtime::RealtimeResponse::voice
        ) -> OpenAI::Models::Realtime::RealtimeResponse::voice

        def initialize: (
          ?id: String,
          ?conversation_id: String,
          ?max_output_tokens: OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens,
          ?metadata: OpenAI::Models::metadata?,
          ?modalities: ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality],
          ?object: OpenAI::Models::Realtime::RealtimeResponse::object,
          ?output: ::Array[OpenAI::Models::Realtime::conversation_item],
          ?output_audio_format: OpenAI::Models::Realtime::RealtimeResponse::output_audio_format,
          ?status: OpenAI::Models::Realtime::RealtimeResponse::status,
          ?status_details: OpenAI::Realtime::RealtimeResponseStatus,
          ?temperature: Float,
          ?usage: OpenAI::Realtime::RealtimeResponseUsage,
          ?voice: OpenAI::Models::Realtime::RealtimeResponse::voice
        ) -> void

        def to_hash: -> {
          id: String,
          conversation_id: String,
          max_output_tokens: OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens,
          metadata: OpenAI::Models::metadata?,
          modalities: ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality],
          object: OpenAI::Models::Realtime::RealtimeResponse::object,
          output: ::Array[OpenAI::Models::Realtime::conversation_item],
          output_audio_format: OpenAI::Models::Realtime::RealtimeResponse::output_audio_format,
          status: OpenAI::Models::Realtime::RealtimeResponse::status,
          status_details: OpenAI::Realtime::RealtimeResponseStatus,
          temperature: Float,
          usage: OpenAI::Realtime::RealtimeResponseUsage,
          voice: OpenAI::Models::Realtime::RealtimeResponse::voice
        }

        type max_output_tokens = Integer | :inf

        module MaxOutputTokens
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::max_output_tokens]
        end

        type modality = :text | :audio

        module Modality
          extend OpenAI::Internal::Type::Enum

          TEXT: :text
          AUDIO: :audio

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::modality]
        end

        type object = :"realtime.response"

        module Object
          extend OpenAI::Internal::Type::Enum

          REALTIME_RESPONSE: :"realtime.response"

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::object]
        end

        type output_audio_format = :pcm16 | :g711_ulaw | :g711_alaw

        module OutputAudioFormat
          extend OpenAI::Internal::Type::Enum

          PCM16: :pcm16
          G711_ULAW: :g711_ulaw
          G711_ALAW: :g711_alaw

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::output_audio_format]
        end

        type status =
          :completed | :cancelled | :failed | :incomplete | :in_progress

        module Status
          extend OpenAI::Internal::Type::Enum

          COMPLETED: :completed
          CANCELLED: :cancelled
          FAILED: :failed
          INCOMPLETE: :incomplete
          IN_PROGRESS: :in_progress

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::status]
        end

        type voice =
          String
          | :alloy
          | :ash
          | :ballad
          | :coral
          | :echo
          | :sage
          | :shimmer
          | :verse
          | :marin
          | :cedar

        module Voice
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::RealtimeResponse::voice]

          ALLOY: :alloy
          ASH: :ash
          BALLAD: :ballad
          CORAL: :coral
          ECHO: :echo
          SAGE: :sage
          SHIMMER: :shimmer
          VERSE: :verse
          MARIN: :marin
          CEDAR: :cedar
        end
      end
    end
  end
end
