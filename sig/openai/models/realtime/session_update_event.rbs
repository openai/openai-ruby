module OpenAI
  module Models
    module Realtime
      type session_update_event =
        {
          session: OpenAI::Models::Realtime::SessionUpdateEvent::session,
          type: :"session.update",
          event_id: String
        }

      class SessionUpdateEvent < OpenAI::Internal::Type::BaseModel
        attr_accessor session: OpenAI::Models::Realtime::SessionUpdateEvent::session

        attr_accessor type: :"session.update"

        attr_reader event_id: String?

        def event_id=: (String) -> String

        def initialize: (
          session: OpenAI::Models::Realtime::SessionUpdateEvent::session,
          ?event_id: String,
          ?type: :"session.update"
        ) -> void

        def to_hash: -> {
          session: OpenAI::Models::Realtime::SessionUpdateEvent::session,
          type: :"session.update",
          event_id: String
        }

        type session =
          OpenAI::Realtime::RealtimeSessionCreateRequest
          | OpenAI::Realtime::RealtimeTranscriptionSessionCreateRequest

        module Session
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::SessionUpdateEvent::session]
        end
      end
    end
  end
end
