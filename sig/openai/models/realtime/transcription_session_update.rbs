module OpenAI
  module Models
    module Realtime
      type transcription_session_update =
        {
          session: OpenAI::Realtime::TranscriptionSessionUpdate::Session,
          type: :"transcription_session.update",
          event_id: String
        }

      class TranscriptionSessionUpdate < OpenAI::Internal::Type::BaseModel
        attr_accessor session: OpenAI::Realtime::TranscriptionSessionUpdate::Session

        attr_accessor type: :"transcription_session.update"

        attr_reader event_id: String?

        def event_id=: (String) -> String

        def initialize: (
          session: OpenAI::Realtime::TranscriptionSessionUpdate::Session,
          ?event_id: String,
          ?type: :"transcription_session.update"
        ) -> void

        def to_hash: -> {
          session: OpenAI::Realtime::TranscriptionSessionUpdate::Session,
          type: :"transcription_session.update",
          event_id: String
        }

        type session =
          {
            include: ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_],
            input_audio_format: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format,
            input_audio_noise_reduction: OpenAI::Realtime::TranscriptionSessionUpdate::Session::InputAudioNoiseReduction,
            input_audio_transcription: OpenAI::Realtime::AudioTranscription,
            turn_detection: OpenAI::Realtime::TranscriptionSessionUpdate::Session::TurnDetection
          }

        class Session < OpenAI::Internal::Type::BaseModel
          attr_reader include: ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_]?

          def include=: (
            ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_]
          ) -> ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_]

          attr_reader input_audio_format: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format?

          def input_audio_format=: (
            OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format
          ) -> OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format

          attr_reader input_audio_noise_reduction: OpenAI::Realtime::TranscriptionSessionUpdate::Session::InputAudioNoiseReduction?

          def input_audio_noise_reduction=: (
            OpenAI::Realtime::TranscriptionSessionUpdate::Session::InputAudioNoiseReduction
          ) -> OpenAI::Realtime::TranscriptionSessionUpdate::Session::InputAudioNoiseReduction

          attr_reader input_audio_transcription: OpenAI::Realtime::AudioTranscription?

          def input_audio_transcription=: (
            OpenAI::Realtime::AudioTranscription
          ) -> OpenAI::Realtime::AudioTranscription

          attr_reader turn_detection: OpenAI::Realtime::TranscriptionSessionUpdate::Session::TurnDetection?

          def turn_detection=: (
            OpenAI::Realtime::TranscriptionSessionUpdate::Session::TurnDetection
          ) -> OpenAI::Realtime::TranscriptionSessionUpdate::Session::TurnDetection

          def initialize: (
            ?include: ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_],
            ?input_audio_format: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format,
            ?input_audio_noise_reduction: OpenAI::Realtime::TranscriptionSessionUpdate::Session::InputAudioNoiseReduction,
            ?input_audio_transcription: OpenAI::Realtime::AudioTranscription,
            ?turn_detection: OpenAI::Realtime::TranscriptionSessionUpdate::Session::TurnDetection
          ) -> void

          def to_hash: -> {
            include: ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_],
            input_audio_format: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format,
            input_audio_noise_reduction: OpenAI::Realtime::TranscriptionSessionUpdate::Session::InputAudioNoiseReduction,
            input_audio_transcription: OpenAI::Realtime::AudioTranscription,
            turn_detection: OpenAI::Realtime::TranscriptionSessionUpdate::Session::TurnDetection
          }

          type include_ = :"item.input_audio_transcription.logprobs"

          module Include
            extend OpenAI::Internal::Type::Enum

            ITEM_INPUT_AUDIO_TRANSCRIPTION_LOGPROBS: :"item.input_audio_transcription.logprobs"

            def self?.values: -> ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::include_]
          end

          type input_audio_format = :pcm16 | :g711_ulaw | :g711_alaw

          module InputAudioFormat
            extend OpenAI::Internal::Type::Enum

            PCM16: :pcm16
            G711_ULAW: :g711_ulaw
            G711_ALAW: :g711_alaw

            def self?.values: -> ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::input_audio_format]
          end

          type input_audio_noise_reduction =
            { type: OpenAI::Models::Realtime::noise_reduction_type }

          class InputAudioNoiseReduction < OpenAI::Internal::Type::BaseModel
            attr_reader type: OpenAI::Models::Realtime::noise_reduction_type?

            def type=: (
              OpenAI::Models::Realtime::noise_reduction_type
            ) -> OpenAI::Models::Realtime::noise_reduction_type

            def initialize: (
              ?type: OpenAI::Models::Realtime::noise_reduction_type
            ) -> void

            def to_hash: -> {
              type: OpenAI::Models::Realtime::noise_reduction_type
            }
          end

          type turn_detection =
            {
              prefix_padding_ms: Integer,
              silence_duration_ms: Integer,
              threshold: Float,
              type: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_
            }

          class TurnDetection < OpenAI::Internal::Type::BaseModel
            attr_reader prefix_padding_ms: Integer?

            def prefix_padding_ms=: (Integer) -> Integer

            attr_reader silence_duration_ms: Integer?

            def silence_duration_ms=: (Integer) -> Integer

            attr_reader threshold: Float?

            def threshold=: (Float) -> Float

            attr_reader type: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_?

            def type=: (
              OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_
            ) -> OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_

            def initialize: (
              ?prefix_padding_ms: Integer,
              ?silence_duration_ms: Integer,
              ?threshold: Float,
              ?type: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_
            ) -> void

            def to_hash: -> {
              prefix_padding_ms: Integer,
              silence_duration_ms: Integer,
              threshold: Float,
              type: OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_
            }

            type type_ = :server_vad

            module Type
              extend OpenAI::Internal::Type::Enum

              SERVER_VAD: :server_vad

              def self?.values: -> ::Array[OpenAI::Models::Realtime::TranscriptionSessionUpdate::Session::TurnDetection::type_]
            end
          end
        end
      end
    end
  end
end
