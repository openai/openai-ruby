module OpenAI
  module Models
    module Realtime
      type client_secret_create_params =
        {
          expires_after: OpenAI::Realtime::ClientSecretCreateParams::ExpiresAfter,
          session: OpenAI::Models::Realtime::ClientSecretCreateParams::session
        }
        & OpenAI::Internal::Type::request_parameters

      class ClientSecretCreateParams < OpenAI::Internal::Type::BaseModel
        extend OpenAI::Internal::Type::RequestParameters::Converter
        include OpenAI::Internal::Type::RequestParameters

        attr_reader expires_after: OpenAI::Realtime::ClientSecretCreateParams::ExpiresAfter?

        def expires_after=: (
          OpenAI::Realtime::ClientSecretCreateParams::ExpiresAfter
        ) -> OpenAI::Realtime::ClientSecretCreateParams::ExpiresAfter

        attr_reader session: OpenAI::Models::Realtime::ClientSecretCreateParams::session?

        def session=: (
          OpenAI::Models::Realtime::ClientSecretCreateParams::session
        ) -> OpenAI::Models::Realtime::ClientSecretCreateParams::session

        def initialize: (
          ?expires_after: OpenAI::Realtime::ClientSecretCreateParams::ExpiresAfter,
          ?session: OpenAI::Models::Realtime::ClientSecretCreateParams::session,
          ?request_options: OpenAI::request_opts
        ) -> void

        def to_hash: -> {
          expires_after: OpenAI::Realtime::ClientSecretCreateParams::ExpiresAfter,
          session: OpenAI::Models::Realtime::ClientSecretCreateParams::session,
          request_options: OpenAI::RequestOptions
        }

        type expires_after =
          {
            anchor: OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor,
            seconds: Integer
          }

        class ExpiresAfter < OpenAI::Internal::Type::BaseModel
          attr_reader anchor: OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor?

          def anchor=: (
            OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor
          ) -> OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor

          attr_reader seconds: Integer?

          def seconds=: (Integer) -> Integer

          def initialize: (
            ?anchor: OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor,
            ?seconds: Integer
          ) -> void

          def to_hash: -> {
            anchor: OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor,
            seconds: Integer
          }

          type anchor = :created_at

          module Anchor
            extend OpenAI::Internal::Type::Enum

            CREATED_AT: :created_at

            def self?.values: -> ::Array[OpenAI::Models::Realtime::ClientSecretCreateParams::ExpiresAfter::anchor]
          end
        end

        type session =
          OpenAI::Realtime::RealtimeSessionCreateRequest
          | OpenAI::Realtime::RealtimeTranscriptionSessionCreateRequest

        module Session
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> ::Array[OpenAI::Models::Realtime::ClientSecretCreateParams::session]
        end
      end
    end
  end
end
