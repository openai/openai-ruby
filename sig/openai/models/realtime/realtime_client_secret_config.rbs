module OpenAI
  module Models
    module Realtime
      type realtime_client_secret_config =
        {
          expires_after: OpenAI::Realtime::RealtimeClientSecretConfig::ExpiresAfter
        }

      class RealtimeClientSecretConfig < OpenAI::Internal::Type::BaseModel
        attr_reader expires_after: OpenAI::Realtime::RealtimeClientSecretConfig::ExpiresAfter?

        def expires_after=: (
          OpenAI::Realtime::RealtimeClientSecretConfig::ExpiresAfter
        ) -> OpenAI::Realtime::RealtimeClientSecretConfig::ExpiresAfter

        def initialize: (
          ?expires_after: OpenAI::Realtime::RealtimeClientSecretConfig::ExpiresAfter
        ) -> void

        def to_hash: -> {
          expires_after: OpenAI::Realtime::RealtimeClientSecretConfig::ExpiresAfter
        }

        type expires_after =
          {
            anchor: OpenAI::Models::Realtime::RealtimeClientSecretConfig::ExpiresAfter::anchor,
            seconds: Integer
          }

        class ExpiresAfter < OpenAI::Internal::Type::BaseModel
          attr_accessor anchor: OpenAI::Models::Realtime::RealtimeClientSecretConfig::ExpiresAfter::anchor

          attr_reader seconds: Integer?

          def seconds=: (Integer) -> Integer

          def initialize: (
            anchor: OpenAI::Models::Realtime::RealtimeClientSecretConfig::ExpiresAfter::anchor,
            ?seconds: Integer
          ) -> void

          def to_hash: -> {
            anchor: OpenAI::Models::Realtime::RealtimeClientSecretConfig::ExpiresAfter::anchor,
            seconds: Integer
          }

          type anchor = :created_at

          module Anchor
            extend OpenAI::Internal::Type::Enum

            CREATED_AT: :created_at

            def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeClientSecretConfig::ExpiresAfter::anchor]
          end
        end
      end
    end
  end
end
