module OpenAI
  module Models
    class RealtimeTranscriptionSessionCreateResponse = Realtime::RealtimeTranscriptionSessionCreateResponse

    module Realtime
      type realtime_transcription_session_create_response =
        {
          id: String,
          object: String,
          type: :transcription,
          audio: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio,
          expires_at: Integer,
          include: ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_]
        }

      class RealtimeTranscriptionSessionCreateResponse < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor object: String

        attr_accessor type: :transcription

        attr_reader audio: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio?

        def audio=: (
          OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio
        ) -> OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio

        attr_reader expires_at: Integer?

        def expires_at=: (Integer) -> Integer

        attr_reader include: ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_]?

        def include=: (
          ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_]
        ) -> ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_]

        def initialize: (
          id: String,
          object: String,
          ?audio: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio,
          ?expires_at: Integer,
          ?include: ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_],
          ?type: :transcription
        ) -> void

        def to_hash: -> {
          id: String,
          object: String,
          type: :transcription,
          audio: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio,
          expires_at: Integer,
          include: ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_]
        }

        type audio =
          {
            input: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input
          }

        class Audio < OpenAI::Internal::Type::BaseModel
          attr_reader input: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input?

          def input=: (
            OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input
          ) -> OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input

          def initialize: (
            ?input: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input
          ) -> void

          def to_hash: -> {
            input: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input
          }

          type input =
            {
              format_: OpenAI::Models::Realtime::realtime_audio_formats,
              noise_reduction: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input::NoiseReduction,
              transcription: OpenAI::Realtime::AudioTranscription,
              turn_detection: OpenAI::Realtime::RealtimeTranscriptionSessionTurnDetection
            }

          class Input < OpenAI::Internal::Type::BaseModel
            attr_reader format_: OpenAI::Models::Realtime::realtime_audio_formats?

            def format_=: (
              OpenAI::Models::Realtime::realtime_audio_formats
            ) -> OpenAI::Models::Realtime::realtime_audio_formats

            attr_reader noise_reduction: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input::NoiseReduction?

            def noise_reduction=: (
              OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input::NoiseReduction
            ) -> OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input::NoiseReduction

            attr_reader transcription: OpenAI::Realtime::AudioTranscription?

            def transcription=: (
              OpenAI::Realtime::AudioTranscription
            ) -> OpenAI::Realtime::AudioTranscription

            attr_reader turn_detection: OpenAI::Realtime::RealtimeTranscriptionSessionTurnDetection?

            def turn_detection=: (
              OpenAI::Realtime::RealtimeTranscriptionSessionTurnDetection
            ) -> OpenAI::Realtime::RealtimeTranscriptionSessionTurnDetection

            def initialize: (
              ?format_: OpenAI::Models::Realtime::realtime_audio_formats,
              ?noise_reduction: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input::NoiseReduction,
              ?transcription: OpenAI::Realtime::AudioTranscription,
              ?turn_detection: OpenAI::Realtime::RealtimeTranscriptionSessionTurnDetection
            ) -> void

            def to_hash: -> {
              format_: OpenAI::Models::Realtime::realtime_audio_formats,
              noise_reduction: OpenAI::Realtime::RealtimeTranscriptionSessionCreateResponse::Audio::Input::NoiseReduction,
              transcription: OpenAI::Realtime::AudioTranscription,
              turn_detection: OpenAI::Realtime::RealtimeTranscriptionSessionTurnDetection
            }

            type noise_reduction =
              { type: OpenAI::Models::Realtime::noise_reduction_type }

            class NoiseReduction < OpenAI::Internal::Type::BaseModel
              attr_reader type: OpenAI::Models::Realtime::noise_reduction_type?

              def type=: (
                OpenAI::Models::Realtime::noise_reduction_type
              ) -> OpenAI::Models::Realtime::noise_reduction_type

              def initialize: (
                ?type: OpenAI::Models::Realtime::noise_reduction_type
              ) -> void

              def to_hash: -> {
                type: OpenAI::Models::Realtime::noise_reduction_type
              }
            end
          end
        end

        type include_ = :"item.input_audio_transcription.logprobs"

        module Include
          extend OpenAI::Internal::Type::Enum

          ITEM_INPUT_AUDIO_TRANSCRIPTION_LOGPROBS: :"item.input_audio_transcription.logprobs"

          def self?.values: -> ::Array[OpenAI::Models::Realtime::RealtimeTranscriptionSessionCreateResponse::include_]
        end
      end
    end
  end
end
