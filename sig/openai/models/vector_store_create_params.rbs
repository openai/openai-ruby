module OpenAI
  module Models
    type vector_store_create_params =
      {
        chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
        expires_after: OpenAI::Models::VectorStoreCreateParams::ExpiresAfter,
        file_ids: ::Array[String],
        metadata: OpenAI::Models::metadata?,
        name: String
      }
      & OpenAI::Internal::Type::request_parameters

    class VectorStoreCreateParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      attr_reader chunking_strategy: OpenAI::Models::file_chunking_strategy_param?

      def chunking_strategy=: (
        OpenAI::Models::file_chunking_strategy_param
      ) -> OpenAI::Models::file_chunking_strategy_param

      attr_reader expires_after: OpenAI::Models::VectorStoreCreateParams::ExpiresAfter?

      def expires_after=: (
        OpenAI::Models::VectorStoreCreateParams::ExpiresAfter
      ) -> OpenAI::Models::VectorStoreCreateParams::ExpiresAfter

      attr_reader file_ids: ::Array[String]?

      def file_ids=: (::Array[String]) -> ::Array[String]

      attr_accessor metadata: OpenAI::Models::metadata?

      attr_reader name: String?

      def name=: (String) -> String

      def initialize: (
        ?chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
        ?expires_after: OpenAI::Models::VectorStoreCreateParams::ExpiresAfter,
        ?file_ids: ::Array[String],
        ?metadata: OpenAI::Models::metadata?,
        ?name: String,
        ?request_options: OpenAI::request_opts
      ) -> void

      def to_hash: -> OpenAI::Models::vector_store_create_params

      type expires_after = { anchor: :last_active_at, days: Integer }

      class ExpiresAfter < OpenAI::Internal::Type::BaseModel
        attr_accessor anchor: :last_active_at

        attr_accessor days: Integer

        def initialize: (days: Integer, ?anchor: :last_active_at) -> void

        def to_hash: -> OpenAI::Models::VectorStoreCreateParams::expires_after
      end
    end
  end
end
