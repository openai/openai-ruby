module OpenAI
  module Models
    type eval_list_response =
      {
        id: String,
        created_at: Integer,
        data_source_config: OpenAI::Models::EvalListResponse::data_source_config,
        metadata: OpenAI::Models::metadata?,
        name: String,
        object: :eval,
        testing_criteria: ::Array[OpenAI::Models::EvalListResponse::testing_criterion]
      }

    class EvalListResponse < OpenAI::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Integer

      attr_accessor data_source_config: OpenAI::Models::EvalListResponse::data_source_config

      attr_accessor metadata: OpenAI::Models::metadata?

      attr_accessor name: String

      attr_accessor object: :eval

      attr_accessor testing_criteria: ::Array[OpenAI::Models::EvalListResponse::testing_criterion]

      def initialize: (
        id: String,
        created_at: Integer,
        data_source_config: OpenAI::Models::EvalListResponse::data_source_config,
        metadata: OpenAI::Models::metadata?,
        name: String,
        testing_criteria: ::Array[OpenAI::Models::EvalListResponse::testing_criterion],
        ?object: :eval
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Integer,
        data_source_config: OpenAI::Models::EvalListResponse::data_source_config,
        metadata: OpenAI::Models::metadata?,
        name: String,
        object: :eval,
        testing_criteria: ::Array[OpenAI::Models::EvalListResponse::testing_criterion]
      }

      type data_source_config =
        OpenAI::EvalCustomDataSourceConfig
        | OpenAI::Models::EvalListResponse::DataSourceConfig::Logs
        | OpenAI::EvalStoredCompletionsDataSourceConfig

      module DataSourceConfig
        extend OpenAI::Internal::Type::Union

        type logs =
          {
            schema: ::Hash[Symbol, top],
            type: :logs,
            metadata: OpenAI::Models::metadata?
          }

        class Logs < OpenAI::Internal::Type::BaseModel
          attr_accessor schema: ::Hash[Symbol, top]

          attr_accessor type: :logs

          attr_accessor metadata: OpenAI::Models::metadata?

          def initialize: (
            schema: ::Hash[Symbol, top],
            ?metadata: OpenAI::Models::metadata?,
            ?type: :logs
          ) -> void

          def to_hash: -> {
            schema: ::Hash[Symbol, top],
            type: :logs,
            metadata: OpenAI::Models::metadata?
          }
        end

        def self?.variants: -> ::Array[OpenAI::Models::EvalListResponse::data_source_config]
      end

      type testing_criterion =
        OpenAI::Graders::LabelModelGrader
        | OpenAI::Graders::StringCheckGrader
        | OpenAI::Models::EvalListResponse::TestingCriterion::EvalGraderTextSimilarity
        | OpenAI::Models::EvalListResponse::TestingCriterion::EvalGraderPython
        | OpenAI::Models::EvalListResponse::TestingCriterion::EvalGraderScoreModel

      module TestingCriterion
        extend OpenAI::Internal::Type::Union

        type eval_grader_text_similarity = { pass_threshold: Float }

        class EvalGraderTextSimilarity < OpenAI::Models::Graders::TextSimilarityGrader
          def pass_threshold: -> Float

          def pass_threshold=: (Float _) -> Float

          def initialize: (pass_threshold: Float) -> void

          def to_hash: -> { pass_threshold: Float }
        end

        type eval_grader_python = { pass_threshold: Float }

        class EvalGraderPython < OpenAI::Models::Graders::PythonGrader
          def pass_threshold: -> Float?

          def pass_threshold=: (Float _) -> Float

          def initialize: (?pass_threshold: Float) -> void

          def to_hash: -> { pass_threshold: Float }
        end

        type eval_grader_score_model = { pass_threshold: Float }

        class EvalGraderScoreModel < OpenAI::Models::Graders::ScoreModelGrader
          def pass_threshold: -> Float?

          def pass_threshold=: (Float _) -> Float

          def initialize: (?pass_threshold: Float) -> void

          def to_hash: -> { pass_threshold: Float }
        end

        def self?.variants: -> ::Array[OpenAI::Models::EvalListResponse::testing_criterion]
      end
    end
  end
end
