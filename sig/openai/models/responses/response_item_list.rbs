module OpenAI
  module Models
    
    class ResponseItemList = Responses::ResponseItemList

    module Responses
      type response_item_list =
        {
          data: ::Array[OpenAI::Models::Responses::ResponseItemList::data],
          first_id: String,
          has_more: bool,
          last_id: String,
          object: :list
        }

      class ResponseItemList < OpenAI::BaseModel
        attr_accessor data: ::Array[OpenAI::Models::Responses::ResponseItemList::data]

        attr_accessor first_id: String

        attr_accessor has_more: bool

        attr_accessor last_id: String

        attr_accessor object: :list

        def initialize:
          (
            data: ::Array[OpenAI::Models::Responses::ResponseItemList::data],
            first_id: String,
            has_more: bool,
            last_id: String,
            object: :list
          ) -> void
          | (
            ?OpenAI::Models::Responses::response_item_list
            | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::Responses::response_item_list

        type data =
          OpenAI::Models::Responses::ResponseItemList::Data::Message
          | OpenAI::Models::Responses::ResponseOutputMessage
          | OpenAI::Models::Responses::ResponseFileSearchToolCall
          | OpenAI::Models::Responses::ResponseComputerToolCall
          | OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput
          | OpenAI::Models::Responses::ResponseFunctionWebSearch
          | OpenAI::Models::Responses::ResponseFunctionToolCall
          | OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput

        class Data < OpenAI::Union
          type message =
            {
              id: String,
              content: OpenAI::Models::Responses::response_input_message_content_list,
              role: OpenAI::Models::Responses::ResponseItemList::Data::Message::role,
              status: OpenAI::Models::Responses::ResponseItemList::Data::Message::status,
              type: OpenAI::Models::Responses::ResponseItemList::Data::Message::type_
            }

          class Message < OpenAI::BaseModel
            attr_accessor id: String

            attr_accessor content: OpenAI::Models::Responses::response_input_message_content_list

            attr_accessor role: OpenAI::Models::Responses::ResponseItemList::Data::Message::role

            attr_reader status: OpenAI::Models::Responses::ResponseItemList::Data::Message::status?

            def status=: (
              OpenAI::Models::Responses::ResponseItemList::Data::Message::status
            ) -> OpenAI::Models::Responses::ResponseItemList::Data::Message::status

            attr_reader type: OpenAI::Models::Responses::ResponseItemList::Data::Message::type_?

            def type=: (
              OpenAI::Models::Responses::ResponseItemList::Data::Message::type_
            ) -> OpenAI::Models::Responses::ResponseItemList::Data::Message::type_

            def initialize:
              (
                id: String,
                content: OpenAI::Models::Responses::response_input_message_content_list,
                role: OpenAI::Models::Responses::ResponseItemList::Data::Message::role,
                status: OpenAI::Models::Responses::ResponseItemList::Data::Message::status,
                type: OpenAI::Models::Responses::ResponseItemList::Data::Message::type_
              ) -> void
              | (
                ?OpenAI::Models::Responses::ResponseItemList::Data::message
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Responses::ResponseItemList::Data::message

            type role = :user | :system | :developer

            class Role < OpenAI::Enum
              USER: :user
              SYSTEM: :system
              DEVELOPER: :developer

              def self.values: -> ::Array[OpenAI::Models::Responses::ResponseItemList::Data::Message::role]
            end

            type status = :in_progress | :completed | :incomplete

            class Status < OpenAI::Enum
              IN_PROGRESS: :in_progress
              COMPLETED: :completed
              INCOMPLETE: :incomplete

              def self.values: -> ::Array[OpenAI::Models::Responses::ResponseItemList::Data::Message::status]
            end

            type type_ = :message

            class Type < OpenAI::Enum
              MESSAGE: :message

              def self.values: -> ::Array[OpenAI::Models::Responses::ResponseItemList::Data::Message::type_]
            end
          end

          type computer_call_output =
            {
              id: String,
              call_id: String,
              output: OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::Output,
              type: :computer_call_output,
              acknowledged_safety_checks: ::Array[OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::AcknowledgedSafetyCheck],
              status: OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::status
            }

          class ComputerCallOutput < OpenAI::BaseModel
            attr_accessor id: String

            attr_accessor call_id: String

            attr_accessor output: OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::Output

            attr_accessor type: :computer_call_output

            attr_reader acknowledged_safety_checks: ::Array[OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::AcknowledgedSafetyCheck]?

            def acknowledged_safety_checks=: (
              ::Array[OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::AcknowledgedSafetyCheck]
            ) -> ::Array[OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::AcknowledgedSafetyCheck]

            attr_reader status: OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::status?

            def status=: (
              OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::status
            ) -> OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::status

            def initialize:
              (
                id: String,
                call_id: String,
                output: OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::Output,
                acknowledged_safety_checks: ::Array[OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::AcknowledgedSafetyCheck],
                status: OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::status,
                type: :computer_call_output
              ) -> void
              | (
                ?OpenAI::Models::Responses::ResponseItemList::Data::computer_call_output
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Responses::ResponseItemList::Data::computer_call_output

            type output =
              { type: :computer_screenshot, file_id: String, image_url: String }

            class Output < OpenAI::BaseModel
              attr_accessor type: :computer_screenshot

              attr_reader file_id: String?

              def file_id=: (String) -> String

              attr_reader image_url: String?

              def image_url=: (String) -> String

              def initialize:
                (
                  file_id: String,
                  image_url: String,
                  type: :computer_screenshot
                ) -> void
                | (
                  ?OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::output
                  | OpenAI::BaseModel data
                ) -> void

              def to_hash: -> OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::output
            end

            type acknowledged_safety_check =
              { id: String, code: String, message: String }

            class AcknowledgedSafetyCheck < OpenAI::BaseModel
              attr_accessor id: String

              attr_accessor code: String

              attr_accessor message: String

              def initialize:
                (id: String, code: String, message: String) -> void
                | (
                  ?OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::acknowledged_safety_check
                  | OpenAI::BaseModel data
                ) -> void

              def to_hash: -> OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::acknowledged_safety_check
            end

            type status = :in_progress | :completed | :incomplete

            class Status < OpenAI::Enum
              IN_PROGRESS: :in_progress
              COMPLETED: :completed
              INCOMPLETE: :incomplete

              def self.values: -> ::Array[OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput::status]
            end
          end

          type function_call_output =
            {
              id: String,
              call_id: String,
              output: String,
              type: :function_call_output,
              status: OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput::status
            }

          class FunctionCallOutput < OpenAI::BaseModel
            attr_accessor id: String

            attr_accessor call_id: String

            attr_accessor output: String

            attr_accessor type: :function_call_output

            attr_reader status: OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput::status?

            def status=: (
              OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput::status
            ) -> OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput::status

            def initialize:
              (
                id: String,
                call_id: String,
                output: String,
                status: OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput::status,
                type: :function_call_output
              ) -> void
              | (
                ?OpenAI::Models::Responses::ResponseItemList::Data::function_call_output
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Responses::ResponseItemList::Data::function_call_output

            type status = :in_progress | :completed | :incomplete

            class Status < OpenAI::Enum
              IN_PROGRESS: :in_progress
              COMPLETED: :completed
              INCOMPLETE: :incomplete

              def self.values: -> ::Array[OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput::status]
            end
          end

          def self.variants: -> [OpenAI::Models::Responses::ResponseItemList::Data::Message, OpenAI::Models::Responses::ResponseOutputMessage, OpenAI::Models::Responses::ResponseFileSearchToolCall, OpenAI::Models::Responses::ResponseComputerToolCall, OpenAI::Models::Responses::ResponseItemList::Data::ComputerCallOutput, OpenAI::Models::Responses::ResponseFunctionWebSearch, OpenAI::Models::Responses::ResponseFunctionToolCall, OpenAI::Models::Responses::ResponseItemList::Data::FunctionCallOutput]
        end
      end
    end
  end
end
