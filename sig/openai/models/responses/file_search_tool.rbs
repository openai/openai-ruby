module OpenAI
  module Models
    module Responses
      type file_search_tool =
        {
          type: :file_search,
          vector_store_ids: ::Array[String],
          filters: OpenAI::Models::Responses::FileSearchTool::filters,
          max_num_results: Integer,
          ranking_options: OpenAI::Models::Responses::FileSearchTool::RankingOptions
        }

      class FileSearchTool < OpenAI::BaseModel
        attr_accessor type: :file_search

        attr_accessor vector_store_ids: ::Array[String]

        attr_reader filters: OpenAI::Models::Responses::FileSearchTool::filters?

        def filters=: (
          OpenAI::Models::Responses::FileSearchTool::filters
        ) -> OpenAI::Models::Responses::FileSearchTool::filters

        attr_reader max_num_results: Integer?

        def max_num_results=: (Integer) -> Integer

        attr_reader ranking_options: OpenAI::Models::Responses::FileSearchTool::RankingOptions?

        def ranking_options=: (
          OpenAI::Models::Responses::FileSearchTool::RankingOptions
        ) -> OpenAI::Models::Responses::FileSearchTool::RankingOptions

        def initialize: (
          vector_store_ids: ::Array[String],
          ?filters: OpenAI::Models::Responses::FileSearchTool::filters,
          ?max_num_results: Integer,
          ?ranking_options: OpenAI::Models::Responses::FileSearchTool::RankingOptions,
          ?type: :file_search
        ) -> void

        def to_hash: -> OpenAI::Models::Responses::file_search_tool

        type filters =
          OpenAI::Models::ComparisonFilter | OpenAI::Models::CompoundFilter

        class Filters < OpenAI::Union
          def self.variants: -> [OpenAI::Models::ComparisonFilter, OpenAI::Models::CompoundFilter]
        end

        type ranking_options =
          {
            ranker: OpenAI::Models::Responses::FileSearchTool::RankingOptions::ranker,
            score_threshold: Float
          }

        class RankingOptions < OpenAI::BaseModel
          attr_reader ranker: OpenAI::Models::Responses::FileSearchTool::RankingOptions::ranker?

          def ranker=: (
            OpenAI::Models::Responses::FileSearchTool::RankingOptions::ranker
          ) -> OpenAI::Models::Responses::FileSearchTool::RankingOptions::ranker

          attr_reader score_threshold: Float?

          def score_threshold=: (Float) -> Float

          def initialize: (
            ?ranker: OpenAI::Models::Responses::FileSearchTool::RankingOptions::ranker,
            ?score_threshold: Float
          ) -> void

          def to_hash: -> OpenAI::Models::Responses::FileSearchTool::ranking_options

          type ranker = :auto | :"default-2024-11-15"

          class Ranker < OpenAI::Enum
            AUTO: :auto
            DEFAULT_2024_11_15: :"default-2024-11-15"

            def self.values: -> ::Array[OpenAI::Models::Responses::FileSearchTool::RankingOptions::ranker]
          end
        end
      end
    end
  end
end
