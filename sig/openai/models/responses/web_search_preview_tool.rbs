module OpenAI
  module Models
    module Responses
      type web_search_preview_tool =
        {
          type: OpenAI::Models::Responses::WebSearchPreviewTool::type_,
          search_context_size: OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size,
          user_location: OpenAI::Responses::WebSearchPreviewTool::UserLocation?
        }

      class WebSearchPreviewTool < OpenAI::Internal::Type::BaseModel
        attr_accessor type: OpenAI::Models::Responses::WebSearchPreviewTool::type_

        attr_reader search_context_size: OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size?

        def search_context_size=: (
          OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size
        ) -> OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size

        attr_accessor user_location: OpenAI::Responses::WebSearchPreviewTool::UserLocation?

        def initialize: (
          type: OpenAI::Models::Responses::WebSearchPreviewTool::type_,
          ?search_context_size: OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size,
          ?user_location: OpenAI::Responses::WebSearchPreviewTool::UserLocation?
        ) -> void

        def to_hash: -> {
          type: OpenAI::Models::Responses::WebSearchPreviewTool::type_,
          search_context_size: OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size,
          user_location: OpenAI::Responses::WebSearchPreviewTool::UserLocation?
        }

        type type_ = :web_search_preview | :web_search_preview_2025_03_11

        module Type
          extend OpenAI::Internal::Type::Enum

          WEB_SEARCH_PREVIEW: :web_search_preview
          WEB_SEARCH_PREVIEW_2025_03_11: :web_search_preview_2025_03_11

          def self?.values: -> ::Array[OpenAI::Models::Responses::WebSearchPreviewTool::type_]
        end

        type search_context_size = :low | :medium | :high

        module SearchContextSize
          extend OpenAI::Internal::Type::Enum

          LOW: :low
          MEDIUM: :medium
          HIGH: :high

          def self?.values: -> ::Array[OpenAI::Models::Responses::WebSearchPreviewTool::search_context_size]
        end

        type user_location =
          {
            type: :approximate,
            city: String?,
            country: String?,
            region: String?,
            timezone: String?
          }

        class UserLocation < OpenAI::Internal::Type::BaseModel
          attr_accessor type: :approximate

          attr_accessor city: String?

          attr_accessor country: String?

          attr_accessor region: String?

          attr_accessor timezone: String?

          def initialize: (
            ?city: String?,
            ?country: String?,
            ?region: String?,
            ?timezone: String?,
            ?type: :approximate
          ) -> void

          def to_hash: -> {
            type: :approximate,
            city: String?,
            country: String?,
            region: String?,
            timezone: String?
          }
        end
      end
    end
  end
end
