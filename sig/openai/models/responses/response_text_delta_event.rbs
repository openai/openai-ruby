module OpenAI
  module Models
    module Responses
      type response_text_delta_event =
        {
          content_index: Integer,
          delta: String,
          item_id: String,
          logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob],
          output_index: Integer,
          sequence_number: Integer,
          type: :"response.output_text.delta"
        }

      class ResponseTextDeltaEvent < OpenAI::Internal::Type::BaseModel
        attr_accessor content_index: Integer

        attr_accessor delta: String

        attr_accessor item_id: String

        attr_accessor logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob]

        attr_accessor output_index: Integer

        attr_accessor sequence_number: Integer

        attr_accessor type: :"response.output_text.delta"

        def initialize: (
          content_index: Integer,
          delta: String,
          item_id: String,
          logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob],
          output_index: Integer,
          sequence_number: Integer,
          ?type: :"response.output_text.delta"
        ) -> void

        def to_hash: -> {
          content_index: Integer,
          delta: String,
          item_id: String,
          logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob],
          output_index: Integer,
          sequence_number: Integer,
          type: :"response.output_text.delta"
        }

        type logprob =
          {
            token: String,
            logprob: Float,
            top_logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob::TopLogprob]
          }

        class Logprob < OpenAI::Internal::Type::BaseModel
          attr_accessor token: String

          attr_accessor logprob: Float

          attr_reader top_logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob::TopLogprob]?

          def top_logprobs=: (
            ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob::TopLogprob]
          ) -> ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob::TopLogprob]

          def initialize: (
            token: String,
            logprob: Float,
            ?top_logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob::TopLogprob]
          ) -> void

          def to_hash: -> {
            token: String,
            logprob: Float,
            top_logprobs: ::Array[OpenAI::Responses::ResponseTextDeltaEvent::Logprob::TopLogprob]
          }

          type top_logprob = { token: String, logprob: Float }

          class TopLogprob < OpenAI::Internal::Type::BaseModel
            attr_reader token: String?

            def token=: (String) -> String

            attr_reader logprob: Float?

            def logprob=: (Float) -> Float

            def initialize: (?token: String, ?logprob: Float) -> void

            def to_hash: -> { token: String, logprob: Float }
          end
        end
      end
    end
  end
end
