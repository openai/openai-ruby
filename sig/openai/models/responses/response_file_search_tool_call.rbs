module OpenAI
  module Models
    module Responses
      type response_file_search_tool_call =
        {
          id: String,
          queries: ::Array[String],
          status: OpenAI::Models::Responses::ResponseFileSearchToolCall::status,
          type: :file_search_call,
          results: ::Array[OpenAI::Models::Responses::ResponseFileSearchToolCall::Result]?
        }

      class ResponseFileSearchToolCall < OpenAI::BaseModel
        attr_accessor id: String

        attr_accessor queries: ::Array[String]

        attr_accessor status: OpenAI::Models::Responses::ResponseFileSearchToolCall::status

        attr_accessor type: :file_search_call

        attr_accessor results: ::Array[OpenAI::Models::Responses::ResponseFileSearchToolCall::Result]?

        def initialize: (
          id: String,
          queries: ::Array[String],
          status: OpenAI::Models::Responses::ResponseFileSearchToolCall::status,
          ?results: ::Array[OpenAI::Models::Responses::ResponseFileSearchToolCall::Result]?,
          ?type: :file_search_call
        ) -> void

        def to_hash: -> OpenAI::Models::Responses::response_file_search_tool_call

        type status =
          :in_progress | :searching | :completed | :incomplete | :failed

        class Status < OpenAI::Enum
          IN_PROGRESS: :in_progress
          SEARCHING: :searching
          COMPLETED: :completed
          INCOMPLETE: :incomplete
          FAILED: :failed

          def self.values: -> ::Array[OpenAI::Models::Responses::ResponseFileSearchToolCall::status]
        end

        type result =
          {
            attributes: ::Hash[Symbol, OpenAI::Models::Responses::ResponseFileSearchToolCall::Result::attribute]?,
            file_id: String,
            filename: String,
            score: Float,
            text: String
          }

        class Result < OpenAI::BaseModel
          attr_accessor attributes: ::Hash[Symbol, OpenAI::Models::Responses::ResponseFileSearchToolCall::Result::attribute]?

          attr_reader file_id: String?

          def file_id=: (String) -> String

          attr_reader filename: String?

          def filename=: (String) -> String

          attr_reader score: Float?

          def score=: (Float) -> Float

          attr_reader text: String?

          def text=: (String) -> String

          def initialize: (
            ?attributes: ::Hash[Symbol, OpenAI::Models::Responses::ResponseFileSearchToolCall::Result::attribute]?,
            ?file_id: String,
            ?filename: String,
            ?score: Float,
            ?text: String
          ) -> void

          def to_hash: -> OpenAI::Models::Responses::ResponseFileSearchToolCall::result

          type attribute = String | Float | bool

          class Attribute < OpenAI::Union
            def self.variants: -> [String, Float, bool]
          end
        end
      end
    end
  end
end
