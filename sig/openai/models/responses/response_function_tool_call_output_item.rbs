module OpenAI
  module Models
    module Responses
      type response_function_tool_call_output_item =
        {
          id: String,
          call_id: String,
          output: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::output,
          type: :function_call_output,
          status: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status
        }

      class ResponseFunctionToolCallOutputItem < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor call_id: String

        attr_accessor output: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::output

        attr_accessor type: :function_call_output

        attr_reader status: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status?

        def status=: (
          OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status
        ) -> OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status

        def initialize: (
          id: String,
          call_id: String,
          output: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::output,
          ?status: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status,
          ?type: :function_call_output
        ) -> void

        def to_hash: -> {
          id: String,
          call_id: String,
          output: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::output,
          type: :function_call_output,
          status: OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status
        }

        type output =
          String
          | ::Array[OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::Output::output_content_list]

        module Output
          extend OpenAI::Internal::Type::Union

          type output_content_list =
            OpenAI::Responses::ResponseInputText
            | OpenAI::Responses::ResponseInputImage
            | OpenAI::Responses::ResponseInputFile

          module OutputContentList
            extend OpenAI::Internal::Type::Union

            def self?.variants: -> ::Array[OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::Output::output_content_list]
          end

          def self?.variants: -> ::Array[OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::output]

          OutputContentListArray: OpenAI::Internal::Type::Converter
        end

        type status = :in_progress | :completed | :incomplete

        module Status
          extend OpenAI::Internal::Type::Enum

          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          INCOMPLETE: :incomplete

          def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseFunctionToolCallOutputItem::status]
        end
      end
    end
  end
end
