module OpenAI
  module Models
    module Responses
      type response =
        {
          id: String,
          created_at: Float,
          error: OpenAI::Models::Responses::ResponseError?,
          incomplete_details: OpenAI::Models::Responses::Response::IncompleteDetails?,
          instructions: String?,
          metadata: OpenAI::Models::metadata?,
          model: OpenAI::Models::responses_model,
          object: :response,
          output: ::Array[OpenAI::Models::Responses::response_output_item],
          parallel_tool_calls: bool,
          temperature: Float?,
          tool_choice: OpenAI::Models::Responses::Response::tool_choice,
          tools: ::Array[OpenAI::Models::Responses::tool],
          top_p: Float?,
          max_output_tokens: Integer?,
          previous_response_id: String?,
          reasoning: OpenAI::Models::Reasoning?,
          status: OpenAI::Models::Responses::response_status,
          text: OpenAI::Models::Responses::ResponseTextConfig,
          truncation: OpenAI::Models::Responses::Response::truncation?,
          usage: OpenAI::Models::Responses::ResponseUsage,
          user: String
        }

      class Response < OpenAI::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Float

        attr_accessor error: OpenAI::Models::Responses::ResponseError?

        attr_accessor incomplete_details: OpenAI::Models::Responses::Response::IncompleteDetails?

        attr_accessor instructions: String?

        attr_accessor metadata: OpenAI::Models::metadata?

        attr_accessor model: OpenAI::Models::responses_model

        attr_accessor object: :response

        attr_accessor output: ::Array[OpenAI::Models::Responses::response_output_item]

        attr_accessor parallel_tool_calls: bool

        attr_accessor temperature: Float?

        attr_accessor tool_choice: OpenAI::Models::Responses::Response::tool_choice

        attr_accessor tools: ::Array[OpenAI::Models::Responses::tool]

        attr_accessor top_p: Float?

        attr_accessor max_output_tokens: Integer?

        attr_accessor previous_response_id: String?

        attr_accessor reasoning: OpenAI::Models::Reasoning?

        attr_reader status: OpenAI::Models::Responses::response_status?

        def status=: (
          OpenAI::Models::Responses::response_status
        ) -> OpenAI::Models::Responses::response_status

        attr_reader text: OpenAI::Models::Responses::ResponseTextConfig?

        def text=: (
          OpenAI::Models::Responses::ResponseTextConfig
        ) -> OpenAI::Models::Responses::ResponseTextConfig

        attr_accessor truncation: OpenAI::Models::Responses::Response::truncation?

        attr_reader usage: OpenAI::Models::Responses::ResponseUsage?

        def usage=: (
          OpenAI::Models::Responses::ResponseUsage
        ) -> OpenAI::Models::Responses::ResponseUsage

        attr_reader user: String?

        def user=: (String) -> String

        def initialize: (
          id: String,
          created_at: Float,
          error: OpenAI::Models::Responses::ResponseError?,
          incomplete_details: OpenAI::Models::Responses::Response::IncompleteDetails?,
          instructions: String?,
          metadata: OpenAI::Models::metadata?,
          model: OpenAI::Models::responses_model,
          output: ::Array[OpenAI::Models::Responses::response_output_item],
          parallel_tool_calls: bool,
          temperature: Float?,
          tool_choice: OpenAI::Models::Responses::Response::tool_choice,
          tools: ::Array[OpenAI::Models::Responses::tool],
          top_p: Float?,
          ?max_output_tokens: Integer?,
          ?previous_response_id: String?,
          ?reasoning: OpenAI::Models::Reasoning?,
          ?status: OpenAI::Models::Responses::response_status,
          ?text: OpenAI::Models::Responses::ResponseTextConfig,
          ?truncation: OpenAI::Models::Responses::Response::truncation?,
          ?usage: OpenAI::Models::Responses::ResponseUsage,
          ?user: String,
          ?object: :response
        ) -> void

        def to_hash: -> OpenAI::Models::Responses::response

        type incomplete_details =
          {
            reason: OpenAI::Models::Responses::Response::IncompleteDetails::reason
          }

        class IncompleteDetails < OpenAI::BaseModel
          attr_reader reason: OpenAI::Models::Responses::Response::IncompleteDetails::reason?

          def reason=: (
            OpenAI::Models::Responses::Response::IncompleteDetails::reason
          ) -> OpenAI::Models::Responses::Response::IncompleteDetails::reason

          def initialize: (
            ?reason: OpenAI::Models::Responses::Response::IncompleteDetails::reason
          ) -> void

          def to_hash: -> OpenAI::Models::Responses::Response::incomplete_details

          type reason = :max_output_tokens | :content_filter

          module Reason
            extend OpenAI::Enum

            MAX_OUTPUT_TOKENS: :max_output_tokens
            CONTENT_FILTER: :content_filter

            def self?.values: -> ::Array[OpenAI::Models::Responses::Response::IncompleteDetails::reason]
          end
        end

        type tool_choice =
          OpenAI::Models::Responses::tool_choice_options
          | OpenAI::Models::Responses::ToolChoiceTypes
          | OpenAI::Models::Responses::ToolChoiceFunction

        module ToolChoice
          extend OpenAI::Union

          def self?.variants: -> [OpenAI::Models::Responses::tool_choice_options, OpenAI::Models::Responses::ToolChoiceTypes, OpenAI::Models::Responses::ToolChoiceFunction]
        end

        type truncation = :auto | :disabled

        module Truncation
          extend OpenAI::Enum

          AUTO: :auto
          DISABLED: :disabled

          def self?.values: -> ::Array[OpenAI::Models::Responses::Response::truncation]
        end
      end
    end
  end
end
