module OpenAI
  module Models
    module Responses
      type response_output_message =
        {
          id: String,
          content: ::Array[OpenAI::Models::Responses::ResponseOutputMessage::content],
          role: :assistant,
          status: OpenAI::Models::Responses::ResponseOutputMessage::status,
          type: :message
        }

      class ResponseOutputMessage < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor content: ::Array[OpenAI::Models::Responses::ResponseOutputMessage::content]

        attr_accessor role: :assistant

        attr_accessor status: OpenAI::Models::Responses::ResponseOutputMessage::status

        attr_accessor type: :message

        def initialize: (
          id: String,
          content: ::Array[OpenAI::Models::Responses::ResponseOutputMessage::content],
          status: OpenAI::Models::Responses::ResponseOutputMessage::status,
          ?role: :assistant,
          ?type: :message
        ) -> void

        def to_hash: -> OpenAI::Models::Responses::response_output_message

        type content =
          OpenAI::Models::Responses::ResponseOutputText
          | OpenAI::Models::Responses::ResponseOutputRefusal

        module Content
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> [OpenAI::Models::Responses::ResponseOutputText, OpenAI::Models::Responses::ResponseOutputRefusal]
        end

        type status = :in_progress | :completed | :incomplete

        module Status
          extend OpenAI::Internal::Type::Enum

          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          INCOMPLETE: :incomplete

          def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseOutputMessage::status]
        end
      end
    end
  end
end
