module OpenAI
  module Models
    module Responses
      type response_input_item =
        OpenAI::Models::Responses::EasyInputMessage
        | OpenAI::Models::Responses::ResponseInputItem::Message
        | OpenAI::Models::Responses::ResponseOutputMessage
        | OpenAI::Models::Responses::ResponseFileSearchToolCall
        | OpenAI::Models::Responses::ResponseComputerToolCall
        | OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput
        | OpenAI::Models::Responses::ResponseFunctionWebSearch
        | OpenAI::Models::Responses::ResponseFunctionToolCall
        | OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput
        | OpenAI::Models::Responses::ResponseReasoningItem
        | OpenAI::Models::Responses::ResponseInputItem::ItemReference

      module ResponseInputItem
        extend OpenAI::Internal::Type::Union

        type message =
          {
            content: OpenAI::Models::Responses::response_input_message_content_list,
            role: OpenAI::Models::Responses::ResponseInputItem::Message::role,
            status: OpenAI::Models::Responses::ResponseInputItem::Message::status,
            type: OpenAI::Models::Responses::ResponseInputItem::Message::type_
          }

        class Message < OpenAI::Internal::Type::BaseModel
          attr_accessor content: OpenAI::Models::Responses::response_input_message_content_list

          attr_accessor role: OpenAI::Models::Responses::ResponseInputItem::Message::role

          attr_reader status: OpenAI::Models::Responses::ResponseInputItem::Message::status?

          def status=: (
            OpenAI::Models::Responses::ResponseInputItem::Message::status
          ) -> OpenAI::Models::Responses::ResponseInputItem::Message::status

          attr_reader type: OpenAI::Models::Responses::ResponseInputItem::Message::type_?

          def type=: (
            OpenAI::Models::Responses::ResponseInputItem::Message::type_
          ) -> OpenAI::Models::Responses::ResponseInputItem::Message::type_

          def initialize: (
            content: OpenAI::Models::Responses::response_input_message_content_list,
            role: OpenAI::Models::Responses::ResponseInputItem::Message::role,
            ?status: OpenAI::Models::Responses::ResponseInputItem::Message::status,
            ?type: OpenAI::Models::Responses::ResponseInputItem::Message::type_
          ) -> void

          def to_hash: -> OpenAI::Models::Responses::ResponseInputItem::message

          type role = :user | :system | :developer

          module Role
            extend OpenAI::Internal::Type::Enum

            USER: :user
            SYSTEM: :system
            DEVELOPER: :developer

            def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseInputItem::Message::role]
          end

          type status = :in_progress | :completed | :incomplete

          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            INCOMPLETE: :incomplete

            def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseInputItem::Message::status]
          end

          type type_ = :message

          module Type
            extend OpenAI::Internal::Type::Enum

            MESSAGE: :message

            def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseInputItem::Message::type_]
          end
        end

        type computer_call_output =
          {
            call_id: String,
            output: OpenAI::Models::Responses::ResponseComputerToolCallOutputScreenshot,
            type: :computer_call_output,
            id: String,
            acknowledged_safety_checks: ::Array[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck],
            status: OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::status
          }

        class ComputerCallOutput < OpenAI::Internal::Type::BaseModel
          attr_accessor call_id: String

          attr_accessor output: OpenAI::Models::Responses::ResponseComputerToolCallOutputScreenshot

          attr_accessor type: :computer_call_output

          attr_reader id: String?

          def id=: (String) -> String

          attr_reader acknowledged_safety_checks: ::Array[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck]?

          def acknowledged_safety_checks=: (
            ::Array[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck]
          ) -> ::Array[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck]

          attr_reader status: OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::status?

          def status=: (
            OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::status
          ) -> OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::status

          def initialize: (
            call_id: String,
            output: OpenAI::Models::Responses::ResponseComputerToolCallOutputScreenshot,
            ?id: String,
            ?acknowledged_safety_checks: ::Array[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::AcknowledgedSafetyCheck],
            ?status: OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::status,
            ?type: :computer_call_output
          ) -> void

          def to_hash: -> OpenAI::Models::Responses::ResponseInputItem::computer_call_output

          type acknowledged_safety_check =
            { id: String, code: String, message: String }

          class AcknowledgedSafetyCheck < OpenAI::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor code: String

            attr_accessor message: String

            def initialize: (id: String, code: String, message: String) -> void

            def to_hash: -> OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::acknowledged_safety_check
          end

          type status = :in_progress | :completed | :incomplete

          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            INCOMPLETE: :incomplete

            def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput::status]
          end
        end

        type function_call_output =
          {
            call_id: String,
            output: String,
            type: :function_call_output,
            id: String,
            status: OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::status
          }

        class FunctionCallOutput < OpenAI::Internal::Type::BaseModel
          attr_accessor call_id: String

          attr_accessor output: String

          attr_accessor type: :function_call_output

          attr_reader id: String?

          def id=: (String) -> String

          attr_reader status: OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::status?

          def status=: (
            OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::status
          ) -> OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::status

          def initialize: (
            call_id: String,
            output: String,
            ?id: String,
            ?status: OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::status,
            ?type: :function_call_output
          ) -> void

          def to_hash: -> OpenAI::Models::Responses::ResponseInputItem::function_call_output

          type status = :in_progress | :completed | :incomplete

          module Status
            extend OpenAI::Internal::Type::Enum

            IN_PROGRESS: :in_progress
            COMPLETED: :completed
            INCOMPLETE: :incomplete

            def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput::status]
          end
        end

        type item_reference = { id: String, type: :item_reference }

        class ItemReference < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor type: :item_reference

          def initialize: (id: String, ?type: :item_reference) -> void

          def to_hash: -> OpenAI::Models::Responses::ResponseInputItem::item_reference
        end

        def self?.variants: -> [OpenAI::Models::Responses::EasyInputMessage, OpenAI::Models::Responses::ResponseInputItem::Message, OpenAI::Models::Responses::ResponseOutputMessage, OpenAI::Models::Responses::ResponseFileSearchToolCall, OpenAI::Models::Responses::ResponseComputerToolCall, OpenAI::Models::Responses::ResponseInputItem::ComputerCallOutput, OpenAI::Models::Responses::ResponseFunctionWebSearch, OpenAI::Models::Responses::ResponseFunctionToolCall, OpenAI::Models::Responses::ResponseInputItem::FunctionCallOutput, OpenAI::Models::Responses::ResponseReasoningItem, OpenAI::Models::Responses::ResponseInputItem::ItemReference]
      end
    end
  end
end
