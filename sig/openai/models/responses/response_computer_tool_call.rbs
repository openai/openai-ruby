module OpenAI
  module Models
    module Responses
      type response_computer_tool_call =
        {
          id: String,
          action: OpenAI::Models::Responses::ResponseComputerToolCall::action,
          call_id: String,
          pending_safety_checks: ::Array[OpenAI::Responses::ResponseComputerToolCall::PendingSafetyCheck],
          status: OpenAI::Models::Responses::ResponseComputerToolCall::status,
          type: OpenAI::Models::Responses::ResponseComputerToolCall::type_
        }

      class ResponseComputerToolCall < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor action: OpenAI::Models::Responses::ResponseComputerToolCall::action

        attr_accessor call_id: String

        attr_accessor pending_safety_checks: ::Array[OpenAI::Responses::ResponseComputerToolCall::PendingSafetyCheck]

        attr_accessor status: OpenAI::Models::Responses::ResponseComputerToolCall::status

        attr_accessor type: OpenAI::Models::Responses::ResponseComputerToolCall::type_

        def initialize: (
          id: String,
          action: OpenAI::Models::Responses::ResponseComputerToolCall::action,
          call_id: String,
          pending_safety_checks: ::Array[OpenAI::Responses::ResponseComputerToolCall::PendingSafetyCheck],
          status: OpenAI::Models::Responses::ResponseComputerToolCall::status,
          type: OpenAI::Models::Responses::ResponseComputerToolCall::type_
        ) -> void

        def to_hash: -> {
          id: String,
          action: OpenAI::Models::Responses::ResponseComputerToolCall::action,
          call_id: String,
          pending_safety_checks: ::Array[OpenAI::Responses::ResponseComputerToolCall::PendingSafetyCheck],
          status: OpenAI::Models::Responses::ResponseComputerToolCall::status,
          type: OpenAI::Models::Responses::ResponseComputerToolCall::type_
        }

        type action =
          OpenAI::Responses::ResponseComputerToolCall::Action::Click
          | OpenAI::Responses::ResponseComputerToolCall::Action::DoubleClick
          | OpenAI::Responses::ResponseComputerToolCall::Action::Drag
          | OpenAI::Responses::ResponseComputerToolCall::Action::Keypress
          | OpenAI::Responses::ResponseComputerToolCall::Action::Move
          | OpenAI::Responses::ResponseComputerToolCall::Action::Screenshot
          | OpenAI::Responses::ResponseComputerToolCall::Action::Scroll
          | OpenAI::Responses::ResponseComputerToolCall::Action::Type
          | OpenAI::Responses::ResponseComputerToolCall::Action::Wait

        module Action
          extend OpenAI::Internal::Type::Union

          type click =
            {
              button: OpenAI::Models::Responses::ResponseComputerToolCall::Action::Click::button,
              type: :click,
              x: Integer,
              y_: Integer
            }

          class Click < OpenAI::Internal::Type::BaseModel
            attr_accessor button: OpenAI::Models::Responses::ResponseComputerToolCall::Action::Click::button

            attr_accessor type: :click

            attr_accessor x: Integer

            attr_accessor y_: Integer

            def initialize: (
              button: OpenAI::Models::Responses::ResponseComputerToolCall::Action::Click::button,
              x: Integer,
              y_: Integer,
              ?type: :click
            ) -> void

            def to_hash: -> {
              button: OpenAI::Models::Responses::ResponseComputerToolCall::Action::Click::button,
              type: :click,
              x: Integer,
              y_: Integer
            }

            type button = :left | :right | :wheel | :back | :forward

            module Button
              extend OpenAI::Internal::Type::Enum

              LEFT: :left
              RIGHT: :right
              WHEEL: :wheel
              BACK: :back
              FORWARD: :forward

              def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseComputerToolCall::Action::Click::button]
            end
          end

          type double_click = { type: :double_click, x: Integer, y_: Integer }

          class DoubleClick < OpenAI::Internal::Type::BaseModel
            attr_accessor type: :double_click

            attr_accessor x: Integer

            attr_accessor y_: Integer

            def initialize: (
              x: Integer,
              y_: Integer,
              ?type: :double_click
            ) -> void

            def to_hash: -> { type: :double_click, x: Integer, y_: Integer }
          end

          type drag =
            {
              path: ::Array[OpenAI::Responses::ResponseComputerToolCall::Action::Drag::Path],
              type: :drag
            }

          class Drag < OpenAI::Internal::Type::BaseModel
            attr_accessor path: ::Array[OpenAI::Responses::ResponseComputerToolCall::Action::Drag::Path]

            attr_accessor type: :drag

            def initialize: (
              path: ::Array[OpenAI::Responses::ResponseComputerToolCall::Action::Drag::Path],
              ?type: :drag
            ) -> void

            def to_hash: -> {
              path: ::Array[OpenAI::Responses::ResponseComputerToolCall::Action::Drag::Path],
              type: :drag
            }

            type path = { x: Integer, y_: Integer }

            class Path < OpenAI::Internal::Type::BaseModel
              attr_accessor x: Integer

              attr_accessor y_: Integer

              def initialize: (x: Integer, y_: Integer) -> void

              def to_hash: -> { x: Integer, y_: Integer }
            end
          end

          type keypress = { keys: ::Array[String], type: :keypress }

          class Keypress < OpenAI::Internal::Type::BaseModel
            attr_accessor keys: ::Array[String]

            attr_accessor type: :keypress

            def initialize: (keys: ::Array[String], ?type: :keypress) -> void

            def to_hash: -> { keys: ::Array[String], type: :keypress }
          end

          type move = { type: :move, x: Integer, y_: Integer }

          class Move < OpenAI::Internal::Type::BaseModel
            attr_accessor type: :move

            attr_accessor x: Integer

            attr_accessor y_: Integer

            def initialize: (x: Integer, y_: Integer, ?type: :move) -> void

            def to_hash: -> { type: :move, x: Integer, y_: Integer }
          end

          type screenshot = { type: :screenshot }

          class Screenshot < OpenAI::Internal::Type::BaseModel
            attr_accessor type: :screenshot

            def initialize: (?type: :screenshot) -> void

            def to_hash: -> { type: :screenshot }
          end

          type scroll =
            {
              scroll_x: Integer,
              scroll_y: Integer,
              type: :scroll,
              x: Integer,
              y_: Integer
            }

          class Scroll < OpenAI::Internal::Type::BaseModel
            attr_accessor scroll_x: Integer

            attr_accessor scroll_y: Integer

            attr_accessor type: :scroll

            attr_accessor x: Integer

            attr_accessor y_: Integer

            def initialize: (
              scroll_x: Integer,
              scroll_y: Integer,
              x: Integer,
              y_: Integer,
              ?type: :scroll
            ) -> void

            def to_hash: -> {
              scroll_x: Integer,
              scroll_y: Integer,
              type: :scroll,
              x: Integer,
              y_: Integer
            }
          end

          type type_ = { text: String, type: :type }

          class Type < OpenAI::Internal::Type::BaseModel
            attr_accessor text: String

            attr_accessor type: :type

            def initialize: (text: String, ?type: :type) -> void

            def to_hash: -> { text: String, type: :type }
          end

          type wait = { type: :wait }

          class Wait < OpenAI::Internal::Type::BaseModel
            attr_accessor type: :wait

            def initialize: (?type: :wait) -> void

            def to_hash: -> { type: :wait }
          end

          def self?.variants: -> ::Array[OpenAI::Models::Responses::ResponseComputerToolCall::action]
        end

        type pending_safety_check =
          { id: String, code: String?, message: String? }

        class PendingSafetyCheck < OpenAI::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor code: String?

          attr_accessor message: String?

          def initialize: (
            id: String,
            ?code: String?,
            ?message: String?
          ) -> void

          def to_hash: -> { id: String, code: String?, message: String? }
        end

        type status = :in_progress | :completed | :incomplete

        module Status
          extend OpenAI::Internal::Type::Enum

          IN_PROGRESS: :in_progress
          COMPLETED: :completed
          INCOMPLETE: :incomplete

          def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseComputerToolCall::status]
        end

        type type_ = :computer_call

        module Type
          extend OpenAI::Internal::Type::Enum

          COMPUTER_CALL: :computer_call

          def self?.values: -> ::Array[OpenAI::Models::Responses::ResponseComputerToolCall::type_]
        end
      end
    end
  end
end
