module OpenAI
  module Models
    
    class ChatCompletionChunk = Chat::ChatCompletionChunk

    module Chat
      type chat_completion_chunk =
        {
          id: String,
          choices: ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice],
          created: Integer,
          model: String,
          object: :"chat.completion.chunk",
          service_tier: OpenAI::Models::Chat::ChatCompletionChunk::service_tier?,
          system_fingerprint: String,
          usage: OpenAI::Models::CompletionUsage
        }

      class ChatCompletionChunk < OpenAI::BaseModel
        attr_accessor id: String

        attr_accessor choices: ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice]

        attr_accessor created: Integer

        attr_accessor model: String

        attr_accessor object: :"chat.completion.chunk"

        attr_accessor service_tier: OpenAI::Models::Chat::ChatCompletionChunk::service_tier?

        attr_reader system_fingerprint: String?

        def system_fingerprint=: (String) -> String

        attr_reader usage: OpenAI::Models::CompletionUsage?

        def usage=: (
          OpenAI::Models::CompletionUsage
        ) -> OpenAI::Models::CompletionUsage

        def initialize:
          (
            id: String,
            choices: ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice],
            created: Integer,
            model: String,
            service_tier: OpenAI::Models::Chat::ChatCompletionChunk::service_tier?,
            system_fingerprint: String,
            usage: OpenAI::Models::CompletionUsage,
            object: :"chat.completion.chunk"
          ) -> void
          | (
            ?OpenAI::Models::Chat::chat_completion_chunk
            | OpenAI::BaseModel data
          ) -> void

        def to_hash: -> OpenAI::Models::Chat::chat_completion_chunk

        type choice =
          {
            delta: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta,
            finish_reason: OpenAI::Models::Chat::ChatCompletionChunk::Choice::finish_reason?,
            index: Integer,
            logprobs: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Logprobs?
          }

        class Choice < OpenAI::BaseModel
          attr_accessor delta: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta

          attr_accessor finish_reason: OpenAI::Models::Chat::ChatCompletionChunk::Choice::finish_reason?

          attr_accessor index: Integer

          attr_accessor logprobs: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Logprobs?

          def initialize:
            (
              delta: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta,
              finish_reason: OpenAI::Models::Chat::ChatCompletionChunk::Choice::finish_reason?,
              index: Integer,
              logprobs: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Logprobs?
            ) -> void
            | (
              ?OpenAI::Models::Chat::ChatCompletionChunk::choice
              | OpenAI::BaseModel data
            ) -> void

          def to_hash: -> OpenAI::Models::Chat::ChatCompletionChunk::choice

          type delta =
            {
              content: String?,
              function_call: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::FunctionCall,
              refusal: String?,
              role: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::role,
              tool_calls: ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall]
            }

          class Delta < OpenAI::BaseModel
            attr_accessor content: String?

            attr_reader function_call: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::FunctionCall?

            def function_call=: (
              OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::FunctionCall
            ) -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::FunctionCall

            attr_accessor refusal: String?

            attr_reader role: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::role?

            def role=: (
              OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::role
            ) -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::role

            attr_reader tool_calls: ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall]?

            def tool_calls=: (
              ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall]
            ) -> ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall]

            def initialize:
              (
                content: String?,
                function_call: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::FunctionCall,
                refusal: String?,
                role: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::role,
                tool_calls: ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall]
              ) -> void
              | (
                ?OpenAI::Models::Chat::ChatCompletionChunk::Choice::delta
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::delta

            type function_call = { arguments: String, name: String }

            class FunctionCall < OpenAI::BaseModel
              attr_reader arguments: String?

              def arguments=: (String) -> String

              attr_reader name: String?

              def name=: (String) -> String

              def initialize:
                (arguments: String, name: String) -> void
                | (
                  ?OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::function_call
                  | OpenAI::BaseModel data
                ) -> void

              def to_hash: -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::function_call
            end

            type role = :developer | :system | :user | :assistant | :tool

            class Role < OpenAI::Enum
              DEVELOPER: :developer
              SYSTEM: :system
              USER: :user
              ASSISTANT: :assistant
              TOOL: :tool

              def self.values: -> ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::role]
            end

            type tool_call =
              {
                index: Integer,
                id: String,
                function: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::Function,
                type: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::type_
              }

            class ToolCall < OpenAI::BaseModel
              attr_accessor index: Integer

              attr_reader id: String?

              def id=: (String) -> String

              attr_reader function: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::Function?

              def function=: (
                OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::Function
              ) -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::Function

              attr_reader type: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::type_?

              def type=: (
                OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::type_
              ) -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::type_

              def initialize:
                (
                  index: Integer,
                  id: String,
                  function: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::Function,
                  type: OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::type_
                ) -> void
                | (
                  ?OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::tool_call
                  | OpenAI::BaseModel data
                ) -> void

              def to_hash: -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::tool_call

              type function = { arguments: String, name: String }

              class Function < OpenAI::BaseModel
                attr_reader arguments: String?

                def arguments=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                def initialize:
                  (arguments: String, name: String) -> void
                  | (
                    ?OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::function
                    | OpenAI::BaseModel data
                  ) -> void

                def to_hash: -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::function
              end

              type type_ = :function

              class Type < OpenAI::Enum
                FUNCTION: :function

                def self.values: -> ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::Delta::ToolCall::type_]
              end
            end
          end

          type finish_reason =
            :stop | :length | :tool_calls | :content_filter | :function_call

          class FinishReason < OpenAI::Enum
            STOP: :stop
            LENGTH: :length
            TOOL_CALLS: :tool_calls
            CONTENT_FILTER: :content_filter
            FUNCTION_CALL: :function_call

            def self.values: -> ::Array[OpenAI::Models::Chat::ChatCompletionChunk::Choice::finish_reason]
          end

          type logprobs =
            {
              content: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?,
              refusal: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?
            }

          class Logprobs < OpenAI::BaseModel
            attr_accessor content: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?

            attr_accessor refusal: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?

            def initialize:
              (
                content: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?,
                refusal: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?
              ) -> void
              | (
                ?OpenAI::Models::Chat::ChatCompletionChunk::Choice::logprobs
                | OpenAI::BaseModel data
              ) -> void

            def to_hash: -> OpenAI::Models::Chat::ChatCompletionChunk::Choice::logprobs
          end
        end

        type service_tier = :scale | :default

        class ServiceTier < OpenAI::Enum
          SCALE: :scale
          DEFAULT: :default

          def self.values: -> ::Array[OpenAI::Models::Chat::ChatCompletionChunk::service_tier]
        end
      end
    end
  end
end
