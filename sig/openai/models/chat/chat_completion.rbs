module OpenAI
  module Models
    class ChatCompletion = Chat::ChatCompletion

    module Chat
      type chat_completion =
        {
          id: String,
          choices: ::Array[OpenAI::Models::Chat::ChatCompletion::Choice],
          created: Integer,
          model: String,
          object: :"chat.completion",
          service_tier: OpenAI::Models::Chat::ChatCompletion::service_tier?,
          system_fingerprint: String,
          usage: OpenAI::Models::CompletionUsage
        }

      class ChatCompletion < OpenAI::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor choices: ::Array[OpenAI::Models::Chat::ChatCompletion::Choice]

        attr_accessor created: Integer

        attr_accessor model: String

        attr_accessor object: :"chat.completion"

        attr_accessor service_tier: OpenAI::Models::Chat::ChatCompletion::service_tier?

        attr_reader system_fingerprint: String?

        def system_fingerprint=: (String) -> String

        attr_reader usage: OpenAI::Models::CompletionUsage?

        def usage=: (
          OpenAI::Models::CompletionUsage
        ) -> OpenAI::Models::CompletionUsage

        def initialize: (
          id: String,
          choices: ::Array[OpenAI::Models::Chat::ChatCompletion::Choice],
          created: Integer,
          model: String,
          ?service_tier: OpenAI::Models::Chat::ChatCompletion::service_tier?,
          ?system_fingerprint: String,
          ?usage: OpenAI::Models::CompletionUsage,
          ?object: :"chat.completion"
        ) -> void

        def to_hash: -> OpenAI::Models::Chat::chat_completion

        type choice =
          {
            finish_reason: OpenAI::Models::Chat::ChatCompletion::Choice::finish_reason,
            index: Integer,
            logprobs: OpenAI::Models::Chat::ChatCompletion::Choice::Logprobs?,
            message: OpenAI::Models::Chat::ChatCompletionMessage
          }

        class Choice < OpenAI::Internal::Type::BaseModel
          attr_accessor finish_reason: OpenAI::Models::Chat::ChatCompletion::Choice::finish_reason

          attr_accessor index: Integer

          attr_accessor logprobs: OpenAI::Models::Chat::ChatCompletion::Choice::Logprobs?

          attr_accessor message: OpenAI::Models::Chat::ChatCompletionMessage

          def initialize: (
            finish_reason: OpenAI::Models::Chat::ChatCompletion::Choice::finish_reason,
            index: Integer,
            logprobs: OpenAI::Models::Chat::ChatCompletion::Choice::Logprobs?,
            message: OpenAI::Models::Chat::ChatCompletionMessage
          ) -> void

          def to_hash: -> OpenAI::Models::Chat::ChatCompletion::choice

          type finish_reason =
            :stop | :length | :tool_calls | :content_filter | :function_call

          module FinishReason
            extend OpenAI::Internal::Type::Enum

            STOP: :stop
            LENGTH: :length
            TOOL_CALLS: :tool_calls
            CONTENT_FILTER: :content_filter
            FUNCTION_CALL: :function_call

            def self?.values: -> ::Array[OpenAI::Models::Chat::ChatCompletion::Choice::finish_reason]
          end

          type logprobs =
            {
              content: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?,
              refusal: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?
            }

          class Logprobs < OpenAI::Internal::Type::BaseModel
            attr_accessor content: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?

            attr_accessor refusal: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?

            def initialize: (
              content: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?,
              refusal: ::Array[OpenAI::Models::Chat::ChatCompletionTokenLogprob]?
            ) -> void

            def to_hash: -> OpenAI::Models::Chat::ChatCompletion::Choice::logprobs
          end
        end

        type service_tier = :auto | :default | :flex

        module ServiceTier
          extend OpenAI::Internal::Type::Enum

          AUTO: :auto
          DEFAULT: :default
          FLEX: :flex

          def self?.values: -> ::Array[OpenAI::Models::Chat::ChatCompletion::service_tier]
        end
      end
    end
  end
end
