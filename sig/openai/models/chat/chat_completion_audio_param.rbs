module OpenAI
  module Models
    class ChatCompletionAudioParam = Chat::ChatCompletionAudioParam

    module Chat
      type chat_completion_audio_param =
        {
          format_: OpenAI::Models::Chat::ChatCompletionAudioParam::format_,
          voice: OpenAI::Models::Chat::ChatCompletionAudioParam::voice
        }

      class ChatCompletionAudioParam < OpenAI::Internal::Type::BaseModel
        attr_accessor format_: OpenAI::Models::Chat::ChatCompletionAudioParam::format_

        attr_accessor voice: OpenAI::Models::Chat::ChatCompletionAudioParam::voice

        def initialize: (
          format_: OpenAI::Models::Chat::ChatCompletionAudioParam::format_,
          voice: OpenAI::Models::Chat::ChatCompletionAudioParam::voice
        ) -> void

        def to_hash: -> OpenAI::Models::Chat::chat_completion_audio_param

        type format_ = :wav | :aac | :mp3 | :flac | :opus | :pcm16

        module Format
          extend OpenAI::Internal::Type::Enum

          WAV: :wav
          AAC: :aac
          MP3: :mp3
          FLAC: :flac
          OPUS: :opus
          PCM16: :pcm16

          def self?.values: -> ::Array[OpenAI::Models::Chat::ChatCompletionAudioParam::format_]
        end

        type voice =
          String
          | :alloy
          | :ash
          | :ballad
          | :coral
          | :echo
          | :fable
          | :onyx
          | :nova
          | :sage
          | :shimmer
          | :verse

        module Voice
          extend OpenAI::Internal::Type::Union

          def self?.variants: -> [String, (:alloy
          | :ash
          | :ballad
          | :coral
          | :echo
          | :fable
          | :onyx
          | :nova
          | :sage
          | :shimmer
          | :verse)]

          ALLOY: :alloy
          ASH: :ash
          BALLAD: :ballad
          CORAL: :coral
          ECHO: :echo
          FABLE: :fable
          ONYX: :onyx
          NOVA: :nova
          SAGE: :sage
          SHIMMER: :shimmer
          VERSE: :verse
        end
      end
    end
  end
end
