module OpenAI
  module Models
    class ChatCompletionAssistantMessageParam = Chat::ChatCompletionAssistantMessageParam

    module Chat
      type chat_completion_assistant_message_param =
        {
          role: :assistant,
          audio: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio?,
          content: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::content?,
          function_call: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall?,
          name: String,
          refusal: String?,
          tool_calls: ::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]
        }

      class ChatCompletionAssistantMessageParam < OpenAI::BaseModel
        attr_accessor role: :assistant

        attr_accessor audio: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio?

        attr_accessor content: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::content?

        attr_accessor function_call: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall?

        attr_reader name: String?

        def name=: (String) -> String

        attr_accessor refusal: String?

        attr_reader tool_calls: ::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]?

        def tool_calls=: (
          ::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]
        ) -> ::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]

        def initialize: (
          ?audio: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio?,
          ?content: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::content?,
          ?function_call: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall?,
          ?name: String,
          ?refusal: String?,
          ?tool_calls: ::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall],
          ?role: :assistant
        ) -> void

        def to_hash: -> OpenAI::Models::Chat::chat_completion_assistant_message_param

        type audio = { id: String }

        class Audio < OpenAI::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::audio
        end

        type content =
          String
          | ::Array[OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content::array_of_content_part]

        module Content
          extend OpenAI::Union

          type array_of_content_part_array =
            ::Array[OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content::array_of_content_part]

          ArrayOfContentPartArray: array_of_content_part_array

          type array_of_content_part =
            OpenAI::Models::Chat::ChatCompletionContentPartText
            | OpenAI::Models::Chat::ChatCompletionContentPartRefusal

          module ArrayOfContentPart
            extend OpenAI::Union

            def self.variants: -> [OpenAI::Models::Chat::ChatCompletionContentPartText, OpenAI::Models::Chat::ChatCompletionContentPartRefusal]
          end

          def self.variants: -> [String, ::Array[OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content::array_of_content_part]]
        end

        type function_call = { arguments: String, name: String }

        class FunctionCall < OpenAI::BaseModel
          attr_accessor arguments: String

          attr_accessor name: String

          def initialize: (arguments: String, name: String) -> void

          def to_hash: -> OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::function_call
        end
      end
    end
  end
end
