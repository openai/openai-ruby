module OpenAI
  module Models
    module Chat
      module Completions
        type message_list_params =
          {
            after: String,
            limit: Integer,
            order: OpenAI::Models::Chat::Completions::MessageListParams::order
          }
          & OpenAI::request_parameters

        class MessageListParams < OpenAI::BaseModel
          extend OpenAI::RequestParameters::Converter
          include OpenAI::RequestParameters

          attr_reader after: String?

          def after=: (String) -> String

          attr_reader limit: Integer?

          def limit=: (Integer) -> Integer

          attr_reader order: OpenAI::Models::Chat::Completions::MessageListParams::order?

          def order=: (
            OpenAI::Models::Chat::Completions::MessageListParams::order
          ) -> OpenAI::Models::Chat::Completions::MessageListParams::order

          def initialize: (
            ?after: String,
            ?limit: Integer,
            ?order: OpenAI::Models::Chat::Completions::MessageListParams::order,
            ?request_options: OpenAI::request_opts
          ) -> void

          def to_hash: -> OpenAI::Models::Chat::Completions::message_list_params

          type order = :asc | :desc

          class Order < OpenAI::Enum
            ASC: :asc
            DESC: :desc

            def self.values: -> ::Array[OpenAI::Models::Chat::Completions::MessageListParams::order]
          end
        end
      end
    end
  end
end
