module OpenAI
  module Resources
    class VectorStores
      class Files
        def create: (
          String vector_store_id,
          file_id: String,
          ?attributes: ::Hash[Symbol, OpenAI::Models::VectorStores::FileCreateParams::attribute]?,
          ?chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
          ?request_options: OpenAI::request_opts
        ) -> OpenAI::Models::VectorStores::VectorStoreFile

        def retrieve: (
          String file_id,
          vector_store_id: String,
          ?request_options: OpenAI::request_opts
        ) -> OpenAI::Models::VectorStores::VectorStoreFile

        def update: (
          String file_id,
          vector_store_id: String,
          attributes: ::Hash[Symbol, OpenAI::Models::VectorStores::FileUpdateParams::attribute]?,
          ?request_options: OpenAI::request_opts
        ) -> OpenAI::Models::VectorStores::VectorStoreFile

        def list: (
          String vector_store_id,
          ?after: String,
          ?before: String,
          ?filter: OpenAI::Models::VectorStores::FileListParams::filter,
          ?limit: Integer,
          ?order: OpenAI::Models::VectorStores::FileListParams::order,
          ?request_options: OpenAI::request_opts
        ) -> OpenAI::CursorPage[OpenAI::Models::VectorStores::VectorStoreFile]

        def delete: (
          String file_id,
          vector_store_id: String,
          ?request_options: OpenAI::request_opts
        ) -> OpenAI::Models::VectorStores::VectorStoreFileDeleted

        def content: (
          String file_id,
          vector_store_id: String,
          ?request_options: OpenAI::request_opts
        ) -> OpenAI::Page[OpenAI::Models::VectorStores::FileContentResponse]

        def initialize: (client: OpenAI::Client) -> void
      end
    end
  end
end
