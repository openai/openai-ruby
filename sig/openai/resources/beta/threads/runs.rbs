module OpenAI
  module Resources
    class Beta
      class Threads
        class Runs
          attr_reader steps: OpenAI::Resources::Beta::Threads::Runs::Steps

          def create: (
            String thread_id,
            assistant_id: String,
            ?include: ::Array[OpenAI::Models::Beta::Threads::Runs::run_step_include],
            ?additional_instructions: String?,
            ?additional_messages: ::Array[OpenAI::Models::Beta::Threads::RunCreateParams::AdditionalMessage]?,
            ?instructions: String?,
            ?max_completion_tokens: Integer?,
            ?max_prompt_tokens: Integer?,
            ?metadata: OpenAI::Models::metadata?,
            ?model: OpenAI::Models::Beta::Threads::RunCreateParams::model?,
            ?parallel_tool_calls: bool,
            ?reasoning_effort: OpenAI::Models::reasoning_effort?,
            ?response_format: OpenAI::Models::Beta::assistant_response_format_option?,
            ?temperature: Float?,
            ?tool_choice: OpenAI::Models::Beta::assistant_tool_choice_option?,
            ?tools: ::Array[OpenAI::Models::Beta::assistant_tool]?,
            ?top_p: Float?,
            ?truncation_strategy: OpenAI::Models::Beta::Threads::RunCreateParams::TruncationStrategy?,
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Models::Beta::Threads::Run

          def stream_raw: (
            String thread_id,
            assistant_id: String,
            ?include: ::Array[OpenAI::Models::Beta::Threads::Runs::run_step_include],
            ?additional_instructions: String?,
            ?additional_messages: ::Array[OpenAI::Models::Beta::Threads::RunCreateParams::AdditionalMessage]?,
            ?instructions: String?,
            ?max_completion_tokens: Integer?,
            ?max_prompt_tokens: Integer?,
            ?metadata: OpenAI::Models::metadata?,
            ?model: OpenAI::Models::Beta::Threads::RunCreateParams::model?,
            ?parallel_tool_calls: bool,
            ?reasoning_effort: OpenAI::Models::reasoning_effort?,
            ?response_format: OpenAI::Models::Beta::assistant_response_format_option?,
            ?temperature: Float?,
            ?tool_choice: OpenAI::Models::Beta::assistant_tool_choice_option?,
            ?tools: ::Array[OpenAI::Models::Beta::assistant_tool]?,
            ?top_p: Float?,
            ?truncation_strategy: OpenAI::Models::Beta::Threads::RunCreateParams::TruncationStrategy?,
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Stream[OpenAI::Models::Beta::assistant_stream_event]

          def retrieve: (
            String run_id,
            thread_id: String,
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Models::Beta::Threads::Run

          def update: (
            String run_id,
            thread_id: String,
            ?metadata: OpenAI::Models::metadata?,
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Models::Beta::Threads::Run

          def list: (
            String thread_id,
            ?after: String,
            ?before: String,
            ?limit: Integer,
            ?order: OpenAI::Models::Beta::Threads::RunListParams::order,
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::CursorPage[OpenAI::Models::Beta::Threads::Run]

          def cancel: (
            String run_id,
            thread_id: String,
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Models::Beta::Threads::Run

          def submit_tool_outputs: (
            String run_id,
            thread_id: String,
            tool_outputs: ::Array[OpenAI::Models::Beta::Threads::RunSubmitToolOutputsParams::ToolOutput],
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Models::Beta::Threads::Run

          def submit_stream_raw: (
            String run_id,
            thread_id: String,
            tool_outputs: ::Array[OpenAI::Models::Beta::Threads::RunSubmitToolOutputsParams::ToolOutput],
            ?request_options: OpenAI::request_opts
          ) -> OpenAI::Stream[OpenAI::Models::Beta::assistant_stream_event]

          def initialize: (client: OpenAI::Client) -> void
        end
      end
    end
  end
end
