module OpenAI
  module Resources
    class Chat
      class Completions
        def create:
          (
            OpenAI::Models::Chat::CompletionCreateParams
            | ::Hash[Symbol, top] params
          ) -> OpenAI::Models::Chat::ChatCompletion
          | (
            messages: ::Array[OpenAI::Models::Chat::chat_completion_message_param],
            model: OpenAI::Models::Chat::CompletionCreateParams::model,
            audio: OpenAI::Models::Chat::ChatCompletionAudioParam?,
            frequency_penalty: Float?,
            function_call: OpenAI::Models::Chat::CompletionCreateParams::function_call,
            functions: ::Array[OpenAI::Models::Chat::CompletionCreateParams::Function],
            logit_bias: ::Hash[Symbol, Integer]?,
            logprobs: bool?,
            max_completion_tokens: Integer?,
            max_tokens: Integer?,
            metadata: OpenAI::Models::metadata?,
            modalities: ::Array[OpenAI::Models::Chat::chat_completion_modality]?,
            n: Integer?,
            parallel_tool_calls: bool,
            prediction: OpenAI::Models::Chat::ChatCompletionPredictionContent?,
            presence_penalty: Float?,
            reasoning_effort: OpenAI::Models::Chat::chat_completion_reasoning_effort?,
            response_format: OpenAI::Models::Chat::CompletionCreateParams::response_format,
            seed: Integer?,
            service_tier: OpenAI::Models::Chat::CompletionCreateParams::service_tier?,
            stop: OpenAI::Models::Chat::CompletionCreateParams::stop?,
            store: bool?,
            stream_options: OpenAI::Models::Chat::ChatCompletionStreamOptions?,
            temperature: Float?,
            tool_choice: OpenAI::Models::Chat::chat_completion_tool_choice_option,
            tools: ::Array[OpenAI::Models::Chat::ChatCompletionTool],
            top_logprobs: Integer?,
            top_p: Float?,
            user: String,
            request_options: OpenAI::request_opts
          ) -> OpenAI::Models::Chat::ChatCompletion

        def create_streaming:
          (
            OpenAI::Models::Chat::CompletionCreateParams
            | ::Hash[Symbol, top] params
          ) -> OpenAI::Stream[OpenAI::Models::Chat::ChatCompletionChunk]
          | (
            messages: ::Array[OpenAI::Models::Chat::chat_completion_message_param],
            model: OpenAI::Models::Chat::CompletionCreateParams::model,
            audio: OpenAI::Models::Chat::ChatCompletionAudioParam?,
            frequency_penalty: Float?,
            function_call: OpenAI::Models::Chat::CompletionCreateParams::function_call,
            functions: ::Array[OpenAI::Models::Chat::CompletionCreateParams::Function],
            logit_bias: ::Hash[Symbol, Integer]?,
            logprobs: bool?,
            max_completion_tokens: Integer?,
            max_tokens: Integer?,
            metadata: OpenAI::Models::metadata?,
            modalities: ::Array[OpenAI::Models::Chat::chat_completion_modality]?,
            n: Integer?,
            parallel_tool_calls: bool,
            prediction: OpenAI::Models::Chat::ChatCompletionPredictionContent?,
            presence_penalty: Float?,
            reasoning_effort: OpenAI::Models::Chat::chat_completion_reasoning_effort?,
            response_format: OpenAI::Models::Chat::CompletionCreateParams::response_format,
            seed: Integer?,
            service_tier: OpenAI::Models::Chat::CompletionCreateParams::service_tier?,
            stop: OpenAI::Models::Chat::CompletionCreateParams::stop?,
            store: bool?,
            stream_options: OpenAI::Models::Chat::ChatCompletionStreamOptions?,
            temperature: Float?,
            tool_choice: OpenAI::Models::Chat::chat_completion_tool_choice_option,
            tools: ::Array[OpenAI::Models::Chat::ChatCompletionTool],
            top_logprobs: Integer?,
            top_p: Float?,
            user: String,
            request_options: OpenAI::request_opts
          ) -> OpenAI::Stream[OpenAI::Models::Chat::ChatCompletionChunk]

        def initialize: (client: OpenAI::Client) -> void
      end
    end
  end
end
