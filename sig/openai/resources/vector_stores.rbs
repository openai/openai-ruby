module OpenAI
  module Resources
    class VectorStores
      attr_reader files: OpenAI::Resources::VectorStores::Files

      attr_reader file_batches: OpenAI::Resources::VectorStores::FileBatches

      def create: (
        ?chunking_strategy: OpenAI::Models::file_chunking_strategy_param,
        ?expires_after: OpenAI::Models::VectorStoreCreateParams::ExpiresAfter,
        ?file_ids: ::Array[String],
        ?metadata: OpenAI::Models::metadata?,
        ?name: String,
        ?request_options: OpenAI::request_opts
      ) -> OpenAI::Models::VectorStore

      def retrieve: (
        String vector_store_id,
        ?request_options: OpenAI::request_opts
      ) -> OpenAI::Models::VectorStore

      def update: (
        String vector_store_id,
        ?expires_after: OpenAI::Models::VectorStoreUpdateParams::ExpiresAfter?,
        ?metadata: OpenAI::Models::metadata?,
        ?name: String?,
        ?request_options: OpenAI::request_opts
      ) -> OpenAI::Models::VectorStore

      def list: (
        ?after: String,
        ?before: String,
        ?limit: Integer,
        ?order: OpenAI::Models::VectorStoreListParams::order,
        ?request_options: OpenAI::request_opts
      ) -> OpenAI::CursorPage[OpenAI::Models::VectorStore]

      def delete: (
        String vector_store_id,
        ?request_options: OpenAI::request_opts
      ) -> OpenAI::Models::VectorStoreDeleted

      def search: (
        String vector_store_id,
        query: OpenAI::Models::VectorStoreSearchParams::query,
        ?filters: OpenAI::Models::VectorStoreSearchParams::filters,
        ?max_num_results: Integer,
        ?ranking_options: OpenAI::Models::VectorStoreSearchParams::RankingOptions,
        ?rewrite_query: bool,
        ?request_options: OpenAI::request_opts
      ) -> OpenAI::Page[OpenAI::Models::VectorStoreSearchResponse]

      def initialize: (client: OpenAI::Client) -> void
    end
  end
end
