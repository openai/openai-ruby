# typed: strong

module OpenAI
  module Resources
    class Beta
      class Threads
        class Messages
          # Create a message.
          sig do
            params(
              thread_id: String,
              content: T.any(
                String,
                T::Array[
                T.any(
                  OpenAI::Models::Beta::Threads::ImageFileContentBlock,
                  OpenAI::Util::AnyHash,
                  OpenAI::Models::Beta::Threads::ImageURLContentBlock,
                  OpenAI::Models::Beta::Threads::TextContentBlockParam
                )
                ]
              ),
              role: OpenAI::Models::Beta::Threads::MessageCreateParams::Role::OrSymbol,
              attachments: T.nilable(
                T::Array[T.any(OpenAI::Models::Beta::Threads::MessageCreateParams::Attachment, OpenAI::Util::AnyHash)]
              ),
              metadata: T.nilable(T::Hash[Symbol, String]),
              request_options: T.nilable(T.any(OpenAI::RequestOptions, OpenAI::Util::AnyHash))
            )
              .returns(OpenAI::Models::Beta::Threads::Message)
          end
          def create(
            # The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)
            #   to create a message for.
            thread_id,
            # The text contents of the message.
            content:,
            # The role of the entity that is creating the message. Allowed values include:
            #
            #   - `user`: Indicates the message is sent by an actual user and should be used in
            #     most cases to represent user-generated messages.
            #   - `assistant`: Indicates the message is generated by the assistant. Use this
            #     value to insert messages from the assistant into the conversation.
            role:,
            # A list of files attached to the message, and the tools they should be added to.
            attachments: nil,
            # Set of 16 key-value pairs that can be attached to an object. This can be useful
            #   for storing additional information about the object in a structured format, and
            #   querying for objects via API or the dashboard.
            #
            #   Keys are strings with a maximum length of 64 characters. Values are strings with
            #   a maximum length of 512 characters.
            metadata: nil,
            request_options: {}
          )
          end

          # Retrieve a message.
          sig do
            params(
              message_id: String,
              thread_id: String,
              request_options: T.nilable(T.any(OpenAI::RequestOptions, OpenAI::Util::AnyHash))
            )
              .returns(OpenAI::Models::Beta::Threads::Message)
          end
          def retrieve(
            # The ID of the message to retrieve.
            message_id,
            # The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)
            #   to which this message belongs.
            thread_id:,
            request_options: {}
          )
          end

          # Modifies a message.
          sig do
            params(
              message_id: String,
              thread_id: String,
              metadata: T.nilable(T::Hash[Symbol, String]),
              request_options: T.nilable(T.any(OpenAI::RequestOptions, OpenAI::Util::AnyHash))
            )
              .returns(OpenAI::Models::Beta::Threads::Message)
          end
          def update(
            # Path param: The ID of the message to modify.
            message_id,
            # Path param: The ID of the thread to which this message belongs.
            thread_id:,
            # Body param: Set of 16 key-value pairs that can be attached to an object. This
            #   can be useful for storing additional information about the object in a
            #   structured format, and querying for objects via API or the dashboard.
            #
            #   Keys are strings with a maximum length of 64 characters. Values are strings with
            #   a maximum length of 512 characters.
            metadata: nil,
            request_options: {}
          )
          end

          # Returns a list of messages for a given thread.
          sig do
            params(
              thread_id: String,
              after: String,
              before: String,
              limit: Integer,
              order: OpenAI::Models::Beta::Threads::MessageListParams::Order::OrSymbol,
              run_id: String,
              request_options: T.nilable(T.any(OpenAI::RequestOptions, OpenAI::Util::AnyHash))
            )
              .returns(OpenAI::CursorPage[OpenAI::Models::Beta::Threads::Message])
          end
          def list(
            # The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)
            #   the messages belong to.
            thread_id,
            # A cursor for use in pagination. `after` is an object ID that defines your place
            #   in the list. For instance, if you make a list request and receive 100 objects,
            #   ending with obj_foo, your subsequent call can include after=obj_foo in order to
            #   fetch the next page of the list.
            after: nil,
            # A cursor for use in pagination. `before` is an object ID that defines your place
            #   in the list. For instance, if you make a list request and receive 100 objects,
            #   starting with obj_foo, your subsequent call can include before=obj_foo in order
            #   to fetch the previous page of the list.
            before: nil,
            # A limit on the number of objects to be returned. Limit can range between 1 and
            #   100, and the default is 20.
            limit: nil,
            # Sort order by the `created_at` timestamp of the objects. `asc` for ascending
            #   order and `desc` for descending order.
            order: nil,
            # Filter messages by the run ID that generated them.
            run_id: nil,
            request_options: {}
          )
          end

          # Deletes a message.
          sig do
            params(
              message_id: String,
              thread_id: String,
              request_options: T.nilable(T.any(OpenAI::RequestOptions, OpenAI::Util::AnyHash))
            )
              .returns(OpenAI::Models::Beta::Threads::MessageDeleted)
          end
          def delete(
            # The ID of the message to delete.
            message_id,
            # The ID of the thread to which this message belongs.
            thread_id:,
            request_options: {}
          )
          end

          # @api private
          sig { params(client: OpenAI::Client).returns(T.attached_class) }
          def self.new(client:)
          end
        end
      end
    end
  end
end
