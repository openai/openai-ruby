# typed: strong

module OpenAI
  module Models
    class CreateEmbeddingResponse < OpenAI::Internal::Type::BaseModel
      # The list of embeddings generated by the model.
      sig { returns(T::Array[OpenAI::Models::Embedding]) }
      attr_accessor :data

      # The name of the model used to generate the embedding.
      sig { returns(String) }
      attr_accessor :model

      # The object type, which is always "list".
      sig { returns(Symbol) }
      attr_accessor :object

      # The usage information for the request.
      sig { returns(OpenAI::Models::CreateEmbeddingResponse::Usage) }
      attr_reader :usage

      sig { params(usage: T.any(OpenAI::Models::CreateEmbeddingResponse::Usage, OpenAI::Internal::AnyHash)).void }
      attr_writer :usage

      sig do
        params(
          data: T::Array[T.any(OpenAI::Models::Embedding, OpenAI::Internal::AnyHash)],
          model: String,
          usage: T.any(OpenAI::Models::CreateEmbeddingResponse::Usage, OpenAI::Internal::AnyHash),
          object: Symbol
        )
          .returns(T.attached_class)
      end
      def self.new(data:, model:, usage:, object: :list); end

      sig do
        override
          .returns(
            {
              data: T::Array[OpenAI::Models::Embedding],
              model: String,
              object: Symbol,
              usage: OpenAI::Models::CreateEmbeddingResponse::Usage
            }
          )
      end
      def to_hash; end

      class Usage < OpenAI::Internal::Type::BaseModel
        # The number of tokens used by the prompt.
        sig { returns(Integer) }
        attr_accessor :prompt_tokens

        # The total number of tokens used by the request.
        sig { returns(Integer) }
        attr_accessor :total_tokens

        # The usage information for the request.
        sig { params(prompt_tokens: Integer, total_tokens: Integer).returns(T.attached_class) }
        def self.new(prompt_tokens:, total_tokens:); end

        sig { override.returns({prompt_tokens: Integer, total_tokens: Integer}) }
        def to_hash; end
      end
    end
  end
end
