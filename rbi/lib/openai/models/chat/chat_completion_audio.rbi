# typed: strong

module OpenAI
  module Models
    ChatCompletionAudio = T.type_alias { Chat::ChatCompletionAudio }

    module Chat
      class ChatCompletionAudio < OpenAI::BaseModel
        # Unique identifier for this audio response.
        sig { returns(String) }
        def id
        end

        sig { params(_: String).returns(String) }
        def id=(_)
        end

        # Base64 encoded audio bytes generated by the model, in the format specified in
        #   the request.
        sig { returns(String) }
        def data
        end

        sig { params(_: String).returns(String) }
        def data=(_)
        end

        # The Unix timestamp (in seconds) for when this audio response will no longer be
        #   accessible on the server for use in multi-turn conversations.
        sig { returns(Integer) }
        def expires_at
        end

        sig { params(_: Integer).returns(Integer) }
        def expires_at=(_)
        end

        # Transcript of the audio generated by the model.
        sig { returns(String) }
        def transcript
        end

        sig { params(_: String).returns(String) }
        def transcript=(_)
        end

        # If the audio output modality is requested, this object contains data about the
        #   audio response from the model.
        #   [Learn more](https://platform.openai.com/docs/guides/audio).
        sig do
          params(id: String, data: String, expires_at: Integer, transcript: String).returns(T.attached_class)
        end
        def self.new(id:, data:, expires_at:, transcript:)
        end

        sig { override.returns({id: String, data: String, expires_at: Integer, transcript: String}) }
        def to_hash
        end
      end
    end
  end
end
