# typed: strong

module OpenAI
  module Models
    module Chat
      class ChatCompletionAssistantMessageParam < OpenAI::BaseModel
        # The role of the messages author, in this case `assistant`.
        sig { returns(Symbol) }
        attr_accessor :role

        # Data about a previous audio response from the model.
        #   [Learn more](https://platform.openai.com/docs/guides/audio).
        sig { returns(T.nilable(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio)) }
        attr_reader :audio

        sig do
          params(
            audio: T.nilable(T.any(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio, OpenAI::Util::AnyHash))
          )
            .void
        end
        attr_writer :audio

        # The contents of the assistant message. Required unless `tool_calls` or
        #   `function_call` is specified.
        sig do
          returns(
            T.nilable(
              T.any(
                String,
                T::Array[
                T.any(
                  OpenAI::Models::Chat::ChatCompletionContentPartText,
                  OpenAI::Models::Chat::ChatCompletionContentPartRefusal
                )
                ]
              )
            )
          )
        end
        attr_accessor :content

        # Deprecated and replaced by `tool_calls`. The name and arguments of a function
        #   that should be called, as generated by the model.
        sig { returns(T.nilable(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall)) }
        attr_reader :function_call

        sig do
          params(
            function_call: T.nilable(
              T.any(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall, OpenAI::Util::AnyHash)
            )
          )
            .void
        end
        attr_writer :function_call

        # An optional name for the participant. Provides the model information to
        #   differentiate between participants of the same role.
        sig { returns(T.nilable(String)) }
        attr_reader :name

        sig { params(name: String).void }
        attr_writer :name

        # The refusal message by the assistant.
        sig { returns(T.nilable(String)) }
        attr_accessor :refusal

        # The tool calls generated by the model, such as function calls.
        sig { returns(T.nilable(T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall])) }
        attr_reader :tool_calls

        sig do
          params(
            tool_calls: T::Array[T.any(OpenAI::Models::Chat::ChatCompletionMessageToolCall, OpenAI::Util::AnyHash)]
          )
            .void
        end
        attr_writer :tool_calls

        # Messages sent by the model in response to user messages.
        sig do
          params(
            audio: T.nilable(T.any(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio, OpenAI::Util::AnyHash)),
            content: T.nilable(
              T.any(
                String,
                T::Array[
                T.any(
                  OpenAI::Models::Chat::ChatCompletionContentPartText,
                  OpenAI::Util::AnyHash,
                  OpenAI::Models::Chat::ChatCompletionContentPartRefusal
                )
                ]
              )
            ),
            function_call: T.nilable(
              T.any(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall, OpenAI::Util::AnyHash)
            ),
            name: String,
            refusal: T.nilable(String),
            tool_calls: T::Array[T.any(OpenAI::Models::Chat::ChatCompletionMessageToolCall, OpenAI::Util::AnyHash)],
            role: Symbol
          )
            .returns(T.attached_class)
        end
        def self.new(
          audio: nil,
          content: nil,
          function_call: nil,
          name: nil,
          refusal: nil,
          tool_calls: nil,
          role: :assistant
        )
        end

        sig do
          override
            .returns(
              {
                role: Symbol,
                audio: T.nilable(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Audio),
                content: T.nilable(
                  T.any(
                    String,
                    T::Array[
                    T.any(
                      OpenAI::Models::Chat::ChatCompletionContentPartText,
                      OpenAI::Models::Chat::ChatCompletionContentPartRefusal
                    )
                    ]
                  )
                ),
                function_call: T.nilable(OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::FunctionCall),
                name: String,
                refusal: T.nilable(String),
                tool_calls: T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]
              }
            )
        end
        def to_hash
        end

        class Audio < OpenAI::BaseModel
          # Unique identifier for a previous audio response from the model.
          sig { returns(String) }
          attr_accessor :id

          # Data about a previous audio response from the model.
          #   [Learn more](https://platform.openai.com/docs/guides/audio).
          sig { params(id: String).returns(T.attached_class) }
          def self.new(id:)
          end

          sig { override.returns({id: String}) }
          def to_hash
          end
        end

        # The contents of the assistant message. Required unless `tool_calls` or
        #   `function_call` is specified.
        module Content
          extend OpenAI::Union

          # Learn about
          #   [text inputs](https://platform.openai.com/docs/guides/text-generation).
          module ArrayOfContentPart
            extend OpenAI::Union

            sig do
              override
                .returns(
                  [OpenAI::Models::Chat::ChatCompletionContentPartText, OpenAI::Models::Chat::ChatCompletionContentPartRefusal]
                )
            end
            def self.variants
            end
          end

          sig do
            override
              .returns(
                [
                  String,
                  T::Array[
                                  T.any(
                                    OpenAI::Models::Chat::ChatCompletionContentPartText,
                                    OpenAI::Models::Chat::ChatCompletionContentPartRefusal
                                  )
                                  ]
                ]
              )
          end
          def self.variants
          end

          ArrayOfContentPartArray =
            T.let(
              OpenAI::ArrayOf[union: OpenAI::Models::Chat::ChatCompletionAssistantMessageParam::Content::ArrayOfContentPart],
              OpenAI::Type::Converter
            )
        end

        class FunctionCall < OpenAI::BaseModel
          # The arguments to call the function with, as generated by the model in JSON
          #   format. Note that the model does not always generate valid JSON, and may
          #   hallucinate parameters not defined by your function schema. Validate the
          #   arguments in your code before calling your function.
          sig { returns(String) }
          attr_accessor :arguments

          # The name of the function to call.
          sig { returns(String) }
          attr_accessor :name

          # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          #   that should be called, as generated by the model.
          sig { params(arguments: String, name: String).returns(T.attached_class) }
          def self.new(arguments:, name:)
          end

          sig { override.returns({arguments: String, name: String}) }
          def to_hash
          end
        end
      end
    end

    ChatCompletionAssistantMessageParam = Chat::ChatCompletionAssistantMessageParam
  end
end
