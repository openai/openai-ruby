# typed: strong

module OpenAI
  module Models
    ChatCompletionMessage = T.type_alias { Chat::ChatCompletionMessage }

    module Chat
      class ChatCompletionMessage < OpenAI::BaseModel
        # The contents of the message.
        sig { returns(T.nilable(String)) }
        def content
        end

        sig { params(_: T.nilable(String)).returns(T.nilable(String)) }
        def content=(_)
        end

        # The refusal message generated by the model.
        sig { returns(T.nilable(String)) }
        def refusal
        end

        sig { params(_: T.nilable(String)).returns(T.nilable(String)) }
        def refusal=(_)
        end

        # The role of the author of this message.
        sig { returns(Symbol) }
        def role
        end

        sig { params(_: Symbol).returns(Symbol) }
        def role=(_)
        end

        # If the audio output modality is requested, this object contains data about the
        #   audio response from the model.
        #   [Learn more](https://platform.openai.com/docs/guides/audio).
        sig { returns(T.nilable(OpenAI::Models::Chat::ChatCompletionAudio)) }
        def audio
        end

        sig do
          params(_: T.nilable(OpenAI::Models::Chat::ChatCompletionAudio))
            .returns(T.nilable(OpenAI::Models::Chat::ChatCompletionAudio))
        end
        def audio=(_)
        end

        # Deprecated and replaced by `tool_calls`. The name and arguments of a function
        #   that should be called, as generated by the model.
        sig { returns(T.nilable(OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall)) }
        def function_call
        end

        sig do
          params(_: OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall)
            .returns(OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall)
        end
        def function_call=(_)
        end

        # The tool calls generated by the model, such as function calls.
        sig { returns(T.nilable(T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall])) }
        def tool_calls
        end

        sig do
          params(_: T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall])
            .returns(T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall])
        end
        def tool_calls=(_)
        end

        # A chat completion message generated by the model.
        sig do
          params(
            content: T.nilable(String),
            refusal: T.nilable(String),
            audio: T.nilable(OpenAI::Models::Chat::ChatCompletionAudio),
            function_call: OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall,
            tool_calls: T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall],
            role: Symbol
          )
            .returns(T.attached_class)
        end
        def self.new(content:, refusal:, audio: nil, function_call: nil, tool_calls: nil, role: :assistant)
        end

        sig do
          override
            .returns(
              {
                content: T.nilable(String),
                refusal: T.nilable(String),
                role: Symbol,
                audio: T.nilable(OpenAI::Models::Chat::ChatCompletionAudio),
                function_call: OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall,
                tool_calls: T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]
              }
            )
        end
        def to_hash
        end

        class FunctionCall < OpenAI::BaseModel
          # The arguments to call the function with, as generated by the model in JSON
          #   format. Note that the model does not always generate valid JSON, and may
          #   hallucinate parameters not defined by your function schema. Validate the
          #   arguments in your code before calling your function.
          sig { returns(String) }
          def arguments
          end

          sig { params(_: String).returns(String) }
          def arguments=(_)
          end

          # The name of the function to call.
          sig { returns(String) }
          def name
          end

          sig { params(_: String).returns(String) }
          def name=(_)
          end

          # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          #   that should be called, as generated by the model.
          sig { params(arguments: String, name: String).returns(T.attached_class) }
          def self.new(arguments:, name:)
          end

          sig { override.returns({arguments: String, name: String}) }
          def to_hash
          end
        end
      end
    end
  end
end
