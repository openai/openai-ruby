# typed: strong

module OpenAI
  module Models
    module Chat
      class ChatCompletionMessage < OpenAI::Internal::Type::BaseModel
        # The contents of the message.
        sig { returns(T.nilable(String)) }
        attr_accessor :content

        # The refusal message generated by the model.
        sig { returns(T.nilable(String)) }
        attr_accessor :refusal

        # The role of the author of this message.
        sig { returns(Symbol) }
        attr_accessor :role

        # Annotations for the message, when applicable, as when using the
        # [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
        sig { returns(T.nilable(T::Array[OpenAI::Models::Chat::ChatCompletionMessage::Annotation])) }
        attr_reader :annotations

        sig do
          params(
            annotations: T::Array[T.any(OpenAI::Models::Chat::ChatCompletionMessage::Annotation, OpenAI::Internal::AnyHash)]
          )
            .void
        end
        attr_writer :annotations

        # If the audio output modality is requested, this object contains data about the
        # audio response from the model.
        # [Learn more](https://platform.openai.com/docs/guides/audio).
        sig { returns(T.nilable(OpenAI::Models::Chat::ChatCompletionAudio)) }
        attr_reader :audio

        sig { params(audio: T.nilable(T.any(OpenAI::Models::Chat::ChatCompletionAudio, OpenAI::Internal::AnyHash))).void }
        attr_writer :audio

        # Deprecated and replaced by `tool_calls`. The name and arguments of a function
        # that should be called, as generated by the model.
        sig { returns(T.nilable(OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall)) }
        attr_reader :function_call

        sig do
          params(
            function_call: T.any(OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall, OpenAI::Internal::AnyHash)
          )
            .void
        end
        attr_writer :function_call

        # The tool calls generated by the model, such as function calls.
        sig { returns(T.nilable(T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall])) }
        attr_reader :tool_calls

        sig do
          params(
            tool_calls: T::Array[T.any(OpenAI::Models::Chat::ChatCompletionMessageToolCall, OpenAI::Internal::AnyHash)]
          )
            .void
        end
        attr_writer :tool_calls

        # A chat completion message generated by the model.
        sig do
          params(
            content: T.nilable(String),
            refusal: T.nilable(String),
            annotations: T::Array[T.any(OpenAI::Models::Chat::ChatCompletionMessage::Annotation, OpenAI::Internal::AnyHash)],
            audio: T.nilable(T.any(OpenAI::Models::Chat::ChatCompletionAudio, OpenAI::Internal::AnyHash)),
            function_call: T.any(OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall, OpenAI::Internal::AnyHash),
            tool_calls: T::Array[T.any(OpenAI::Models::Chat::ChatCompletionMessageToolCall, OpenAI::Internal::AnyHash)],
            role: Symbol
          )
            .returns(T.attached_class)
        end
        def self.new(
          content:,
          refusal:,
          annotations: nil,
          audio: nil,
          function_call: nil,
          tool_calls: nil,
          role: :assistant
        )
        end

        sig do
          override
            .returns(
              {
                content: T.nilable(String),
                refusal: T.nilable(String),
                role: Symbol,
                annotations: T::Array[OpenAI::Models::Chat::ChatCompletionMessage::Annotation],
                audio: T.nilable(OpenAI::Models::Chat::ChatCompletionAudio),
                function_call: OpenAI::Models::Chat::ChatCompletionMessage::FunctionCall,
                tool_calls: T::Array[OpenAI::Models::Chat::ChatCompletionMessageToolCall]
              }
            )
        end
        def to_hash; end

        class Annotation < OpenAI::Internal::Type::BaseModel
          # The type of the URL citation. Always `url_citation`.
          sig { returns(Symbol) }
          attr_accessor :type

          # A URL citation when using web search.
          sig { returns(OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation) }
          attr_reader :url_citation

          sig do
            params(
              url_citation: T.any(OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation, OpenAI::Internal::AnyHash)
            )
              .void
          end
          attr_writer :url_citation

          # A URL citation when using web search.
          sig do
            params(
              url_citation: T.any(OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation, OpenAI::Internal::AnyHash),
              type: Symbol
            )
              .returns(T.attached_class)
          end
          def self.new(url_citation:, type: :url_citation); end

          sig do
            override
              .returns(
                {type: Symbol, url_citation: OpenAI::Models::Chat::ChatCompletionMessage::Annotation::URLCitation}
              )
          end
          def to_hash; end

          class URLCitation < OpenAI::Internal::Type::BaseModel
            # The index of the last character of the URL citation in the message.
            sig { returns(Integer) }
            attr_accessor :end_index

            # The index of the first character of the URL citation in the message.
            sig { returns(Integer) }
            attr_accessor :start_index

            # The title of the web resource.
            sig { returns(String) }
            attr_accessor :title

            # The URL of the web resource.
            sig { returns(String) }
            attr_accessor :url

            # A URL citation when using web search.
            sig do
              params(
                end_index: Integer,
                start_index: Integer,
                title: String,
                url: String
              ).returns(T.attached_class)
            end
            def self.new(end_index:, start_index:, title:, url:); end

            sig { override.returns({end_index: Integer, start_index: Integer, title: String, url: String}) }
            def to_hash; end
          end
        end

        class FunctionCall < OpenAI::Internal::Type::BaseModel
          # The arguments to call the function with, as generated by the model in JSON
          # format. Note that the model does not always generate valid JSON, and may
          # hallucinate parameters not defined by your function schema. Validate the
          # arguments in your code before calling your function.
          sig { returns(String) }
          attr_accessor :arguments

          # The name of the function to call.
          sig { returns(String) }
          attr_accessor :name

          # Deprecated and replaced by `tool_calls`. The name and arguments of a function
          # that should be called, as generated by the model.
          sig { params(arguments: String, name: String).returns(T.attached_class) }
          def self.new(arguments:, name:); end

          sig { override.returns({arguments: String, name: String}) }
          def to_hash; end
        end
      end
    end

    ChatCompletionMessage = Chat::ChatCompletionMessage
  end
end
