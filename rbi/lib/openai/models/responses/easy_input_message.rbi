# typed: strong

module OpenAI
  module Models
    module Responses
      class EasyInputMessage < OpenAI::BaseModel
        # Text, image, or audio input to the model, used to generate a response. Can also
        #   contain previous assistant responses.
        sig do
          returns(
            T.any(
              String,
              T::Array[
              T.any(
                OpenAI::Models::Responses::ResponseInputText,
                OpenAI::Models::Responses::ResponseInputImage,
                OpenAI::Models::Responses::ResponseInputFile
              )
              ]
            )
          )
        end
        def content
        end

        sig do
          params(
            _: T.any(
              String,
              T::Array[
              T.any(
                OpenAI::Models::Responses::ResponseInputText,
                OpenAI::Models::Responses::ResponseInputImage,
                OpenAI::Models::Responses::ResponseInputFile
              )
              ]
            )
          )
            .returns(
              T.any(
                String,
                T::Array[
                T.any(
                  OpenAI::Models::Responses::ResponseInputText,
                  OpenAI::Models::Responses::ResponseInputImage,
                  OpenAI::Models::Responses::ResponseInputFile
                )
                ]
              )
            )
        end
        def content=(_)
        end

        # The role of the message input. One of `user`, `assistant`, `system`, or
        #   `developer`.
        sig { returns(Symbol) }
        def role
        end

        sig { params(_: Symbol).returns(Symbol) }
        def role=(_)
        end

        # The type of the message input. Always `message`.
        sig { returns(T.nilable(Symbol)) }
        def type
        end

        sig { params(_: Symbol).returns(Symbol) }
        def type=(_)
        end

        # A message input to the model with a role indicating instruction following
        #   hierarchy. Instructions given with the `developer` or `system` role take
        #   precedence over instructions given with the `user` role. Messages with the
        #   `assistant` role are presumed to have been generated by the model in previous
        #   interactions.
        sig do
          params(
            content: T.any(
              String,
              T::Array[
              T.any(
                OpenAI::Models::Responses::ResponseInputText,
                OpenAI::Models::Responses::ResponseInputImage,
                OpenAI::Models::Responses::ResponseInputFile
              )
              ]
            ),
            role: Symbol,
            type: Symbol
          )
            .returns(T.attached_class)
        end
        def self.new(content:, role:, type: nil)
        end

        sig do
          override
            .returns(
              {
                content: T.any(
                  String,
                  T::Array[
                  T.any(
                    OpenAI::Models::Responses::ResponseInputText,
                    OpenAI::Models::Responses::ResponseInputImage,
                    OpenAI::Models::Responses::ResponseInputFile
                  )
                  ]
                ),
                role: Symbol,
                type: Symbol
              }
            )
        end
        def to_hash
        end

        # Text, image, or audio input to the model, used to generate a response. Can also
        #   contain previous assistant responses.
        class Content < OpenAI::Union
          abstract!

          Variants =
            type_template(:out) do
              {
                fixed: T.any(
                  String,
                  T::Array[
                  T.any(
                    OpenAI::Models::Responses::ResponseInputText,
                    OpenAI::Models::Responses::ResponseInputImage,
                    OpenAI::Models::Responses::ResponseInputFile
                  )
                  ]
                )
              }
            end
        end

        # The role of the message input. One of `user`, `assistant`, `system`, or
        #   `developer`.
        class Role < OpenAI::Enum
          abstract!

          Value = type_template(:out) { {fixed: Symbol} }

          USER = :user
          ASSISTANT = :assistant
          SYSTEM = :system
          DEVELOPER = :developer
        end

        # The type of the message input. Always `message`.
        class Type < OpenAI::Enum
          abstract!

          Value = type_template(:out) { {fixed: Symbol} }

          MESSAGE = :message
        end
      end
    end
  end
end
