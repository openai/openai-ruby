# typed: strong

module OpenAI
  module Models
    module Responses
      class ResponseFunctionToolCallOutputItem < OpenAI::BaseModel
        # The unique ID of the function call tool output.
        sig { returns(String) }
        def id
        end

        sig { params(_: String).returns(String) }
        def id=(_)
        end

        # The unique ID of the function tool call generated by the model.
        sig { returns(String) }
        def call_id
        end

        sig { params(_: String).returns(String) }
        def call_id=(_)
        end

        # A JSON string of the output of the function tool call.
        sig { returns(String) }
        def output
        end

        sig { params(_: String).returns(String) }
        def output=(_)
        end

        # The type of the function tool call output. Always `function_call_output`.
        sig { returns(Symbol) }
        def type
        end

        sig { params(_: Symbol).returns(Symbol) }
        def type=(_)
        end

        # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
        #   Populated when items are returned via API.
        sig { returns(T.nilable(Symbol)) }
        def status
        end

        sig { params(_: Symbol).returns(Symbol) }
        def status=(_)
        end

        sig do
          params(
            id: String,
            call_id: String,
            output: String,
            status: Symbol,
            type: Symbol
          ).returns(T.attached_class)
        end
        def self.new(id:, call_id:, output:, status: nil, type: :function_call_output)
        end

        sig { override.returns({id: String, call_id: String, output: String, type: Symbol, status: Symbol}) }
        def to_hash
        end

        # The status of the item. One of `in_progress`, `completed`, or `incomplete`.
        #   Populated when items are returned via API.
        class Status < OpenAI::Enum
          abstract!

          Value = type_template(:out) { {fixed: Symbol} }

          IN_PROGRESS = :in_progress
          COMPLETED = :completed
          INCOMPLETE = :incomplete
        end
      end
    end
  end
end
