# typed: strong

module OpenAI
  module Models
    ChatCompletionMessageFunctionToolCall =
      Chat::ChatCompletionMessageFunctionToolCall

    module Chat
      class ChatCompletionMessageFunctionToolCall < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Chat::ChatCompletionMessageFunctionToolCall,
              OpenAI::Internal::AnyHash
            )
          end

        # The ID of the tool call.
        sig { returns(String) }
        attr_accessor :id

        # The function that the model called.
        sig do
          returns(OpenAI::Chat::ChatCompletionMessageFunctionToolCall::Function)
        end
        attr_reader :function

        sig do
          params(
            function:
              OpenAI::Chat::ChatCompletionMessageFunctionToolCall::Function::OrHash
          ).void
        end
        attr_writer :function

        # The type of the tool. Currently, only `function` is supported.
        sig { returns(Symbol) }
        attr_accessor :type

        # A call to a function tool created by the model.
        sig do
          params(
            id: String,
            function:
              OpenAI::Chat::ChatCompletionMessageFunctionToolCall::Function::OrHash,
            type: Symbol
          ).returns(T.attached_class)
        end
        def self.new(
          # The ID of the tool call.
          id:,
          # The function that the model called.
          function:,
          # The type of the tool. Currently, only `function` is supported.
          type: :function
        )
        end

        sig do
          override.returns(
            {
              id: String,
              function:
                OpenAI::Chat::ChatCompletionMessageFunctionToolCall::Function,
              type: Symbol
            }
          )
        end
        def to_hash
        end

        class Function < OpenAI::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                OpenAI::Chat::ChatCompletionMessageFunctionToolCall::Function,
                OpenAI::Internal::AnyHash
              )
            end

          # The arguments to call the function with, as generated by the model in JSON
          # format. Note that the model does not always generate valid JSON, and may
          # hallucinate parameters not defined by your function schema. Validate the
          # arguments in your code before calling your function.
          sig { returns(String) }
          attr_accessor :arguments

          # The parsed contents of the arguments.
          sig { returns(T.anything) }
          attr_accessor :parsed

          # The name of the function to call.
          sig { returns(String) }
          attr_accessor :name

          # The function that the model called.
          sig do
            params(arguments: String, name: String).returns(T.attached_class)
          end
          def self.new(
            # The arguments to call the function with, as generated by the model in JSON
            # format. Note that the model does not always generate valid JSON, and may
            # hallucinate parameters not defined by your function schema. Validate the
            # arguments in your code before calling your function.
            arguments:,
            # The name of the function to call.
            name:
          )
          end

          sig { override.returns({ arguments: String, name: String }) }
          def to_hash
          end
        end
      end
    end
  end
end
