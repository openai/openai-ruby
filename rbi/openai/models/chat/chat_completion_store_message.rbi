# typed: strong

module OpenAI
  module Models
    ChatCompletionStoreMessage = Chat::ChatCompletionStoreMessage

    module Chat
      class ChatCompletionStoreMessage < OpenAI::Models::Chat::ChatCompletionMessage
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Chat::ChatCompletionStoreMessage,
              OpenAI::Internal::AnyHash
            )
          end

        # The identifier of the chat message.
        sig { returns(String) }
        attr_accessor :id

        # If a content parts array was provided, this is an array of `text` and
        # `image_url` parts. Otherwise, null.
        sig do
          returns(
            T.nilable(
              T::Array[
                OpenAI::Chat::ChatCompletionStoreMessage::ContentPart::Variants
              ]
            )
          )
        end
        attr_accessor :content_parts

        # A chat completion message generated by the model.
        sig do
          params(
            id: String,
            content_parts:
              T.nilable(
                T::Array[
                  T.any(
                    OpenAI::Chat::ChatCompletionContentPartText::OrHash,
                    OpenAI::Chat::ChatCompletionContentPartImage::OrHash
                  )
                ]
              )
          ).returns(T.attached_class)
        end
        def self.new(
          # The identifier of the chat message.
          id:,
          # If a content parts array was provided, this is an array of `text` and
          # `image_url` parts. Otherwise, null.
          content_parts: nil
        )
        end

        sig do
          override.returns(
            {
              id: String,
              content_parts:
                T.nilable(
                  T::Array[
                    OpenAI::Chat::ChatCompletionStoreMessage::ContentPart::Variants
                  ]
                )
            }
          )
        end
        def to_hash
        end

        # Learn about
        # [text inputs](https://platform.openai.com/docs/guides/text-generation).
        module ContentPart
          extend OpenAI::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                OpenAI::Chat::ChatCompletionContentPartText,
                OpenAI::Chat::ChatCompletionContentPartImage
              )
            end

          sig do
            override.returns(
              T::Array[
                OpenAI::Chat::ChatCompletionStoreMessage::ContentPart::Variants
              ]
            )
          end
          def self.variants
          end
        end
      end
    end
  end
end
