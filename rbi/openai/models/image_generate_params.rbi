# typed: strong

module OpenAI
  module Models
    class ImageGenerateParams < OpenAI::Internal::Type::BaseModel
      extend OpenAI::Internal::Type::RequestParameters::Converter
      include OpenAI::Internal::Type::RequestParameters

      OrHash =
        T.type_alias do
          T.any(OpenAI::ImageGenerateParams, OpenAI::Internal::AnyHash)
        end

      # A text description of the desired image(s). The maximum length is 32000
      # characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters
      # for `dall-e-3`.
      sig { returns(String) }
      attr_accessor :prompt

      # Allows to set transparency for the background of the generated image(s). This
      # parameter is only supported for `gpt-image-1`. Must be one of `transparent`,
      # `opaque` or `auto` (default value). When `auto` is used, the model will
      # automatically determine the best background for the image.
      #
      # If `transparent`, the output format needs to support transparency, so it should
      # be set to either `png` (default value) or `webp`.
      sig do
        returns(T.nilable(OpenAI::ImageGenerateParams::Background::OrSymbol))
      end
      attr_accessor :background

      # The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or
      # `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to
      # `gpt-image-1` is used.
      sig { returns(T.nilable(T.any(String, OpenAI::ImageModel::OrSymbol))) }
      attr_accessor :model

      # Control the content-moderation level for images generated by `gpt-image-1`. Must
      # be either `low` for less restrictive filtering or `auto` (default value).
      sig do
        returns(T.nilable(OpenAI::ImageGenerateParams::Moderation::OrSymbol))
      end
      attr_accessor :moderation

      # The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only
      # `n=1` is supported.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :n

      # The compression level (0-100%) for the generated images. This parameter is only
      # supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and
      # defaults to 100.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :output_compression

      # The format in which the generated images are returned. This parameter is only
      # supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
      sig do
        returns(T.nilable(OpenAI::ImageGenerateParams::OutputFormat::OrSymbol))
      end
      attr_accessor :output_format

      # The number of partial images to generate. This parameter is used for streaming
      # responses that return partial images. Value must be between 0 and 3. When set to
      # 0, the response will be a single image sent in one streaming event.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :partial_images

      # The quality of the image that will be generated.
      #
      # - `auto` (default value) will automatically select the best quality for the
      #   given model.
      # - `high`, `medium` and `low` are supported for `gpt-image-1`.
      # - `hd` and `standard` are supported for `dall-e-3`.
      # - `standard` is the only option for `dall-e-2`.
      sig { returns(T.nilable(OpenAI::ImageGenerateParams::Quality::OrSymbol)) }
      attr_accessor :quality

      # The format in which generated images with `dall-e-2` and `dall-e-3` are
      # returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes
      # after the image has been generated. This parameter isn't supported for
      # `gpt-image-1` which will always return base64-encoded images.
      sig do
        returns(
          T.nilable(OpenAI::ImageGenerateParams::ResponseFormat::OrSymbol)
        )
      end
      attr_accessor :response_format

      # The size of the generated images. Must be one of `1024x1024`, `1536x1024`
      # (landscape), `1024x1536` (portrait), or `auto` (default value) for
      # `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and
      # one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
      sig { returns(T.nilable(OpenAI::ImageGenerateParams::Size::OrSymbol)) }
      attr_accessor :size

      # The style of the generated images. This parameter is only supported for
      # `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean
      # towards generating hyper-real and dramatic images. Natural causes the model to
      # produce more natural, less hyper-real looking images.
      sig { returns(T.nilable(OpenAI::ImageGenerateParams::Style::OrSymbol)) }
      attr_accessor :style

      # A unique identifier representing your end-user, which can help OpenAI to monitor
      # and detect abuse.
      # [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
      sig { returns(T.nilable(String)) }
      attr_reader :user

      sig { params(user: String).void }
      attr_writer :user

      sig do
        params(
          prompt: String,
          background:
            T.nilable(OpenAI::ImageGenerateParams::Background::OrSymbol),
          model: T.nilable(T.any(String, OpenAI::ImageModel::OrSymbol)),
          moderation:
            T.nilable(OpenAI::ImageGenerateParams::Moderation::OrSymbol),
          n: T.nilable(Integer),
          output_compression: T.nilable(Integer),
          output_format:
            T.nilable(OpenAI::ImageGenerateParams::OutputFormat::OrSymbol),
          partial_images: T.nilable(Integer),
          quality: T.nilable(OpenAI::ImageGenerateParams::Quality::OrSymbol),
          response_format:
            T.nilable(OpenAI::ImageGenerateParams::ResponseFormat::OrSymbol),
          size: T.nilable(OpenAI::ImageGenerateParams::Size::OrSymbol),
          style: T.nilable(OpenAI::ImageGenerateParams::Style::OrSymbol),
          user: String,
          request_options: OpenAI::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # A text description of the desired image(s). The maximum length is 32000
        # characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters
        # for `dall-e-3`.
        prompt:,
        # Allows to set transparency for the background of the generated image(s). This
        # parameter is only supported for `gpt-image-1`. Must be one of `transparent`,
        # `opaque` or `auto` (default value). When `auto` is used, the model will
        # automatically determine the best background for the image.
        #
        # If `transparent`, the output format needs to support transparency, so it should
        # be set to either `png` (default value) or `webp`.
        background: nil,
        # The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or
        # `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to
        # `gpt-image-1` is used.
        model: nil,
        # Control the content-moderation level for images generated by `gpt-image-1`. Must
        # be either `low` for less restrictive filtering or `auto` (default value).
        moderation: nil,
        # The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only
        # `n=1` is supported.
        n: nil,
        # The compression level (0-100%) for the generated images. This parameter is only
        # supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and
        # defaults to 100.
        output_compression: nil,
        # The format in which the generated images are returned. This parameter is only
        # supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
        output_format: nil,
        # The number of partial images to generate. This parameter is used for streaming
        # responses that return partial images. Value must be between 0 and 3. When set to
        # 0, the response will be a single image sent in one streaming event.
        partial_images: nil,
        # The quality of the image that will be generated.
        #
        # - `auto` (default value) will automatically select the best quality for the
        #   given model.
        # - `high`, `medium` and `low` are supported for `gpt-image-1`.
        # - `hd` and `standard` are supported for `dall-e-3`.
        # - `standard` is the only option for `dall-e-2`.
        quality: nil,
        # The format in which generated images with `dall-e-2` and `dall-e-3` are
        # returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes
        # after the image has been generated. This parameter isn't supported for
        # `gpt-image-1` which will always return base64-encoded images.
        response_format: nil,
        # The size of the generated images. Must be one of `1024x1024`, `1536x1024`
        # (landscape), `1024x1536` (portrait), or `auto` (default value) for
        # `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and
        # one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
        size: nil,
        # The style of the generated images. This parameter is only supported for
        # `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean
        # towards generating hyper-real and dramatic images. Natural causes the model to
        # produce more natural, less hyper-real looking images.
        style: nil,
        # A unique identifier representing your end-user, which can help OpenAI to monitor
        # and detect abuse.
        # [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
        user: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            prompt: String,
            background:
              T.nilable(OpenAI::ImageGenerateParams::Background::OrSymbol),
            model: T.nilable(T.any(String, OpenAI::ImageModel::OrSymbol)),
            moderation:
              T.nilable(OpenAI::ImageGenerateParams::Moderation::OrSymbol),
            n: T.nilable(Integer),
            output_compression: T.nilable(Integer),
            output_format:
              T.nilable(OpenAI::ImageGenerateParams::OutputFormat::OrSymbol),
            partial_images: T.nilable(Integer),
            quality: T.nilable(OpenAI::ImageGenerateParams::Quality::OrSymbol),
            response_format:
              T.nilable(OpenAI::ImageGenerateParams::ResponseFormat::OrSymbol),
            size: T.nilable(OpenAI::ImageGenerateParams::Size::OrSymbol),
            style: T.nilable(OpenAI::ImageGenerateParams::Style::OrSymbol),
            user: String,
            request_options: OpenAI::RequestOptions
          }
        )
      end
      def to_hash
      end

      # Allows to set transparency for the background of the generated image(s). This
      # parameter is only supported for `gpt-image-1`. Must be one of `transparent`,
      # `opaque` or `auto` (default value). When `auto` is used, the model will
      # automatically determine the best background for the image.
      #
      # If `transparent`, the output format needs to support transparency, so it should
      # be set to either `png` (default value) or `webp`.
      module Background
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, OpenAI::ImageGenerateParams::Background)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        TRANSPARENT =
          T.let(
            :transparent,
            OpenAI::ImageGenerateParams::Background::TaggedSymbol
          )
        OPAQUE =
          T.let(:opaque, OpenAI::ImageGenerateParams::Background::TaggedSymbol)
        AUTO =
          T.let(:auto, OpenAI::ImageGenerateParams::Background::TaggedSymbol)

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::Background::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or
      # `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to
      # `gpt-image-1` is used.
      module Model
        extend OpenAI::Internal::Type::Union

        Variants =
          T.type_alias { T.any(String, OpenAI::ImageModel::TaggedSymbol) }

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::Model::Variants]
          )
        end
        def self.variants
        end
      end

      # Control the content-moderation level for images generated by `gpt-image-1`. Must
      # be either `low` for less restrictive filtering or `auto` (default value).
      module Moderation
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, OpenAI::ImageGenerateParams::Moderation)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        LOW = T.let(:low, OpenAI::ImageGenerateParams::Moderation::TaggedSymbol)
        AUTO =
          T.let(:auto, OpenAI::ImageGenerateParams::Moderation::TaggedSymbol)

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::Moderation::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The format in which the generated images are returned. This parameter is only
      # supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
      module OutputFormat
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, OpenAI::ImageGenerateParams::OutputFormat)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        PNG =
          T.let(:png, OpenAI::ImageGenerateParams::OutputFormat::TaggedSymbol)
        JPEG =
          T.let(:jpeg, OpenAI::ImageGenerateParams::OutputFormat::TaggedSymbol)
        WEBP =
          T.let(:webp, OpenAI::ImageGenerateParams::OutputFormat::TaggedSymbol)

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::OutputFormat::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The quality of the image that will be generated.
      #
      # - `auto` (default value) will automatically select the best quality for the
      #   given model.
      # - `high`, `medium` and `low` are supported for `gpt-image-1`.
      # - `hd` and `standard` are supported for `dall-e-3`.
      # - `standard` is the only option for `dall-e-2`.
      module Quality
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, OpenAI::ImageGenerateParams::Quality) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        STANDARD =
          T.let(:standard, OpenAI::ImageGenerateParams::Quality::TaggedSymbol)
        HD = T.let(:hd, OpenAI::ImageGenerateParams::Quality::TaggedSymbol)
        LOW = T.let(:low, OpenAI::ImageGenerateParams::Quality::TaggedSymbol)
        MEDIUM =
          T.let(:medium, OpenAI::ImageGenerateParams::Quality::TaggedSymbol)
        HIGH = T.let(:high, OpenAI::ImageGenerateParams::Quality::TaggedSymbol)
        AUTO = T.let(:auto, OpenAI::ImageGenerateParams::Quality::TaggedSymbol)

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::Quality::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The format in which generated images with `dall-e-2` and `dall-e-3` are
      # returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes
      # after the image has been generated. This parameter isn't supported for
      # `gpt-image-1` which will always return base64-encoded images.
      module ResponseFormat
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, OpenAI::ImageGenerateParams::ResponseFormat)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        URL =
          T.let(:url, OpenAI::ImageGenerateParams::ResponseFormat::TaggedSymbol)
        B64_JSON =
          T.let(
            :b64_json,
            OpenAI::ImageGenerateParams::ResponseFormat::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::ResponseFormat::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The size of the generated images. Must be one of `1024x1024`, `1536x1024`
      # (landscape), `1024x1536` (portrait), or `auto` (default value) for
      # `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and
      # one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
      module Size
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, OpenAI::ImageGenerateParams::Size) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        AUTO = T.let(:auto, OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_1024X1024 =
          T.let(:"1024x1024", OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_1536X1024 =
          T.let(:"1536x1024", OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_1024X1536 =
          T.let(:"1024x1536", OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_256X256 =
          T.let(:"256x256", OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_512X512 =
          T.let(:"512x512", OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_1792X1024 =
          T.let(:"1792x1024", OpenAI::ImageGenerateParams::Size::TaggedSymbol)
        SIZE_1024X1792 =
          T.let(:"1024x1792", OpenAI::ImageGenerateParams::Size::TaggedSymbol)

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::Size::TaggedSymbol]
          )
        end
        def self.values
        end
      end

      # The style of the generated images. This parameter is only supported for
      # `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean
      # towards generating hyper-real and dramatic images. Natural causes the model to
      # produce more natural, less hyper-real looking images.
      module Style
        extend OpenAI::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, OpenAI::ImageGenerateParams::Style) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        VIVID = T.let(:vivid, OpenAI::ImageGenerateParams::Style::TaggedSymbol)
        NATURAL =
          T.let(:natural, OpenAI::ImageGenerateParams::Style::TaggedSymbol)

        sig do
          override.returns(
            T::Array[OpenAI::ImageGenerateParams::Style::TaggedSymbol]
          )
        end
        def self.values
        end
      end
    end
  end
end
