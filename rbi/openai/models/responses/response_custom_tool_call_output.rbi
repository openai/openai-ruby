# typed: strong

module OpenAI
  module Models
    module Responses
      class ResponseCustomToolCallOutput < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Responses::ResponseCustomToolCallOutput,
              OpenAI::Internal::AnyHash
            )
          end

        # The call ID, used to map this custom tool call output to a custom tool call.
        sig { returns(String) }
        attr_accessor :call_id

        # The output from the custom tool call generated by your code. Can be a string or
        # an list of output content.
        sig do
          returns(
            OpenAI::Responses::ResponseCustomToolCallOutput::Output::Variants
          )
        end
        attr_accessor :output

        # The type of the custom tool call output. Always `custom_tool_call_output`.
        sig { returns(Symbol) }
        attr_accessor :type

        # The unique ID of the custom tool call output in the OpenAI platform.
        sig { returns(T.nilable(String)) }
        attr_reader :id

        sig { params(id: String).void }
        attr_writer :id

        # The output of a custom tool call from your code, being sent back to the model.
        sig do
          params(
            call_id: String,
            output:
              OpenAI::Responses::ResponseCustomToolCallOutput::Output::Variants,
            id: String,
            type: Symbol
          ).returns(T.attached_class)
        end
        def self.new(
          # The call ID, used to map this custom tool call output to a custom tool call.
          call_id:,
          # The output from the custom tool call generated by your code. Can be a string or
          # an list of output content.
          output:,
          # The unique ID of the custom tool call output in the OpenAI platform.
          id: nil,
          # The type of the custom tool call output. Always `custom_tool_call_output`.
          type: :custom_tool_call_output
        )
        end

        sig do
          override.returns(
            {
              call_id: String,
              output:
                OpenAI::Responses::ResponseCustomToolCallOutput::Output::Variants,
              type: Symbol,
              id: String
            }
          )
        end
        def to_hash
        end

        # The output from the custom tool call generated by your code. Can be a string or
        # an list of output content.
        module Output
          extend OpenAI::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                String,
                T::Array[
                  OpenAI::Responses::ResponseCustomToolCallOutput::Output::OutputContentList::Variants
                ]
              )
            end

          # A text input to the model.
          module OutputContentList
            extend OpenAI::Internal::Type::Union

            Variants =
              T.type_alias do
                T.any(
                  OpenAI::Responses::ResponseInputText,
                  OpenAI::Responses::ResponseInputImage,
                  OpenAI::Responses::ResponseInputFile
                )
              end

            sig do
              override.returns(
                T::Array[
                  OpenAI::Responses::ResponseCustomToolCallOutput::Output::OutputContentList::Variants
                ]
              )
            end
            def self.variants
            end
          end

          sig do
            override.returns(
              T::Array[
                OpenAI::Responses::ResponseCustomToolCallOutput::Output::Variants
              ]
            )
          end
          def self.variants
          end

          OutputContentListArray =
            T.let(
              OpenAI::Internal::Type::ArrayOf[
                union:
                  OpenAI::Responses::ResponseCustomToolCallOutput::Output::OutputContentList
              ],
              OpenAI::Internal::Type::Converter
            )
        end
      end
    end
  end
end
