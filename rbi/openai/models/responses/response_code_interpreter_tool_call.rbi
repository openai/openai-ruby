# typed: strong

module OpenAI
  module Models
    module Responses
      class ResponseCodeInterpreterToolCall < OpenAI::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              OpenAI::Responses::ResponseCodeInterpreterToolCall,
              OpenAI::Internal::AnyHash
            )
          end

        # The unique ID of the code interpreter tool call.
        sig { returns(String) }
        attr_accessor :id

        # The code to run, or null if not available.
        sig { returns(T.nilable(String)) }
        attr_accessor :code

        # The ID of the container used to run the code.
        sig { returns(String) }
        attr_accessor :container_id

        # The outputs generated by the code interpreter, such as logs or images. Can be
        # null if no outputs are available.
        sig do
          returns(
            T.nilable(
              T::Array[
                T.any(
                  OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Logs,
                  OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Image
                )
              ]
            )
          )
        end
        attr_accessor :outputs

        # The status of the code interpreter tool call. Valid values are `in_progress`,
        # `completed`, `incomplete`, `interpreting`, and `failed`.
        sig do
          returns(
            OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::OrSymbol
          )
        end
        attr_accessor :status

        # The type of the code interpreter tool call. Always `code_interpreter_call`.
        sig { returns(Symbol) }
        attr_accessor :type

        # A tool call to run code.
        sig do
          params(
            id: String,
            code: T.nilable(String),
            container_id: String,
            outputs:
              T.nilable(
                T::Array[
                  T.any(
                    OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Logs::OrHash,
                    OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Image::OrHash
                  )
                ]
              ),
            status:
              OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::OrSymbol,
            type: Symbol
          ).returns(T.attached_class)
        end
        def self.new(
          # The unique ID of the code interpreter tool call.
          id:,
          # The code to run, or null if not available.
          code:,
          # The ID of the container used to run the code.
          container_id:,
          # The outputs generated by the code interpreter, such as logs or images. Can be
          # null if no outputs are available.
          outputs:,
          # The status of the code interpreter tool call. Valid values are `in_progress`,
          # `completed`, `incomplete`, `interpreting`, and `failed`.
          status:,
          # The type of the code interpreter tool call. Always `code_interpreter_call`.
          type: :code_interpreter_call
        )
        end

        sig do
          override.returns(
            {
              id: String,
              code: T.nilable(String),
              container_id: String,
              outputs:
                T.nilable(
                  T::Array[
                    T.any(
                      OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Logs,
                      OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Image
                    )
                  ]
                ),
              status:
                OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::OrSymbol,
              type: Symbol
            }
          )
        end
        def to_hash
        end

        # The logs output from the code interpreter.
        module Output
          extend OpenAI::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Logs,
                OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Image
              )
            end

          class Logs < OpenAI::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Logs,
                  OpenAI::Internal::AnyHash
                )
              end

            # The logs output from the code interpreter.
            sig { returns(String) }
            attr_accessor :logs

            # The type of the output. Always 'logs'.
            sig { returns(Symbol) }
            attr_accessor :type

            # The logs output from the code interpreter.
            sig { params(logs: String, type: Symbol).returns(T.attached_class) }
            def self.new(
              # The logs output from the code interpreter.
              logs:,
              # The type of the output. Always 'logs'.
              type: :logs
            )
            end

            sig { override.returns({ logs: String, type: Symbol }) }
            def to_hash
            end
          end

          class Image < OpenAI::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Image,
                  OpenAI::Internal::AnyHash
                )
              end

            # The type of the output. Always 'image'.
            sig { returns(Symbol) }
            attr_accessor :type

            # The URL of the image output from the code interpreter.
            sig { returns(String) }
            attr_accessor :url

            # The image output from the code interpreter.
            sig { params(url: String, type: Symbol).returns(T.attached_class) }
            def self.new(
              # The URL of the image output from the code interpreter.
              url:,
              # The type of the output. Always 'image'.
              type: :image
            )
            end

            sig { override.returns({ type: Symbol, url: String }) }
            def to_hash
            end
          end

          sig do
            override.returns(
              T::Array[
                OpenAI::Responses::ResponseCodeInterpreterToolCall::Output::Variants
              ]
            )
          end
          def self.variants
          end
        end

        # The status of the code interpreter tool call. Valid values are `in_progress`,
        # `completed`, `incomplete`, `interpreting`, and `failed`.
        module Status
          extend OpenAI::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(
                Symbol,
                OpenAI::Responses::ResponseCodeInterpreterToolCall::Status
              )
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          IN_PROGRESS =
            T.let(
              :in_progress,
              OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::TaggedSymbol
            )
          COMPLETED =
            T.let(
              :completed,
              OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::TaggedSymbol
            )
          INCOMPLETE =
            T.let(
              :incomplete,
              OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::TaggedSymbol
            )
          INTERPRETING =
            T.let(
              :interpreting,
              OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::TaggedSymbol
            )
          FAILED =
            T.let(
              :failed,
              OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[
                OpenAI::Responses::ResponseCodeInterpreterToolCall::Status::TaggedSymbol
              ]
            )
          end
          def self.values
          end
        end
      end
    end
  end
end
